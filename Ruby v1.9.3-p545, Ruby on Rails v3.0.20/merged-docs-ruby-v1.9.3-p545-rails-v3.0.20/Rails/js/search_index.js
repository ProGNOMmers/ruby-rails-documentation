var search_data = {"index":{"searchIndex":["abstractcontroller","actionnotfound","assetpaths","base","callbacks","classmethods","collector","mime","doublerendererror","error","helpers","classmethods","layouts","classmethods","layoutconditions","logger","rendering","classmethods","translation","viewpaths","actionview","classmethods","actioncontroller","base","caching","actions","actioncachepath","classmethods","activerecord","configmethods","fragments","pages","classmethods","sweeping","compatibility","classmethods","conditionalget","cookies","dispatcher","doublerendererror","flash","head","helpers","classmethods","prototypehelper","hideactions","classmethods","httpauthentication","basic","controllermethods","digest","controllermethods","token","controllermethods","implicitrender","instrumentation","classmethods","logsubscriber","metal","middleware","actionmiddleware","mimeresponds","classmethods","rackdelegation","railtie","activesupport","deprecation","recordidentifier","redirecting","renderers","actionview","all","classmethods","mime","rendering","requestforgeryprotection","classmethods","rescue","responder","routing","sessionmanagement","classmethods","streaming","templateassertions","testcase","behavior","classmethods","raiseactionexceptions","testresponse","testing","classmethods","unknownaction","urlfor","classmethods","urlrewriter","urlwriter","actiondispatch","assertions","domassertions","responseassertions","routingassertions","selectorassertions","tagassertions","beststandardssupport","callbacks","cookies","cookieoverflow","flash","flashhash","head","http","cache","request","response","filterparameters","headers","mimenegotiation","parameterfilter","parameters","url","upload","uploadedfile","integration","requesthelpers","runner","session","integrationtest","middlewarestack","middleware","paramsparser","performancetest","railtie","activesupport","remoteip","ipspoofattackerror","remoteipgetter","request","rescue","response","setup","routing","mapper","base","httphelpers","resources","scoping","shorthand","polymorphicroutes","routeset","urlfor","session","abstractstore","optionshash","sessionhash","cookiestore","memcachestore","showexceptions","static","testprocess","testrequest","testresponse","deprecatedhelpers","actionmailer","base","deprecatedheaderproxy","deprecatedurloptions","actionview","base","subclasses","context","filesystemresolver","fixtureresolver","helpers","activemodelformbuilder","activemodelhelper","activemodelinstancetag","assettaghelper","atomfeedhelper","atombuilder","atomfeedbuilder","cachehelper","capturehelper","csrfhelper","datehelper","debughelper","formbuilder","formhelper","formoptionshelper","formtaghelper","instancetag","instancetagmethods","classmethods","javascripthelper","numberhelper","invalidnumbererror","prototypehelper","javascriptgenerator","generatormethods","rawoutputhelper","recordtaghelper","sanitizehelper","scriptaculoushelper","taghelper","texthelper","translationhelper","urlhelper","layouts","logsubscriber","lookupcontext","details","viewpaths","nonconcattingstring","nullresolver","outputbuffer","partials","partialrenderer","pathresolver","railtie","activesupport","rendering","resolver","template","actionview","template","template","handler","handlers","builder","compilable","classmethods","erb","erubis","rjs","testcase","behavior","classmethods","locals","testcontroller","activemodel","attributemethods","classmethods","attributemethodmatcher","blockvalidator","callbacks","conversion","deprecatederrormethods","dirty","eachvalidator","errors","lint","tests","massassignmentsecurity","blacklist","classmethods","permissionset","sanitizer","whitelist","missingattributeerror","name","naming","observer","observing","classmethods","serialization","serializers","json","xml","translation","validations","acceptancevalidator","callbacks","classmethods","classmethods","confirmationvalidator","exclusionvalidator","formatvalidator","helpermethods","inclusionvalidator","lengthvalidator","numericalityvalidator","presencevalidator","validator","activerecord","activerecorderror","adapternotfound","adapternotspecified","aggregations","classmethods","associationpreload","classmethods","associationtypemismatch","associations","classmethods","hasonethroughassociation","throughassociationscope","attributeassignmenterror","attributemethods","beforetypecast","classmethods","dirty","primarykey","classmethods","query","read","classmethods","timezoneconversion","classmethods","write","classmethods","autosaveassociation","classmethods","base","calculations","callbacks","classmethods","configurationerror","connectionadapters","abstractadapter","column","format","connectionhandler","connectionmanagement","connectionpool","databaselimits","databasestatements","mysqladapter","postgresqladapter","postgresqlcolumn","querycache","quoting","sqliteadapter","version","schemastatements","table","tabledefinition","connectionnotestablished","connectiontimeouterror","countercache","dangerousattributeerror","dynamicfindermatch","dynamicscopematch","findermethods","invalidforeignkey","irreversiblemigration","locking","optimistic","classmethods","pessimistic","logsubscriber","migration","migrationproxy","multiparameterassignmenterrors","namedscope","classmethods","nestedattributes","classmethods","toomanyrecords","observer","persistence","predicatebuilder","preparedstatementinvalid","querycache","classmethods","querymethods","railtie","activesupport","railties","controllerruntime","classmethods","readonlyrecord","recordinvalid","recordnotfound","recordnotsaved","recordnotunique","reflection","classmethods","macroreflection","relation","rollback","schema","serialization","serializationtypemismatch","sessionstore","session","sqlbypass","spawnmethods","staleobjecterror","statementinvalid","testfixtures","classmethods","throwresult","timestamp","transactions","classmethods","unknownattributeerror","validations","associatedvalidator","classmethods","uniquenessvalidator","wrappeddatabaseexception","activesupport","autoload","backtracecleaner","base64","basicobject","benchmarkable","bufferedlogger","severity","cache","compressedmemcachestore","entry","filestore","memcachestore","memorystore","store","strategy","localcache","localstore","synchronizedmemorystore","callbacks","callback","callbackchain","classmethods","concern","configurable","classmethods","dependencies","reference","watchstack","deprecation","descendantstracker","duration","fileupdatechecker","gzip","stream","hashwithindifferentaccess","hashwithindifferentaccess","inflector","inflections","inheritableoptions","json","backends","jsongem","okjson","parseerror","yajl","yaml","encoding","circularreferenceerror","encoder","variable","logsubscriber","testhelper","mocklogger","memoizable","instancemethods","messageencryptor","invalidmessage","messageverifier","invalidsignature","multibyte","chars","encodingerror","unicode","codepoint","unicodedatabase","notifications","event","fanout","instrumenter","okjson","error","utf8error","orderedoptions","railtie","rescuable","classmethods","safebuffer","safeconcaterror","securerandom","stringinquirer","testcase","testing","assertions","declarative","isolation","forking","minitest","subprocess","testunit","pending","performance","benchmarker","metrics","base","gc","cputime","gcruns","gctime","gc","memory","objects","processtime","time","walltime","performer","profiler","proxytestresult","remoteerror","setupandteardown","classmethods","forclassictestunit","forminitest","minitest","timewithzone","timezone","xmlmini","xmlmini_libxmlsax","hashbuilder","xmlmini_nokogiri","nokogiri","xml","xmlmini_nokogirisax","hashbuilder","applicationcontroller","applicationhelper","arjdbcmysql","error","array","benchmark","bigdecimal","browsingtest","class","commands","info","install","plugin","remove","date","datetime","erb","util","encoding","enumerable","erb","generators","controllergenerator","mailergenerator","scaffoldgenerator","falseclass","file","fixnum","fixtures","psych","fixturesfilenotfound","float","html","fullsanitizer","linksanitizer","sanitizer","selector","tag","whitelistsanitizer","hash","i18n","exceptionhandler","railtie","integer","kernel","libxml","xml","missingsourcefile","logger","simpleformatter","mime","mimes","type","missingsourcefile","module","nameerror","nilclass","numeric","object","plugin","process","rails","api","apptask","edgetask","repotask","stabletask","task","actionmethods","appbuilder","application","bootstrap","configurable","classmethods","configuration","finisher","railties","backtracecleaner","configuration","deprecated","console","dbconsole","deprecatedconstant","engine","configurable","classmethods","configuration","generators","actions","activemodel","appgenerator","base","controllergenerator","error","generatedattribute","generatorgenerator","helpergenerator","integrationtestgenerator","migration","classmethods","migrationgenerator","modelgenerator","namedbase","observergenerator","performancetestgenerator","plugingenerator","resourcegenerator","resourcehelpers","scaffoldcontrollergenerator","scaffoldgenerator","sessionmigrationgenerator","stylesheetsgenerator","testcase","info","gem","infocontroller","initializable","classmethods","collection","initializer","initializer","paths","path","pathparent","root","plugin","rack","debugger","logtailer","logger","railtie","configurable","classmethods","configuration","scriptrailsloader","server","options","testunitrailtie","railsenvironment","range","rbconfig","recursivehttpfetcher","rubyprof","sourceannotationextractor","annotation","string","test","unit","collector","objectspace","util","testunit","generators","controllergenerator","helpergenerator","integrationgenerator","mailergenerator","modelgenerator","observergenerator","performancegenerator","plugingenerator","scaffoldgenerator","time","trueclass","uri","&()","+()","+()","+()","+()","+()","+()","-()","-()","-()","<<()","<<()","<<()","<<()","<<()","<=>()","<=>()","<=>()","<=>()","<=>()","<=>()","==()","==()","==()","==()","==()","==()","==()","===()","===()","===()","===()","=~()","=~()","=~()",">>()","get()","post()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","__replay__()","_all_autoload_paths()","_all_load_paths()","_assigns()","_compile_filter()","_compile_options()","_compile_per_key_options()","_compute_redirect_to_location()","_dasherize()","_default_layout()","_dump()","_dump_without_utc_flag()","_dump_without_zone()","_extract_redirect_to_status()","_handle_action_missing()","_handle_method_missing()","_implied_layout_name()","_include_layout?()","_insert_callbacks()","_layout()","_layout_for_option()","_load()","_merge_attributes()","_mock_session()","_normalize_args()","_normalize_callback_options()","_normalize_legacy_filter()","_normalize_options()","_normalize_options()","_normalize_options()","_original_to_s()","_parse_file()","_prefix()","_process_options()","_read_attribute()","_render_partial()","_routes()","_routes()","_run_class_setup()","_save_fragment()","_set_detail()","_stash_object_in_method()","_superclass_delegating_accessor()","_update_filter()","_user_defined_ivars()","_view()","_write_layout_method()","_write_render_options()","_write_render_options()","abbrev()","abstract!()","abstract_class?()","abstract_railtie?()","accept=()","accepts()","accepts_nested_attributes_for()","accessible_attributes()","action()","action=()","action_has_layout?()","action_has_layout?()","action_method?()","action_methods()","action_methods()","action_methods()","action_options?()","action_path()","action_prefix()","active()","active?()","active?()","active?()","active_authorizer()","acts_like?()","acts_like_date?()","acts_like_date?()","acts_like_string?()","acts_like_string?()","acts_like_time?()","acts_like_time?()","acts_like_time?()","adapter_name()","adapter_name()","add()","add()","add()","add_association_callbacks()","add_autosave_association_callbacks()","add_column()","add_column()","add_column()","add_column_position!()","add_confirm_to_attributes!()","add_counter_cache_callbacks()","add_disable_with_to_attributes!()","add_error()","add_expr_escaped()","add_expr_literal()","add_filter()","add_gem_filters()","add_index()","add_limit_offset!()","add_method_to_attributes!()","add_observer()","add_observer!()","add_on_blank()","add_on_empty()","add_postamble()","add_preamble()","add_preloaded_record_to_collection()","add_preloaded_records_to_collection()","add_renderer()","add_resource_route()","add_routes()","add_shebang_option!()","add_silencer()","add_source()","add_stmt()","add_template_helper()","add_text()","add_timestamps()","add_to_base()","add_to_transaction()","add_touch_callbacks()","add_transaction_record()","add_whiner()","advance()","advance()","advance()","advance()","after()","after()","after_commit()","after_dispatch()","after_dispatch()","after_initialize()","after_rollback()","after_validation()","aggregate_column()","aggregate_mapping()","ago()","ago()","ago()","ago()","ago()","ago()","alert()","alert()","alert=()","alias_attribute()","alias_attribute()","alias_method_chain()","all()","all()","all()","all()","all()","all_application_helpers()","all_attributes_exists?()","all_paths()","announce()","anonymous?()","any?()","api_behavior()","api_dir()","api_dir()","api_location()","api_main()","app()","app()","app()","app()","app()","app=()","app_generators()","app_middleware()","append=()","append_conditions()","append_features()","append_if_string=()","append_info_to_payload()","append_view_path()","append_view_path()","application()","application()","application=()","application_name()","application_trace()","apply_common_behavior_for()","apply_finder_options()","apply_join_dependency()","apply_modules()","arel()","arel_attributes_values()","arel_engine()","arel_table()","arguments()","arguments_for_call()","array_of_strings?()","array_or_string_for_javascript()","array_or_string_for_javascript()","arrenc()","arrparse()","as_json()","as_json()","as_json()","as_json()","assert_blank()","assert_boolean()","assert_class_method()","assert_difference()","assert_directory()","assert_dom_equal()","assert_dom_not_equal()","assert_field_default_value()","assert_field_type()","assert_file()","assert_generates()","assert_index()","assert_instance_method()","assert_method()","assert_migration()","assert_no_difference()","assert_no_directory()","assert_no_file()","assert_no_migration()","assert_no_tag()","assert_present()","assert_recognizes()","assert_redirected_to()","assert_response()","assert_routing()","assert_select()","assert_select_email()","assert_select_encoded()","assert_select_rjs()","assert_tag()","assert_template()","assert_valid_keys()","asset_file_path()","asset_file_path!()","assign()","assign_default_content_type_and_charset!()","assign_multiparameter_attributes()","assign_shortcuts()","assigns()","assigns()","associated_records()","associated_records_to_validate_or_save()","association_accessor_methods()","association_constructor_method()","association_valid?()","assume_migrated_upto_version()","at()","at()","at_beginning_of_day()","at_beginning_of_day()","at_beginning_of_day()","at_beginning_of_month()","at_beginning_of_month()","at_beginning_of_quarter()","at_beginning_of_quarter()","at_beginning_of_week()","at_beginning_of_week()","at_beginning_of_year()","at_beginning_of_year()","at_end_of_month()","at_end_of_month()","at_end_of_quarter()","at_end_of_quarter()","at_end_of_week()","at_end_of_week()","at_end_of_year()","at_end_of_year()","at_midnight()","at_midnight()","at_midnight()","atom_feed()","atomic_write()","attach_to()","attachments()","attr_accessible()","attr_accessor_with_default()","attr_internal()","attr_internal_accessor()","attr_internal_ivar_name()","attr_internal_reader()","attr_internal_writer()","attr_protected()","attr_readonly()","attribute()","attribute=()","attribute?()","attribute_before_type_cast()","attribute_change()","attribute_changed?()","attribute_for_inspect()","attribute_match()","attribute_method?()","attribute_method?()","attribute_method?()","attribute_method_affix()","attribute_method_prefix()","attribute_method_suffix()","attribute_methods_generated?()","attribute_names()","attribute_present?()","attribute_was()","attribute_will_change!()","attributes()","attributes=()","attributes_before_type_cast()","attributes_from_column_definition()","attributes_from_column_definition()","attributes_protected_by_default()","attributes_protected_by_default()","audio_path()","audio_tag()","authenticate()","authenticate_or_request_with_http_basic()","authenticate_with_http_basic()","authentication_request()","authorization()","auto_discovery_link_tag()","auto_flush()","auto_flushing=()","auto_link()","auto_link_email_addresses()","auto_link_urls()","auto_linked?()","autoload()","autoload_at()","autoload_once()","autoload_once_paths()","autoload_paths()","autoload_paths()","autoload_under()","autoloads()","available_views()","average()","backend()","backend=()","backend=()","backtrace_cleaner()","bang?()","banner()","base64()","base_class()","base_name()","base_root()","becomes()","before()","before()","before_configuration()","before_dispatch()","before_dispatch()","before_eager_load()","before_filters()","before_initialize()","before_save_collection_association()","before_validation()","begin_db_transaction()","begin_db_transaction()","beginning_of_day()","beginning_of_day()","beginning_of_day()","beginning_of_month()","beginning_of_month()","beginning_of_quarter()","beginning_of_quarter()","beginning_of_week()","beginning_of_week()","beginning_of_year()","beginning_of_year()","behavior()","behavior=()","belongs_to()","belongs_to()","belongs_to()","benchmark()","benchmark()","best_install_method()","between?()","binary_content()","binary_to_string()","bind()","blank?()","blank?()","block_to_function()","body()","body()","body=()","body_parts()","breakpoint()","buffer()","build()","build()","build()","build()","build_arel()","build_callbacks()","build_conditions()","build_from_hash()","build_joins()","build_mem_cache()","build_method_name()","build_middleware_stack()","build_named_route_call()","build_path()","build_request_uri()","build_select()","build_sti_condition()","build_through_conditions()","build_where()","builtin_controller()","button_to()","button_to_function()","bypass_local_cache()","byte()","bytes()","cache()","cache()","cache()","cache()","cache()","cache_attribute?()","cache_attributes()","cache_configured?()","cache_fixtures()","cache_for_connection()","cache_key()","cache_page()","cache_page()","cache_sql()","cache_store()","cache_store=()","cached()","cached_attributes()","cached_fixtures()","caches_action()","caches_page()","caching?()","caching_allowed()","caching_allowed?()","calculate()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","callback()","camelcase()","camelize()","camelize()","canonical_action?()","capify!()","capitalize()","capture()","capture()","case_sensitive_equality_operator()","case_sensitive_equality_operator()","cattr_accessor()","cattr_reader()","cattr_writer()","cdata_block()","cdata_section()","center()","change()","change()","change()","change()","change_column()","change_column()","change_column_default()","change_column_default()","change_column_null()","change_column_null()","change_column_null()","change_default()","change_table()","changed()","changed?()","changed_attributes()","changed_for_autosave?()","changes()","characters()","charset()","check_box()","check_box()","check_box_checked?()","check_box_tag()","check_class_collision()","check_for_circular_references()","check_validity!()","check_validity!()","check_validity!()","check_validity!()","check_validity!()","check_validity!()","checkin()","checkout()","checkout_and_verify()","checkout_existing_connection()","checkout_new_connection()","civil_from_format()","class_attribute()","class_eval()","class_name()","class_name()","class_of_active_record_descendant()","classify()","classify()","clean()","clean_backtrace()","cleanup()","cleanup()","cleanup()","cleanup_view_runtime()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear!()","clear_action_methods!()","clear_active_connections!()","clear_all_connections!()","clear_buffer()","clear_cache()","clear_helpers()","clear_query_cache()","clear_reloadable_connections!()","clear_reloadable_connections!()","clear_respond_to()","clear_stale_cached_connections!()","clear_transaction_record_state()","client_error?()","client_min_messages()","client_min_messages=()","clone()","clone_attribute_value()","clone_attributes()","clone_empty()","clone_with_time_zone_conversion_attribute?()","close()","close()","code()","collapse_wheres()","collation()","collect_asset_files()","collection()","collection()","collection_accessor_methods()","collection_from_object()","collection_reader_method()","collection_select()","collection_select()","collection_with_template()","collection_without_template()","color()","colorize_logging()","colorize_logging()","colorize_logging=()","column()","column()","column_alias_for()","column_aliases()","column_exists?()","column_exists?()","column_for()","column_for()","column_for_attribute()","column_name_length()","column_names()","column_names()","columns()","columns()","columns()","columns_hash()","columns_per_multicolumn_index()","columns_per_table()","comma_pair_list()","commit_db_transaction()","commit_db_transaction()","commit_transaction_records()","comparable_time()","compare_with_coercion()","compare_with_coercion()","compare_without_coercion()","compare_without_coercion()","compile()","compile()","compile()","compile()","compile()","compile()","compile_filter()","compiled_filter()","component_root_dir()","component_root_dir()","compose()","compose_codepoints()","composed_of()","compress()","compressed?()","compute_asset_host()","compute_javascript_paths()","compute_public_path()","compute_stylesheet_paths()","compute_table_name()","compute_type()","concat()","concat()","concat()","concat()","conditions()","config()","config()","config()","config()","config()","config()","config()","config()","config()","config_accessor()","configuration()","configurations()","configure()","configure()","configure_connection()","configure_connection()","configure_dependency_for_belongs_to()","configure_dependency_for_has_many()","configure_dependency_for_has_one()","configure_destroy_hook_for_has_and_belongs_to_many()","configure_rdoc_files()","connect()","connect()","connected?()","connected?()","connected?()","connection()","connection()","connection()","connection()","connection()","connection_handler()","connection_pool()","consider_all_requests_local?()","console()","constantize()","constantize()","constraints()","construct_attributes_from_arguments()","construct_conditions()","construct_finder_arel()","construct_from()","construct_id_map()","construct_join_attributes()","construct_join_dependency_for_association_find()","construct_joins()","construct_limited_ids_condition()","construct_owner_attributes()","construct_quoted_owner_attributes()","construct_relation_for_association_calculations()","construct_relation_for_association_find()","construct_scope()","construct_select()","consumes?()","contains_bad_protocols?()","content_columns()","content_for()","content_for?()","content_length()","content_mime_type()","content_tag()","content_tag_for()","content_tag_string()","content_type()","content_type()","content_type=()","content_type_from_legacy_post_data_format_header()","controller()","controller()","controller_class()","controller_class=()","controller_class_name()","controller_class_path()","controller_constraints()","controller_file_name()","controller_file_path()","controller_i18n_scope()","controller_name()","controller_name()","controller_path()","controller_path()","controller_path=()","controller_paths()","controller_paths=()","convert_boolean_attributes!()","convert_dates_from()","convert_dates_from()","convert_dates_from()","convert_key()","convert_key()","convert_number_column_value()","convert_options_to_data_attributes()","convert_to_model()","convert_value()","convert_value()","cookie_jar()","cookie_secret()","cookie_secret=()","cookies()","cookies()","cookies()","cookies()","cookies()","copy_stylesheets_file()","copy_view_files()","copy_view_files()","count()","count()","count_by_sql()","count_observers()","counter_name()","create()","create()","create()","create()","create()","create()","create!()","create!()","create_belongs_to_reflection()","create_controller_files()","create_controller_files()","create_database()","create_database()","create_extension_modules()","create_fixture_file()","create_fixtures()","create_fixtures()","create_generated_attribute()","create_generator_files()","create_has_and_belongs_to_many_reflection()","create_has_many_reflection()","create_has_one_reflection()","create_has_one_through_reflection()","create_helper_files()","create_helper_files()","create_lib_files()","create_or_update()","create_reflection()","create_root_files()","create_root_folder()","create_savepoint()","create_savepoint()","create_savepoint()","create_table()","create_tasks_files()","create_test_file()","create_test_files()","create_test_files()","create_test_files()","create_test_files()","create_test_files()","create_test_files()","create_test_files()","create_time_zone_conversion_attribute?()","create_with()","creator?()","csrf_meta_tag()","css_select()","csv_file_path()","current()","current()","current()","current_cycle()","current_database()","current_database()","current_hash()","current_hash()","current_page?()","current_savepoint_name()","current_session_id()","custom_join_sql()","cycle()","daemon()","dasherize()","dasherize()","data()","data()","data_column()","data_column_name()","data_column_name()","data_column_size_limit()","database()","database_configuration()","database_configuration_file()","database_configuration_file=()","date_select()","date_select()","datetime_select()","datetime_select()","day()","days()","days_in_month()","debug()","debug_protected_attribute_removal()","debug_rjs=()","debugger()","decode()","decode()","decode()","decode()","decode()","decode64()","decode_credentials()","decompose()","decompose_codepoints()","decompress()","decrement()","decrement()","decrement()","decrement()","decrement!()","decrement_counter()","decrement_open_transactions()","decrypt()","decrypt_and_verify()","deep_merge()","deep_merge!()","deep_munge()","default()","default()","default()","default()","default()","default=()","default_action()","default_aliases_for_option()","default_for_option()","default_format()","default_helper_module!()","default_inspect()","default_inspect()","default_middleware_stack()","default_options()","default_primary_key_type()","default_render()","default_render()","default_scope()","default_sequence_name()","default_source_root()","default_timezone()","default_url_options()","default_url_options()","default_url_options()","default_url_options=()","default_url_options=()","default_value_for_option()","defaults()","define()","define_attr_method()","define_attribute_methods()","define_attribute_methods()","define_callbacks()","define_callbacks()","define_method_attribute()","define_method_attribute()","define_method_attribute=()","define_method_attribute=()","define_model_callbacks()","define_non_cyclic_method()","define_read_method()","define_read_method_for_serialized_attribute()","defined_activerecord_methods()","delay()","delegate()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete?()","delete_all()","delete_all_has_many_dependencies()","delete_empty_directories()","delete_entry()","delete_entry()","delete_existing_fixtures()","delete_matched()","delete_matched()","delete_matched()","delete_nil_values!()","delete_sql()","delete_via_redirect()","demodulize()","demodulize()","deny?()","deny?()","deprecate()","deprecate_methods()","deprecated_method_warning()","deprecated_url_options()","deprecation_caller_message()","deprecation_message()","derive_class_name()","desc()","desc()","descendants()","descendants()","descends_from_active_record?()","describe()","deserialize_entry()","destination()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy_all()","destroy_associations()","destroyed?()","details_for_lookup()","determine_default_controller_class()","determine_default_helper_class()","determine_install_method()","determine_source()","diff()","direct_descendants()","direct_descendants()","directory_exist?()","dirname()","dirties_query_cache()","disable_referential_integrity()","discard()","disconnect!()","disconnect!()","disconnect!()","disconnect!()","disconnect!()","dispatch()","dispatch()","display()","display()","distance_of_time_in_words()","distance_of_time_in_words_to_now()","distinct()","div_for()","dom_class()","dom_id()","domain()","downcase()","download()","draggable()","draggable_element()","drop_receiving()","drop_receiving_element()","drop_table()","drop_table()","dst?()","dup()","dup()","dup()","duplicable?()","duration_of_variable_length?()","each()","each()","each()","each_full()","each_with_object()","eager_autoload()","eager_autoload!()","eager_load()","eager_load()","eager_load!()","eager_load!()","eager_load_paths()","eager_loading?()","eat()","email_field()","email_field_tag()","emitted_hidden_id?()","empty?()","empty?()","empty_insert_statement_value()","empty_insert_statement_value()","empty_json_resource()","empty_resource()","emulate_booleans()","enable_warnings()","enabled?()","encode()","encode()","encode()","encode64()","encode64s()","encode_credentials()","encode_filename()","encode_params()","encode_with()","encode_with()","encoding()","encoding=()","encoding_aware?()","encrypt()","encrypt_and_sign()","end()","end_document()","end_element()","end_of_day()","end_of_day()","end_of_day()","end_of_month()","end_of_month()","end_of_quarter()","end_of_quarter()","end_of_week()","end_of_week()","end_of_year()","end_of_year()","engines()","ensure_cache_path()","ensure_javascript_sources!()","ensure_proper_type()","ensure_session_key!()","ensure_stylesheet_sources!()","entry()","enumerate()","env()","env()","env=()","env_defaults()","env_filter()","env_name()","environment()","environment()","environment=()","eql?()","eql?()","eql?()","erb_render()","erb_trim_mode()","error()","error?()","error_message()","error_wrapping()","errors()","errors()","escape()","escape_bytea()","escape_entry()","escape_javascript()","escape_key()","escape_once()","establish_connection()","establish_connection()","etag()","etag=()","etag?()","etag_matches?()","exabyte()","exabytes()","except()","except()","except!()","excerpt()","exclude?()","exclude?()","exec_script_rails!()","execute()","execute()","execute_callstack_for_multiparameter_attributes()","execute_hook()","execute_if_updated()","exist?()","exists?()","exists?()","exists?()","exists?()","expand_attribute_names_for_aggregates()","expand_cache_key()","expand_hash_conditions_for_aggregates()","expand_javascript_sources()","expand_stylesheet_sources()","expire_action()","expire_fragment()","expire_page()","expire_page()","expired?()","expires_at()","expires_at=()","expires_in()","expires_now()","extended()","extended()","extended()","extending()","externals()","externals=()","extify()","extra_tags_for_form()","extract!()","extract_annotations_from()","extract_callstack()","extract_callstack_for_multiparameter_attributes()","extract_default()","extract_handler_and_format()","extract_limit()","extract_limit()","extract_options!()","extract_pg_identifier_from_name()","extract_precision()","extract_precision()","extract_record()","extract_scale()","extract_scale()","extract_selected_and_disabled()","extract_session_id()","extract_session_id()","extract_value_from_default()","extract_values_from_collection()","extractable_options?()","extractable_options?()","extractable_options?()","fallback_string_to_date()","fallback_string_to_time()","fallbacks()","falsetok()","fast_string_to_date()","fast_string_to_time()","favicon_link_tag()","fetch()","fetch()","fetch()","fetch()","fetch_dir()","field_changed?()","field_set_tag()","field_type()","fields_for()","fields_for()","fields_for_nested_model()","fields_for_with_nested_attributes()","fifth()","file_exist?()","file_field()","file_field_tag()","file_path()","file_path_key()","filename()","filter()","filter()","filter_by()","filtered_env()","filtered_options()","filtered_parameters()","filtered_path()","filtered_query_string()","find()","find()","find()","find()","find()","find()","find_all()","find_all()","find_all_tag()","find_associated_records()","find_by_attributes()","find_by_session_id()","find_by_session_id()","find_by_session_id()","find_by_sql()","find_cmd()","find_first()","find_in()","find_last()","find_layout()","find_one()","find_or_instantiator_by_attributes()","find_parameter_position()","find_root_with_flag()","find_session()","find_some()","find_sti_class()","find_tag()","find_target()","find_template()","find_template()","find_templates()","find_templates()","find_tzinfo()","find_with_associations()","find_with_ids()","finder?()","first()","first()","fixture_file_upload()","fixture_is_cached?()","flash()","flash()","flash()","flush()","flush()","flush_all!()","flush_cache()","flushable_loggers()","follow_redirect!()","for_class()","for_id()","for_tag()","foreign_key()","foreign_key()","forgery_whitelisted?()","forking_env?()","form_authenticity_param()","form_authenticity_token()","form_data?()","form_for()","form_tag()","form_tag_html()","form_tag_in_block()","format()","format()","format()","format()","format()","format()","format()","format=()","formats()","formats=()","formatted_offset()","formatted_offset()","formatted_offset()","formatted_offset()","fortnight()","fortnights()","forty_two()","fourth()","fragment_cache_key()","fragment_exist?()","framework_trace()","framework_version()","frameworks()","frameworks()","frameworks=()","freeze()","freeze()","freeze!()","freeze_with_memoizable()","fresh?()","fresh_when()","from()","from()","from()","from_json()","from_now()","from_now()","from_rails_root()","from_response()","from_trusted_xml()","from_xml()","from_xml()","frozen?()","full_messages()","full_test_name()","full_trace()","fullpath()","future?()","future?()","future?()","future?()","g_length()","g_pack()","g_unpack()","gem()","gem()","generate()","generate()","generate_digest()","generate_message()","generate_method_for_mime()","generate_sid()","generator()","generator_dir()","generator_name()","generators()","generators()","get()","get()","get()","get()","get()","get?()","get_cycle()","get_period_and_ensure_valid_local_time()","get_session()","get_session()","get_session()","get_session_model()","get_via_redirect()","get_zone()","getgm()","getlocal()","getutc()","getutc()","gigabyte()","gigabytes()","git()","git_url?()","gmt?()","gmt_offset()","gmtime()","gmtoff()","group()","group_by()","grouped_collection_select()","grouped_collection_select()","grouped_options_for_select()","guard_private_attribute_method!()","guess_name()","h()","h()","handle_conditional_get!()","handle_unverified_request()","handler_for_rescue()","handles_encoding?()","has_and_belongs_to_many()","has_attribute?()","has_default?()","has_empty_resource_definition?()","has_errors?()","has_flash?()","has_flash_object?()","has_flash_with_contents?()","has_key?()","has_key?()","has_key?()","has_many()","has_one()","has_primary_key_column?()","has_session_id?()","has_session_object?()","has_template_object?()","hash()","hash()","having()","head()","head()","head()","head?()","headers()","headers()","headers()","headers=()","help()","helper()","helper()","helper_attr()","helper_class()","helper_method()","helper_method()","helpers()","helpers_dir()","helpers_dir=()","hex()","hexdec4()","hidden_actions()","hidden_field()","hidden_field()","hidden_field_tag()","hidden_namespaces()","hide()","hide_action()","hide_namespaces()","highlight()","hook_for()","host()","host()","host!()","host=()","host_with_port()","hour()","hours()","html?()","html_document()","html_escape()","html_escape()","html_options_for_form()","html_safe?()","html_safe?()","html_safe?()","html_safe_translation_key?()","httpdate()","https!()","https?()","human()","human()","human_attribute_name()","human_name()","human_name()","human_name()","human_name()","humanize()","humanize()","i18n_scope()","i18n_scope()","id()","id_constraint()","id_constraint?()","identifier_method_name()","identify()","ids_in_list_limit()","if_modified_since()","if_modified_since=()","if_none_match()","if_none_match=()","image_path()","image_submit_tag()","image_tag()","in()","in()","in()","in_char_class?()","in_clause_length()","in_groups()","in_groups_of()","in_memory_controller_namespaces()","in_or_equals_for_ids()","in_rails_application?()","in_rails_application_subdirectory?()","in_time_zone()","in_time_zone()","in_time_zone()","include?()","include?()","include?()","include?()","include_fallbacks_module()","include_helper_modules!()","include_with_range?()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","includes()","increment()","increment()","increment()","increment()","increment!()","increment_counter()","increment_open_transactions()","index()","index()","index()","index_by()","index_exists?()","index_exists?()","index_helper()","index_name_exists?()","index_name_length()","index_name_length()","indexes()","indexes_per_table()","inflections()","info()","inheritance_column()","inheritance_column_name()","inherited()","inherited()","inherited()","inherited()","inherited()","inherited()","inherited()","inherited()","inherited()","inherited()","inherited()","inherited()","inherited()","inherited()","inherited()","init_fallbacks()","init_with()","initialize!()","initialize!()","initialize_console()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_generators()","initialize_i18n()","initialize_schema_migrations_table()","initialize_tasks()","initialize_template_class()","initialized=()","initialized?()","initializer()","initializer()","initializers()","initializers()","initializers()","initializers_chain()","initializers_for()","insert()","insert()","insert()","insert()","insert_after()","insert_before()","insert_fixture()","insert_fixtures()","insert_html()","insert_sql()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","install()","install()","install_using_checkout()","install_using_export()","install_using_externals()","install_using_git()","install_using_http()","installed?()","instance()","instance()","instance_method_already_implemented?()","instance_method_already_implemented?()","instance_method_names()","instance_variable_names()","instantiate()","instantiate_all_loaded_fixtures()","instantiate_fixtures()","instantiate_observers()","instantiate_time_object()","instantiator?()","instrument()","instrument()","instrument()","instrument()","instrument=()","instrument_fragment_cache()","instrument_page_cache()","instrumenter()","internal_methods()","interpolate_and_sanitize_sql()","interpolate_sanitized_sql()","invalid?()","invalid?()","invoke()","ip()","irregular()","is_a?()","is_missing?()","is_missing?()","is_uri?()","is_utf8?()","isdst()","iso8601()","j()","j()","javascript_include_tag()","javascript_object_for()","javascript_path()","javascript_src_tag()","javascript_tag()","join_asset_file_contents()","join_table_name()","joins()","joins_per_query()","json_escape()","json_escape()","keep()","key?()","key?()","key?()","key_file_path()","key_matcher()","keyenc()","kilobyte()","kilobytes()","kind()","kind()","kind_of?()","klass()","klass()","klass()","l()","l()","label()","label()","label_tag()","last()","last()","last_modified()","last_modified=()","last_modified?()","layout()","layout()","lex()","lib()","limit()","limit()","limited_update_conditions()","limited_update_conditions()","link_to()","link_to_function()","link_to_if()","link_to_unless()","link_to_unless_current()","links()","listeners_for()","listening?()","literal()","ljust()","load()","load!()","load_and_configure_sdoc()","load_and_configure_sdoc()","load_console()","load_console()","load_deprecated_tasks()","load_for_read!()","load_for_write!()","load_generators()","load_generators()","load_migration()","load_paths()","load_paths()","load_paths=()","load_session()","load_session()","load_session_id!()","load_tasks()","load_tasks()","load_tasks()","load_tasks()","loaded?()","loaded?()","loaded?()","local()","local?()","local_cache()","local_constant_names()","local_constants()","local_offset()","local_time()","local_to_utc()","locale()","locale=()","localize()","localize()","locals()","localtime()","location()","location()","location=()","location=()","lock()","lock!()","locking_column()","locking_enabled?()","log()","log()","log()","log_error()","log_path()","log_path()","log_path=()","log_process_action()","log_subscriber()","log_subscribers()","logged()","logger()","logger()","logger()","logger()","logger()","logger()","logger()","logger()","logger=()","lookup()","lookup()","lookup_ancestors()","lookup_by_extension()","lookup_context()","lookup_store()","loop_on_multiple_args()","ls()","lstrip()","mail()","mail_to()","mailer_name()","make_test_case_available_to_view!()","many?()","many?()","map_method()","mark_for_destruction()","marked_for_destruction?()","marshal_data!()","marshal_dump()","marshal_load()","mass_assignment_authorizer()","match()","match()","match()","match()","match()","match()","match()","match_attribute_method?()","matches?()","mattr_accessor()","mattr_reader()","mattr_writer()","maximum()","mb_chars()","measure()","measure()","measure()","measure()","measure()","measure()","measure()","measure()","measure()","measure_mode()","media_type()","megabyte()","megabytes()","member()","member?()","member?()","memoize()","memoize_all()","memoized_ivar_for()","merge()","merge()","merge()","merge!()","merge!()","merge_as_scope()","merge_blocks_scope()","merge_constraints_scope()","merge_controller_scope()","merge_defaults_scope()","merge_module_scope()","merge_options_scope()","merge_path_names_scope()","merge_path_scope()","merge_shallow_path_scope()","merge_shallow_prefix_scope()","merge_shallow_scope()","message()","method()","method_added()","method_added()","method_for_action()","method_for_action()","method_for_action()","method_for_action()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing_target()","method_name()","method_names()","method_option_to_s()","method_symbol()","microseconds()","middleware()","middleware()","middleware()","midnight()","midnight()","midnight()","migrate()","migration()","migration_template()","migrations_path()","mime_type()","minimum()","minus_with_coercion()","minus_without_coercion()","minus_without_duration()","minute()","minutes()","missing?()","missing_attribute()","missing_name()","missing_name?()","model()","model_class()","model_name()","model_name()","model_name_from_record_or_class()","modules_for_helpers()","modules_for_helpers()","monday()","monday()","month()","months()","months_ago()","months_ago()","months_since()","months_since()","mount()","ms()","multiple_of?()","mute()","name()","name()","name()","name_for_action()","named_host?()","named_scope()","namespace()","namespace()","namespace()","namespaced_key()","native()","native()","native_database_types()","navigation_behavior()","navigation_location()","negotiate_mime()","nested()","nested_attributes_association?()","nested_child_index()","nested_options()","nested_records_changed_for_autosave?()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_cipher()","new_connection()","new_constants()","new_date()","new_from_hash_copying_default()","new_from_hash_copying_default()","new_record?()","new_session()","new_time()","next_element()","next_id()","next_month()","next_month()","next_selector()","next_week()","next_week()","next_year()","next_year()","nibble()","no_color!()","noise()","nonempty_ok_response?()","normalize()","normalize()","normalize()","normalize!()","normalize_argument_to_redirection()","normalize_name()","normalize_options!()","normalize_parameters()","normalize_parameters()","normalize_path()","not_modified?()","notice()","notice=()","notifier()","notify_observers()","notify_observers()","now()","now()","nth_child()","nullify_has_many_dependencies()","nulltok()","number?()","number_field()","number_field_tag()","number_to_currency()","number_to_human()","number_to_human_size()","number_to_percentage()","number_to_phone()","number_with_delimiter()","number_with_precision()","numenc()","numtok()","object()","object_from_yaml()","object_has_errors?()","objectify_options()","objenc()","objparse()","observe()","observed_class()","observed_classes()","observed_descendants()","observers()","observers=()","odd?()","offset()","on()","on_base()","on_cdata_block()","on_characters()","on_end_document()","on_end_element()","on_load()","on_start_document()","on_start_element()","only()","only_child()","open()","open_log()","open_session()","open_transactions()","operation_over_aggregate_column()","opt_parser()","option_groups_from_collection_for_select()","option_html_attributes()","option_text_and_value()","option_value_selected?()","options()","options()","options()","options()","options_for()","options_for_ajax()","options_for_javascript()","options_for_javascript()","options_for_select()","options_from_collection_for_select()","options_include_default?()","ord()","ord()","order()","ordinalize()","ordinalize()","original_concat()","orm_class()","orm_instance()","output_filename()","output_filename()","output_filename()","outside_transaction?()","outside_transaction?()","overlaps?()","override_keys()","page()","page_cache_file()","page_cache_path()","pairparse()","parameter_filter()","parameter_filter_for()","parameterize()","parameterize()","parameterize()","parameters()","params()","params()","params=()","parent()","parent_name()","parent_of?()","parents()","parse()","parse()","parse()","parse()","parse!()","parse!()","parse!()","parse!()","parse!()","parse!()","parse_formatted_parameters()","parse_query()","parse_raw_value_as_a_number()","parse_raw_value_as_an_integer()","parse_yaml_string()","partial_path()","password_field()","password_field_tag()","past?()","past?()","past?()","past?()","path()","path()","path()","path=()","path_for_action()","path_parameters()","path_to_audio()","path_to_image()","path_to_javascript()","path_to_stylesheet()","path_to_video()","paths()","paths()","paths()","pending()","perform_calculation()","perform_validations()","performed?()","period()","period_for_local()","period_for_utc()","persisted?()","persistent_session_id!()","petabyte()","petabytes()","phone_field()","phone_field_tag()","plugin()","plugin_dir()","plugins()","plural()","plural()","plural_file_name()","plural_name()","plural_table_name()","pluralize()","pluralize()","pluralize()","pluralize_table_names()","pluralize_table_names?()","polymorphic_path()","polymorphic_url()","pop_d()","pop_modules()","populate_with_current_scope_attributes()","port()","port=()","port_string()","post()","post()","post()","post?()","post_via_redirect()","postgresql_version()","precisionless_round()","prefetch_primary_key?()","prefix_name_for_action()","preload()","preload_associations()","preload_belongs_to_association()","preload_has_and_belongs_to_many_association()","preload_has_many_association()","preload_has_one_association()","preload_one_association()","preload_through_records()","prepare!()","prepare!()","prepare_controller_class()","prepare_destination()","prepend_view_path()","prepend_view_path()","presence()","present?()","prev_month()","prev_month()","prev_year()","prev_year()","previous_changes()","primary_key()","primary_key()","primary_key()","primary_key()","primary_key()","primary_key=()","primary_key_name()","primary_key_prefix_type()","prime_cache()","process()","process()","process()","process()","process()","process_action()","process_action()","process_action()","process_action()","process_action()","process_attributes_for()","process_conditions_for_preload()","process_node()","process_node()","process_node()","process_node()","process_view_paths()","process_with_new_base_test()","profile()","properties()","property()","protect_against_forgery?()","protect_against_forgery?()","protect_from_forgery()","protected_attributes()","protocol()","proxy_class()","proxy_class=()","prune()","pruning?()","public_path()","public_path()","public_path=()","publish()","push()","push()","push_d()","put()","put()","put()","put?()","put_via_redirect()","query()","query()","query()","query_attribute()","query_parameters()","quote()","quote()","quote_column_name()","quote_columns()","quote_string()","quote_table_name()","quote_table_name()","quote_table_name()","quote_value()","quoted_columns_for_index()","quoted_columns_for_index()","quoted_comma_pair_list()","quoted_date()","quoted_false()","quoted_false()","quoted_locking_column()","quoted_primary_key()","quoted_table_name()","quoted_true()","quoted_true()","radio_button()","radio_button()","radio_button_checked?()","radio_button_tag()","rails_asset_id()","rails_env()","rails_version()","rails_version()","rails_version()","railtie_name()","railties()","railties()","raise()","raise_nil_warning_for()","raise_on_session_data_overflow!()","rake()","rake_tasks()","rakefile()","random_bytes()","random_number()","range_field()","range_field_tag()","raw()","raw_connection()","raw_host_with_port()","raw_post()","raw_value()","read()","read()","read_attribute()","read_attribute_before_type_cast()","read_csv_fixture_files()","read_entry()","read_entry()","read_fixture_files()","read_fragment()","read_multi()","read_multi()","read_yaml_fixture_files()","readable_inspect()","readable_inspect()","reader_method()","readme()","readonly()","readonly!()","readonly?()","readonly_attributes()","receive()","recognized_request_for()","recompile!()","reconnect!()","reconnect!()","reconnect!()","record()","record()","record()","record_key_for_dom_id()","recycle!()","redefine_method()","redirect()","redirect?()","redirect_to()","redirect_to()","redirect_to()","redirect_to()","redirect_to()","redirect_to_url()","redirect_url()","redirect_url_match?()","redirected_to()","ref()","reference?()","references()","references()","references_eager_loaded_tables?()","reflect_on_aggregation()","reflect_on_all_aggregations()","reflect_on_all_associations()","reflect_on_all_autosave_associations()","reflect_on_association()","reflections()","register()","register_alias()","register_interceptor()","register_interceptors()","register_javascript_expansion()","register_javascript_include_default()","register_observer()","register_observers()","register_stylesheet_expansion()","regular_update()","regular_update()","regular_writer()","regular_writer()","release_connection()","release_savepoint()","release_savepoint()","release_savepoint()","reload()","reload()","reload()","reload()","reload!()","reload_routes!()","reloader()","remember_transaction_record_state()","remote_addr=()","remote_addrs()","remote_function()","remote_ip()","remove()","remove()","remove_belongs_to()","remove_column()","remove_columns()","remove_connection()","remove_connection()","remove_filters!()","remove_hook_for()","remove_index()","remove_index()","remove_multiparameter_id()","remove_possible_method()","remove_references()","remove_silencers!()","remove_timestamps()","remove_timestamps()","rename()","rename_column()","rename_column()","rename_index()","rename_key()","rename_table()","rename_table()","rename_table()","rename_table()","render()","render()","render()","render()","render()","render()","render()","render()","render()","render_collection()","render_collection()","render_exception()","render_partial()","render_partial()","render_template()","render_to_body()","render_to_body()","render_to_body()","render_to_string()","rendered()","reorder()","reorder_characters()","replace()","replace()","replace_html()","report()","report()","request_http_basic_authentication()","request_method()","request_method=()","request_method_symbol()","request_parameters()","request_uri()","request_uri=()","request_via_redirect()","require_library_or_gem()","requires_reloading?()","requires_reloading?()","rescue_action()","rescue_action_in_public()","rescue_action_in_public!()","rescue_action_locally()","rescue_action_without_handler()","rescue_from()","rescue_from()","rescue_with_handler()","rescue_with_handler()","reset()","reset!()","reset!()","reset!()","reset!()","reset_attribute!()","reset_cache()","reset_callbacks()","reset_column_information()","reset_counters()","reset_cycle()","reset_javascript_include_default()","reset_locking_column()","reset_runtime()","reset_sequence!()","reset_session()","reset_session()","resource()","resource_location()","resource_method_scope?()","resource_scope()","resource_scope?()","resourceful?()","resources()","resources_path_names()","respond()","respond_to()","respond_to?()","respond_to?()","respond_to?()","respond_to?()","respond_to?()","respond_to?()","respond_to?()","respond_to?()","respond_to_without_attributes?()","response_body=()","response_body=()","response_code()","response_from_page_or_rjs()","response_from_page_or_rjs()","restore_transaction_record_state()","retrieve_connection()","retrieve_connection_pool()","returning()","reverse()","reverse_merge()","reverse_merge()","reverse_merge()","reverse_merge!()","reverse_merge!()","reverse_merge!()","reverse_order()","reverse_sql_order()","reverse_update()","rewind()","rewrite_asset_path()","rewrite_extension?()","rewrite_host_and_protocol()","rfc2822()","rfc822()","rindex()","rjust()","rollback_active_record_state!()","rollback_db_transaction()","rollback_db_transaction()","rollback_to_savepoint()","rollback_to_savepoint()","rollback_to_savepoint()","rollback_transaction_records()","root()","root()","root()","root=()","round()","route()","route_url()","routes()","routes_configuration_file()","routes_configuration_file=()","routes_reloader()","routing_type()","rstrip()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run_callbacks()","run_generator()","run_in_isolation()","run_in_isolation()","run_initializers()","run_install_hook()","run_load_hooks()","run_profile()","run_test()","run_uninstall_hook()","run_validations!()","run_validations!()","run_warmup()","runtime()","runtime=()","safe_concat()","safe_concat()","sample()","sanitize()","sanitize()","sanitize()","sanitize()","sanitize_css()","sanitize_css()","sanitize_dom_id()","sanitize_for_mass_assignment()","sanitize_limit()","sanitize_sql_array()","sanitize_sql_for_assignment()","sanitize_sql_for_conditions()","sanitize_sql_hash_for_assignment()","sanitize_sql_hash_for_conditions()","sanitize_to_id()","sanitizeable?()","sanitizeable?()","save()","save()","save()","save()","save!()","save!()","save_belongs_to_association()","save_collection_association()","save_has_one_association()","say()","say_no_to_protect_against_forgery!()","say_with_time()","schema_format()","schema_search_path()","schema_search_path=()","scheme()","scope()","scope()","scope_action_options()","scope_action_options?()","scope_for_create()","scope_key_by_partial()","scope_options()","scoped()","scopes()","scoping()","search_dir()","search_field()","search_field_tag()","second()","second()","seconds()","seconds_since_midnight()","seconds_since_midnight()","seconds_since_unix_epoch()","seconds_to_utc_offset()","secure_compare()","select()","select()","select()","select()","select()","select()","select()","select()","select()","select_all()","select_all()","select_date()","select_datetime()","select_day()","select_first()","select_for_count()","select_hour()","select_minute()","select_month()","select_one()","select_raw()","select_rows()","select_rows()","select_rows()","select_rows()","select_second()","select_tag()","select_time()","select_value()","select_values()","select_year()","selector()","send_action()","send_data()","send_data()","send_data()","send_file()","send_file()","send_file()","send_file_headers!()","serializable_add_includes()","serializable_hash()","serializable_hash()","serialize()","serialized_attributes()","server_error?()","server_port()","server_software()","session()","session()","session_id_column()","session_id_column()","session_options=()","session_store()","set()","set_association_collection_records()","set_association_single_records()","set_callback()","set_conditional_cache_control!()","set_content_type()","set_cookie()","set_cookie()","set_cycle()","set_default_backend()","set_environment()","set_inheritance_column()","set_locking_column()","set_logger()","set_primary_key()","set_sequence_name()","set_session()","set_session()","set_session()","set_session()","set_standard_conforming_strings()","set_table_name()","set_test_assigns()","setup()","setup()","setup()","setup()","setup()","setup()","setup_controller_request_and_response()","setup_horo_variables()","setup_sessid_compatibility!()","setup_subscriptions()","setup_with_controller()","shallow()","shallow?()","shallow_scoping?()","should_compress?()","should_record_timestamps?()","show()","show_variable()","silence()","silence()","silence()","silence()","silence()","silence!()","silence_stream()","silence_warnings()","silencer()","simple_format()","simple_selector()","simplified_type()","simplified_type()","since()","since()","since()","since()","since()","since()","singleton_class()","singular()","singular()","singular_table_name()","singularize()","singularize()","size()","size()","size()","size()","size()","skip_callback()","skip_default_locale!()","skip_filter()","slice()","slice()","slice!()","sortable()","sortable_element()","source_root()","split()","split()","split_args()","sql()","sql_conditions()","sql_query_length()","sqlite_version()","squish()","squish!()","ssl?()","stale?()","stale_session_check!()","standard_port()","standard_port?()","start()","start()","start()","start()","start()","start()","start_document()","start_element()","start_processing()","stats()","status()","status=()","status=()","status_code()","status_message()","step_with_blockless()","sti_name()","store()","store()","strenc()","strftime()","string_body?()","string_to_binary()","string_to_date()","string_to_dummy_time()","string_to_time()","stringify_keys()","stringify_keys()","stringify_keys()","stringify_keys!()","stringify_keys!()","stringify_keys!()","strip()","strip_heredoc()","strip_links()","strip_tags()","strtok()","structure_dump()","stylesheet_link_tag()","stylesheet_path()","stylesheet_tag()","subclasses()","subclasses()","subclasses()","subdomain()","subdomains()","submit()","submit_default_value()","submit_tag()","subscribe()","subscribe()","subst()","success?()","sum()","sum()","sunday()","superclass_delegating_accessor()","supports_add_column?()","supports_count_distinct?()","supports_ddl_transactions?()","supports_ddl_transactions?()","supports_ddl_transactions?()","supports_insert_with_returning?()","supports_migrations?()","supports_migrations?()","supports_primary_key?()","supports_savepoints?()","supports_savepoints?()","supports_views?()","suppress()","suppress_messages()","surrogate?()","svn_command()","svn_url?()","swap()","symbolize_keys()","symbolize_keys()","symbolize_keys()","symbolize_keys!()","symbolized_path_parameters()","symbols()","synchronize()","t()","t()","table_alias_for()","table_alias_length()","table_alias_length()","table_exists?()","table_exists?()","table_exists?()","table_exists?()","table_name()","table_name()","table_name()","table_name_length()","table_name_prefix()","table_name_suffix()","table_structure()","tableize()","tableize()","tables()","tables_in_string()","tag()","tag()","tag_generate_errors?()","tag_options()","tail!()","teardown()","teardown()","teardown_subscriptions()","telephone_field()","telephone_field_tag()","template()","template_exists?()","template_objects()","templates_path()","terabyte()","terabytes()","test()","test_errors_aref()","test_errors_full_messages()","test_homepage()","test_model_naming()","test_persisted?()","test_to_key()","test_to_param()","test_valid?()","tests()","tests()","tests()","text?()","text_area()","text_area_tag()","text_field()","text_field_tag()","textparse()","third()","thread_local_key()","threadsafe!()","tidy_byte()","tidy_bytes()","tidy_bytes()","time()","time_ago_in_words()","time_select()","time_select()","time_with_datetime_fallback()","time_zone_options_for_select()","time_zone_select()","time_zone_select()","timestamp_attributes_for_update_in_model()","timestamp_column_names()","timestamped_migrations()","timestamps()","timestamps()","titlecase()","titlecase()","titleize()","titleize()","titleize()","to()","to()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_d()","to_date()","to_date()","to_date()","to_date()","to_datetime()","to_datetime()","to_datetime()","to_datetime()","to_datetime()","to_default_s()","to_default_s()","to_default_s()","to_default_s()","to_default_s()","to_f()","to_f()","to_format()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_hash()","to_hash()","to_hash()","to_hash()","to_html()","to_html()","to_i()","to_i()","to_key()","to_key()","to_model()","to_model()","to_options()","to_options!()","to_options!()","to_options!()","to_param()","to_param()","to_param()","to_param()","to_param()","to_param()","to_param()","to_param()","to_param()","to_path()","to_path()","to_prepare()","to_prepare()","to_prepare()","to_prepare_blocks()","to_query()","to_query()","to_query()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_sentence()","to_sql()","to_sql()","to_str()","to_sym()","to_tag()","to_time()","to_time()","to_time()","to_time()","to_time()","to_time_in_current_zone()","to_xml()","to_xml()","to_xml()","to_xml()","to_xml()","to_yaml()","to_yaml()","to_yaml()","today()","today?()","today?()","today?()","toggle()","toggle()","toggle!()","tok()","token_tag()","tokenize()","tokenize()","tomorrow()","tomorrow()","touch()","transaction()","transaction()","transaction()","transaction_include_action?()","transaction_joinable=()","transaction_record_state()","transfer_time_values_to_utc_constructor()","translate()","translate()","translate_exception()","translate_exception()","translate_exception()","translate_exception()","transliterate()","truetok()","truncate()","truncate()","try()","tsort_each_child()","tv_sec()","type_cast()","type_cast_attribute_value()","type_cast_calculated_value()","type_cast_code()","type_cast_using_column()","type_condition()","type_to_sql()","type_to_sql()","typecast_xml_value()","u_unpack()","ucharcopy()","ucharenc()","uncached()","uncached()","uncountable()","uncountable?()","uncountable?()","undecorated_table_name()","undefine_attribute_methods()","underscore()","underscore()","unescape()","unescape_bytea()","unescape_rjs()","uninstall()","uniq_by()","uniq_by!()","unique_id()","unmemoize_all()","unpacked_cookie_data()","unquote()","unrename_keys()","unserializable_attribute?()","unserialize_attribute()","unshift()","unshift()","unsubscribe()","unsubscribe()","until()","until()","upcase()","update()","update()","update()","update()","update()","update()","update()","update_all()","update_attribute()","update_attributes()","update_attributes()","update_attributes!()","update_counters()","update_counters()","update_details()","update_page()","update_page_tag()","update_sql()","update_sql()","updated()","updated_at()","url()","url_field()","url_field_tag()","url_for()","url_for()","url_for()","url_options()","url_options()","url_options()","url_options()","us_zones()","use()","use()","use()","use_checkout?()","use_externals?()","use_renderer()","use_renderers()","use_svn?()","use_zone()","usec()","user_agent=()","user_name_and_password()","using_limitable_reflections?()","utc()","utc()","utc?()","utc?()","utc_offset()","utc_offset()","utc_offset()","utc_time()","utc_to_local()","valenc()","valid?()","valid?()","valid_alter_table_options()","valid_encoding()","valid_scope_name?()","validate()","validate()","validate()","validate()","validate_collection_association()","validate_each()","validate_each()","validate_each()","validate_each()","validate_each()","validate_each()","validate_each()","validate_each()","validate_each()","validate_each()","validate_each()","validate_fallbacks()","validate_request!()","validate_single_association()","validates()","validates_acceptance_of()","validates_associated()","validates_confirmation_of()","validates_each()","validates_exclusion_of()","validates_format_of()","validates_inclusion_of()","validates_length_of()","validates_numericality_of()","validates_presence_of()","validates_size_of()","validates_uniqueness_of()","validates_with()","validates_with()","validators()","validators_on()","valparse()","value()","value()","value_before_type_cast()","value_to_boolean()","value_to_decimal()","values_at()","values_at()","variable_name()","vendor()","verified_request?()","verifier()","verify()","verify!()","verify_authenticity_token()","verify_request?()","version()","version()","video_path()","video_tag()","view()","view_assigns()","view_assigns()","view_context()","view_context()","view_context_class()","view_context_class()","view_path()","view_path=()","view_paths()","view_paths=()","view_paths=()","visible_action?()","visual_effect()","visual_effect()","wait()","wait()","wants?()","warn()","warn!()","watch_namespaces()","week()","weeks()","where()","where_values_hash()","with_backend()","with_backend()","with_connection()","with_exclusive_scope()","with_exclusive_scope()","with_fallbacks()","with_formats()","with_gc_stats()","with_indifferent_access()","with_layout_format()","with_local_cache()","with_options()","with_output_file()","with_routing()","with_scope()","with_scope_level()","with_transaction_returning_status()","with_warnings()","without_modules()","word_wrap()","wrap()","write()","write()","write()","write_asset_file_contents()","write_attribute()","write_attribute()","write_cookies!()","write_entry()","write_entry()","write_fragment()","writer_method()","xhr()","xhr()","xhr?()","xhtml_block?()","xml()","xml_column_fallback()","xml_http_request()","xml_http_request()","xml_http_request?()","xmlschema()","xmlschema()","xmlschema()","yaml_file_path()","yaml_fixtures_key()","year()","years()","years_ago()","years_ago()","years_since()","years_since()","yesterday()","yesterday()","zone()","zone()","zone=()","zones_map()","readme","changelog","readme","changelog","readme","changelog","readme","changelog","readme","changelog","readme","changelog","mit-license","readme"],"longSearchIndex":["abstractcontroller","abstractcontroller::actionnotfound","abstractcontroller::assetpaths","abstractcontroller::base","abstractcontroller::callbacks","abstractcontroller::callbacks::classmethods","abstractcontroller::collector","abstractcontroller::collector::mime","abstractcontroller::doublerendererror","abstractcontroller::error","abstractcontroller::helpers","abstractcontroller::helpers::classmethods","abstractcontroller::layouts","abstractcontroller::layouts::classmethods","abstractcontroller::layouts::classmethods::layoutconditions","abstractcontroller::logger","abstractcontroller::rendering","abstractcontroller::rendering::classmethods","abstractcontroller::translation","abstractcontroller::viewpaths","abstractcontroller::viewpaths::actionview","abstractcontroller::viewpaths::classmethods","actioncontroller","actioncontroller::base","actioncontroller::caching","actioncontroller::caching::actions","actioncontroller::caching::actions::actioncachepath","actioncontroller::caching::actions::classmethods","actioncontroller::caching::activerecord","actioncontroller::caching::configmethods","actioncontroller::caching::fragments","actioncontroller::caching::pages","actioncontroller::caching::pages::classmethods","actioncontroller::caching::sweeping","actioncontroller::compatibility","actioncontroller::compatibility::classmethods","actioncontroller::conditionalget","actioncontroller::cookies","actioncontroller::dispatcher","actioncontroller::doublerendererror","actioncontroller::flash","actioncontroller::head","actioncontroller::helpers","actioncontroller::helpers::classmethods","actioncontroller::helpers::prototypehelper","actioncontroller::hideactions","actioncontroller::hideactions::classmethods","actioncontroller::httpauthentication","actioncontroller::httpauthentication::basic","actioncontroller::httpauthentication::basic::controllermethods","actioncontroller::httpauthentication::digest","actioncontroller::httpauthentication::digest::controllermethods","actioncontroller::httpauthentication::token","actioncontroller::httpauthentication::token::controllermethods","actioncontroller::implicitrender","actioncontroller::instrumentation","actioncontroller::instrumentation::classmethods","actioncontroller::logsubscriber","actioncontroller::metal","actioncontroller::middleware","actioncontroller::middleware::actionmiddleware","actioncontroller::mimeresponds","actioncontroller::mimeresponds::classmethods","actioncontroller::rackdelegation","actioncontroller::railtie","actioncontroller::railtie::activesupport","actioncontroller::railtie::activesupport::deprecation","actioncontroller::recordidentifier","actioncontroller::redirecting","actioncontroller::renderers","actioncontroller::renderers::actionview","actioncontroller::renderers::all","actioncontroller::renderers::classmethods","actioncontroller::renderers::mime","actioncontroller::rendering","actioncontroller::requestforgeryprotection","actioncontroller::requestforgeryprotection::classmethods","actioncontroller::rescue","actioncontroller::responder","actioncontroller::routing","actioncontroller::sessionmanagement","actioncontroller::sessionmanagement::classmethods","actioncontroller::streaming","actioncontroller::templateassertions","actioncontroller::testcase","actioncontroller::testcase::behavior","actioncontroller::testcase::behavior::classmethods","actioncontroller::testcase::raiseactionexceptions","actioncontroller::testresponse","actioncontroller::testing","actioncontroller::testing::classmethods","actioncontroller::unknownaction","actioncontroller::urlfor","actioncontroller::urlfor::classmethods","actioncontroller::urlrewriter","actioncontroller::urlwriter","actiondispatch","actiondispatch::assertions","actiondispatch::assertions::domassertions","actiondispatch::assertions::responseassertions","actiondispatch::assertions::routingassertions","actiondispatch::assertions::selectorassertions","actiondispatch::assertions::tagassertions","actiondispatch::beststandardssupport","actiondispatch::callbacks","actiondispatch::cookies","actiondispatch::cookies::cookieoverflow","actiondispatch::flash","actiondispatch::flash::flashhash","actiondispatch::head","actiondispatch::http","actiondispatch::http::cache","actiondispatch::http::cache::request","actiondispatch::http::cache::response","actiondispatch::http::filterparameters","actiondispatch::http::headers","actiondispatch::http::mimenegotiation","actiondispatch::http::parameterfilter","actiondispatch::http::parameters","actiondispatch::http::url","actiondispatch::http::upload","actiondispatch::http::uploadedfile","actiondispatch::integration","actiondispatch::integration::requesthelpers","actiondispatch::integration::runner","actiondispatch::integration::session","actiondispatch::integrationtest","actiondispatch::middlewarestack","actiondispatch::middlewarestack::middleware","actiondispatch::paramsparser","actiondispatch::performancetest","actiondispatch::railtie","actiondispatch::railtie::activesupport","actiondispatch::remoteip","actiondispatch::remoteip::ipspoofattackerror","actiondispatch::remoteip::remoteipgetter","actiondispatch::request","actiondispatch::rescue","actiondispatch::response","actiondispatch::response::setup","actiondispatch::routing","actiondispatch::routing::mapper","actiondispatch::routing::mapper::base","actiondispatch::routing::mapper::httphelpers","actiondispatch::routing::mapper::resources","actiondispatch::routing::mapper::scoping","actiondispatch::routing::mapper::shorthand","actiondispatch::routing::polymorphicroutes","actiondispatch::routing::routeset","actiondispatch::routing::urlfor","actiondispatch::session","actiondispatch::session::abstractstore","actiondispatch::session::abstractstore::optionshash","actiondispatch::session::abstractstore::sessionhash","actiondispatch::session::cookiestore","actiondispatch::session::memcachestore","actiondispatch::showexceptions","actiondispatch::static","actiondispatch::testprocess","actiondispatch::testrequest","actiondispatch::testresponse","actiondispatch::testresponse::deprecatedhelpers","actionmailer","actionmailer::base","actionmailer::base::deprecatedheaderproxy","actionmailer::base::deprecatedurloptions","actionview","actionview::base","actionview::base::subclasses","actionview::context","actionview::filesystemresolver","actionview::fixtureresolver","actionview::helpers","actionview::helpers::activemodelformbuilder","actionview::helpers::activemodelhelper","actionview::helpers::activemodelinstancetag","actionview::helpers::assettaghelper","actionview::helpers::atomfeedhelper","actionview::helpers::atomfeedhelper::atombuilder","actionview::helpers::atomfeedhelper::atomfeedbuilder","actionview::helpers::cachehelper","actionview::helpers::capturehelper","actionview::helpers::csrfhelper","actionview::helpers::datehelper","actionview::helpers::debughelper","actionview::helpers::formbuilder","actionview::helpers::formhelper","actionview::helpers::formoptionshelper","actionview::helpers::formtaghelper","actionview::helpers::instancetag","actionview::helpers::instancetagmethods","actionview::helpers::instancetagmethods::classmethods","actionview::helpers::javascripthelper","actionview::helpers::numberhelper","actionview::helpers::numberhelper::invalidnumbererror","actionview::helpers::prototypehelper","actionview::helpers::prototypehelper::javascriptgenerator","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods","actionview::helpers::rawoutputhelper","actionview::helpers::recordtaghelper","actionview::helpers::sanitizehelper","actionview::helpers::scriptaculoushelper","actionview::helpers::taghelper","actionview::helpers::texthelper","actionview::helpers::translationhelper","actionview::helpers::urlhelper","actionview::layouts","actionview::logsubscriber","actionview::lookupcontext","actionview::lookupcontext::details","actionview::lookupcontext::viewpaths","actionview::nonconcattingstring","actionview::nullresolver","actionview::outputbuffer","actionview::partials","actionview::partials::partialrenderer","actionview::pathresolver","actionview::railtie","actionview::railtie::activesupport","actionview::rendering","actionview::resolver","actionview::template","actionview::template::actionview","actionview::template::actionview::template","actionview::template::actionview::template::template","actionview::template::actionview::template::template::handler","actionview::template::handlers","actionview::template::handlers::builder","actionview::template::handlers::compilable","actionview::template::handlers::compilable::classmethods","actionview::template::handlers::erb","actionview::template::handlers::erubis","actionview::template::handlers::rjs","actionview::testcase","actionview::testcase::behavior","actionview::testcase::behavior::classmethods","actionview::testcase::behavior::locals","actionview::testcase::testcontroller","activemodel","activemodel::attributemethods","activemodel::attributemethods::classmethods","activemodel::attributemethods::classmethods::attributemethodmatcher","activemodel::blockvalidator","activemodel::callbacks","activemodel::conversion","activemodel::deprecatederrormethods","activemodel::dirty","activemodel::eachvalidator","activemodel::errors","activemodel::lint","activemodel::lint::tests","activemodel::massassignmentsecurity","activemodel::massassignmentsecurity::blacklist","activemodel::massassignmentsecurity::classmethods","activemodel::massassignmentsecurity::permissionset","activemodel::massassignmentsecurity::sanitizer","activemodel::massassignmentsecurity::whitelist","activemodel::missingattributeerror","activemodel::name","activemodel::naming","activemodel::observer","activemodel::observing","activemodel::observing::classmethods","activemodel::serialization","activemodel::serializers","activemodel::serializers::json","activemodel::serializers::xml","activemodel::translation","activemodel::validations","activemodel::validations::acceptancevalidator","activemodel::validations::callbacks","activemodel::validations::callbacks::classmethods","activemodel::validations::classmethods","activemodel::validations::confirmationvalidator","activemodel::validations::exclusionvalidator","activemodel::validations::formatvalidator","activemodel::validations::helpermethods","activemodel::validations::inclusionvalidator","activemodel::validations::lengthvalidator","activemodel::validations::numericalityvalidator","activemodel::validations::presencevalidator","activemodel::validator","activerecord","activerecord::activerecorderror","activerecord::adapternotfound","activerecord::adapternotspecified","activerecord::aggregations","activerecord::aggregations::classmethods","activerecord::associationpreload","activerecord::associationpreload::classmethods","activerecord::associationtypemismatch","activerecord::associations","activerecord::associations::classmethods","activerecord::associations::hasonethroughassociation","activerecord::associations::throughassociationscope","activerecord::attributeassignmenterror","activerecord::attributemethods","activerecord::attributemethods::beforetypecast","activerecord::attributemethods::classmethods","activerecord::attributemethods::dirty","activerecord::attributemethods::primarykey","activerecord::attributemethods::primarykey::classmethods","activerecord::attributemethods::query","activerecord::attributemethods::read","activerecord::attributemethods::read::classmethods","activerecord::attributemethods::timezoneconversion","activerecord::attributemethods::timezoneconversion::classmethods","activerecord::attributemethods::write","activerecord::attributemethods::write::classmethods","activerecord::autosaveassociation","activerecord::autosaveassociation::classmethods","activerecord::base","activerecord::calculations","activerecord::callbacks","activerecord::callbacks::classmethods","activerecord::configurationerror","activerecord::connectionadapters","activerecord::connectionadapters::abstractadapter","activerecord::connectionadapters::column","activerecord::connectionadapters::column::format","activerecord::connectionadapters::connectionhandler","activerecord::connectionadapters::connectionmanagement","activerecord::connectionadapters::connectionpool","activerecord::connectionadapters::databaselimits","activerecord::connectionadapters::databasestatements","activerecord::connectionadapters::mysqladapter","activerecord::connectionadapters::postgresqladapter","activerecord::connectionadapters::postgresqlcolumn","activerecord::connectionadapters::querycache","activerecord::connectionadapters::quoting","activerecord::connectionadapters::sqliteadapter","activerecord::connectionadapters::sqliteadapter::version","activerecord::connectionadapters::schemastatements","activerecord::connectionadapters::table","activerecord::connectionadapters::tabledefinition","activerecord::connectionnotestablished","activerecord::connectiontimeouterror","activerecord::countercache","activerecord::dangerousattributeerror","activerecord::dynamicfindermatch","activerecord::dynamicscopematch","activerecord::findermethods","activerecord::invalidforeignkey","activerecord::irreversiblemigration","activerecord::locking","activerecord::locking::optimistic","activerecord::locking::optimistic::classmethods","activerecord::locking::pessimistic","activerecord::logsubscriber","activerecord::migration","activerecord::migrationproxy","activerecord::multiparameterassignmenterrors","activerecord::namedscope","activerecord::namedscope::classmethods","activerecord::nestedattributes","activerecord::nestedattributes::classmethods","activerecord::nestedattributes::toomanyrecords","activerecord::observer","activerecord::persistence","activerecord::predicatebuilder","activerecord::preparedstatementinvalid","activerecord::querycache","activerecord::querycache::classmethods","activerecord::querymethods","activerecord::railtie","activerecord::railtie::activesupport","activerecord::railties","activerecord::railties::controllerruntime","activerecord::railties::controllerruntime::classmethods","activerecord::readonlyrecord","activerecord::recordinvalid","activerecord::recordnotfound","activerecord::recordnotsaved","activerecord::recordnotunique","activerecord::reflection","activerecord::reflection::classmethods","activerecord::reflection::macroreflection","activerecord::relation","activerecord::rollback","activerecord::schema","activerecord::serialization","activerecord::serializationtypemismatch","activerecord::sessionstore","activerecord::sessionstore::session","activerecord::sessionstore::sqlbypass","activerecord::spawnmethods","activerecord::staleobjecterror","activerecord::statementinvalid","activerecord::testfixtures","activerecord::testfixtures::classmethods","activerecord::throwresult","activerecord::timestamp","activerecord::transactions","activerecord::transactions::classmethods","activerecord::unknownattributeerror","activerecord::validations","activerecord::validations::associatedvalidator","activerecord::validations::classmethods","activerecord::validations::uniquenessvalidator","activerecord::wrappeddatabaseexception","activesupport","activesupport::autoload","activesupport::backtracecleaner","activesupport::base64","activesupport::basicobject","activesupport::benchmarkable","activesupport::bufferedlogger","activesupport::bufferedlogger::severity","activesupport::cache","activesupport::cache::compressedmemcachestore","activesupport::cache::entry","activesupport::cache::filestore","activesupport::cache::memcachestore","activesupport::cache::memorystore","activesupport::cache::store","activesupport::cache::strategy","activesupport::cache::strategy::localcache","activesupport::cache::strategy::localcache::localstore","activesupport::cache::synchronizedmemorystore","activesupport::callbacks","activesupport::callbacks::callback","activesupport::callbacks::callbackchain","activesupport::callbacks::classmethods","activesupport::concern","activesupport::configurable","activesupport::configurable::classmethods","activesupport::dependencies","activesupport::dependencies::reference","activesupport::dependencies::watchstack","activesupport::deprecation","activesupport::descendantstracker","activesupport::duration","activesupport::fileupdatechecker","activesupport::gzip","activesupport::gzip::stream","activesupport::hashwithindifferentaccess","activesupport::hashwithindifferentaccess","activesupport::inflector","activesupport::inflector::inflections","activesupport::inheritableoptions","activesupport::json","activesupport::json::backends","activesupport::json::backends::jsongem","activesupport::json::backends::okjson","activesupport::json::backends::okjson::parseerror","activesupport::json::backends::yajl","activesupport::json::backends::yaml","activesupport::json::encoding","activesupport::json::encoding::circularreferenceerror","activesupport::json::encoding::encoder","activesupport::json::variable","activesupport::logsubscriber","activesupport::logsubscriber::testhelper","activesupport::logsubscriber::testhelper::mocklogger","activesupport::memoizable","activesupport::memoizable::instancemethods","activesupport::messageencryptor","activesupport::messageencryptor::invalidmessage","activesupport::messageverifier","activesupport::messageverifier::invalidsignature","activesupport::multibyte","activesupport::multibyte::chars","activesupport::multibyte::encodingerror","activesupport::multibyte::unicode","activesupport::multibyte::unicode::codepoint","activesupport::multibyte::unicode::unicodedatabase","activesupport::notifications","activesupport::notifications::event","activesupport::notifications::fanout","activesupport::notifications::instrumenter","activesupport::okjson","activesupport::okjson::error","activesupport::okjson::utf8error","activesupport::orderedoptions","activesupport::railtie","activesupport::rescuable","activesupport::rescuable::classmethods","activesupport::safebuffer","activesupport::safebuffer::safeconcaterror","activesupport::securerandom","activesupport::stringinquirer","activesupport::testcase","activesupport::testing","activesupport::testing::assertions","activesupport::testing::declarative","activesupport::testing::isolation","activesupport::testing::isolation::forking","activesupport::testing::isolation::minitest","activesupport::testing::isolation::subprocess","activesupport::testing::isolation::testunit","activesupport::testing::pending","activesupport::testing::performance","activesupport::testing::performance::benchmarker","activesupport::testing::performance::metrics","activesupport::testing::performance::metrics::base","activesupport::testing::performance::metrics::base::gc","activesupport::testing::performance::metrics::cputime","activesupport::testing::performance::metrics::gcruns","activesupport::testing::performance::metrics::gctime","activesupport::testing::performance::metrics::gctime::gc","activesupport::testing::performance::metrics::memory","activesupport::testing::performance::metrics::objects","activesupport::testing::performance::metrics::processtime","activesupport::testing::performance::metrics::time","activesupport::testing::performance::metrics::walltime","activesupport::testing::performance::performer","activesupport::testing::performance::profiler","activesupport::testing::proxytestresult","activesupport::testing::remoteerror","activesupport::testing::setupandteardown","activesupport::testing::setupandteardown::classmethods","activesupport::testing::setupandteardown::forclassictestunit","activesupport::testing::setupandteardown::forminitest","activesupport::testing::setupandteardown::minitest","activesupport::timewithzone","activesupport::timezone","activesupport::xmlmini","activesupport::xmlmini_libxmlsax","activesupport::xmlmini_libxmlsax::hashbuilder","activesupport::xmlmini_nokogiri","activesupport::xmlmini_nokogiri::nokogiri","activesupport::xmlmini_nokogiri::nokogiri::xml","activesupport::xmlmini_nokogirisax","activesupport::xmlmini_nokogirisax::hashbuilder","applicationcontroller","applicationhelper","arjdbcmysql","arjdbcmysql::error","array","benchmark","bigdecimal","browsingtest","class","commands","commands::info","commands::install","commands::plugin","commands::remove","date","datetime","erb","erb::util","encoding","enumerable","erb","erb::generators","erb::generators::controllergenerator","erb::generators::mailergenerator","erb::generators::scaffoldgenerator","falseclass","file","fixnum","fixtures","fixtures::psych","fixturesfilenotfound","float","html","html::fullsanitizer","html::linksanitizer","html::sanitizer","html::selector","html::tag","html::whitelistsanitizer","hash","i18n","i18n::exceptionhandler","i18n::railtie","integer","kernel","libxml","libxml::xml","loaderror","logger","logger::simpleformatter","mime","mime::mimes","mime::type","missingsourcefile","module","nameerror","nilclass","numeric","object","plugin","process","rails","rails::api","rails::api::apptask","rails::api::edgetask","rails::api::repotask","rails::api::stabletask","rails::api::task","rails::actionmethods","rails::appbuilder","rails::application","rails::application::bootstrap","rails::application::configurable","rails::application::configurable::classmethods","rails::application::configuration","rails::application::finisher","rails::application::railties","rails::backtracecleaner","rails::configuration","rails::configuration::deprecated","rails::console","rails::dbconsole","rails::deprecatedconstant","rails::engine","rails::engine::configurable","rails::engine::configurable::classmethods","rails::engine::configuration","rails::generators","rails::generators::actions","rails::generators::activemodel","rails::generators::appgenerator","rails::generators::base","rails::generators::controllergenerator","rails::generators::error","rails::generators::generatedattribute","rails::generators::generatorgenerator","rails::generators::helpergenerator","rails::generators::integrationtestgenerator","rails::generators::migration","rails::generators::migration::classmethods","rails::generators::migrationgenerator","rails::generators::modelgenerator","rails::generators::namedbase","rails::generators::observergenerator","rails::generators::performancetestgenerator","rails::generators::plugingenerator","rails::generators::resourcegenerator","rails::generators::resourcehelpers","rails::generators::scaffoldcontrollergenerator","rails::generators::scaffoldgenerator","rails::generators::sessionmigrationgenerator","rails::generators::stylesheetsgenerator","rails::generators::testcase","rails::info","rails::info::gem","rails::infocontroller","rails::initializable","rails::initializable::classmethods","rails::initializable::collection","rails::initializable::initializer","rails::initializer","rails::paths","rails::paths::path","rails::paths::pathparent","rails::paths::root","rails::plugin","rails::rack","rails::rack::debugger","rails::rack::logtailer","rails::rack::logger","rails::railtie","rails::railtie::configurable","rails::railtie::configurable::classmethods","rails::railtie::configuration","rails::scriptrailsloader","rails::server","rails::server::options","rails::testunitrailtie","railsenvironment","range","rbconfig","recursivehttpfetcher","rubyprof","sourceannotationextractor","sourceannotationextractor::annotation","string","test","test::unit","test::unit::collector","test::unit::collector::objectspace","test::unit::util","testunit","testunit::generators","testunit::generators::controllergenerator","testunit::generators::helpergenerator","testunit::generators::integrationgenerator","testunit::generators::mailergenerator","testunit::generators::modelgenerator","testunit::generators::observergenerator","testunit::generators::performancegenerator","testunit::generators::plugingenerator","testunit::generators::scaffoldgenerator","time","trueclass","uri","activerecord::spawnmethods#&()","activemodel::massassignmentsecurity::permissionset#+()","activesupport::duration#+()","activesupport::multibyte::chars#+()","activesupport::safebuffer#+()","activesupport::timewithzone#+()","rails::initializable::collection#+()","activesupport::duration#-()","activesupport::timewithzone#-()","time#-()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#<<()","actionview::outputbuffer#<<()","activesupport::safebuffer#<<()","rails::paths::path#<<()","rails::paths::root#<<()","activerecord::connectionadapters::sqliteadapter::version#<=>()","activesupport::multibyte::chars#<=>()","activesupport::timewithzone#<=>()","activesupport::timezone#<=>()","datetime#<=>()","time#<=>()","actiondispatch::middlewarestack::middleware#==()","actionview::filesystemresolver#==()","activerecord::base#==()","activerecord::reflection::macroreflection#==()","activerecord::relation#==()","activesupport::duration#==()","mime::type#==()","activerecord::base#===()","activesupport::multibyte::unicode::unicodedatabase#===()","mime::type#===()","time#===()","activesupport::multibyte::chars#=~()","activesupport::timezone#=~()","mime::type#=~()","date#>>()","actiondispatch::request#get()","actiondispatch::request#post()","actiondispatch::http::headers#[]()","actiondispatch::session::abstractstore::optionshash#[]()","actiondispatch::session::abstractstore::sessionhash#[]()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#[]()","activemodel::errors#[]()","activerecord::base#[]()","activerecord::connectionadapters::tabledefinition#[]()","activesupport::multibyte::chars#[]()","activesupport::orderedoptions#[]()","activesupport::safebuffer#[]()","activesupport::testing::performance::metrics::[]()","activesupport::timezone#[]()","mime::[]()","actiondispatch::session::abstractstore::sessionhash#[]=()","actionmailer::base::deprecatedheaderproxy#[]=()","activemodel::errors#[]=()","activerecord::base#[]=()","activesupport::hashwithindifferentaccess#[]=()","activesupport::hashwithindifferentaccess#[]=()","activesupport::multibyte::chars#[]=()","activesupport::orderedoptions#[]=()","activesupport::testing::proxytestresult#__replay__()","rails::engine#_all_autoload_paths()","rails::engine#_all_load_paths()","actionview::testcase::behavior#_assigns()","activesupport::callbacks::callback#_compile_filter()","activesupport::callbacks::callback#_compile_options()","activesupport::callbacks::callback#_compile_per_key_options()","actioncontroller::redirecting#_compute_redirect_to_location()","activesupport::xmlmini#_dasherize()","abstractcontroller::layouts#_default_layout()","time#_dump()","time#_dump_without_utc_flag()","time#_dump_without_zone()","actioncontroller::redirecting#_extract_redirect_to_status()","abstractcontroller::base#_handle_action_missing()","actioncontroller::compatibility#_handle_method_missing()","abstractcontroller::layouts::classmethods#_implied_layout_name()","abstractcontroller::layouts#_include_layout?()","abstractcontroller::callbacks::classmethods#_insert_callbacks()","abstractcontroller::layouts#_layout()","abstractcontroller::layouts#_layout_for_option()","time#_load()","activemodel::validations::helpermethods#_merge_attributes()","actiondispatch::integration::session#_mock_session()","abstractcontroller::rendering#_normalize_args()","abstractcontroller::callbacks::classmethods#_normalize_callback_options()","activesupport::callbacks::callback#_normalize_legacy_filter()","abstractcontroller::layouts#_normalize_options()","abstractcontroller::rendering#_normalize_options()","actioncontroller::compatibility#_normalize_options()","bigdecimal#_original_to_s()","activesupport::xmlmini#_parse_file()","abstractcontroller::rendering#_prefix()","abstractcontroller::rendering#_process_options()","activerecord::attributemethods::read#_read_attribute()","actionview::testcase::behavior::locals#_render_partial()","actioncontroller::urlfor#_routes()","actionview::testcase::behavior#_routes()","activesupport::testing::isolation#_run_class_setup()","actioncontroller::caching::actions#_save_fragment()","actionview::lookupcontext::details#_set_detail()","class#_stash_object_in_method()","class#_superclass_delegating_accessor()","activesupport::callbacks::callback#_update_filter()","actionview::testcase::behavior#_user_defined_ivars()","actionview::testcase::behavior#_view()","abstractcontroller::layouts::classmethods#_write_layout_method()","actioncontroller::renderers::all::_write_render_options()","actioncontroller::renderers::classmethods#_write_render_options()","activesupport::okjson#abbrev()","abstractcontroller::base#abstract!()","activerecord::base#abstract_class?()","rails::railtie#abstract_railtie?()","actiondispatch::testrequest#accept=()","actiondispatch::http::mimenegotiation#accepts()","activerecord::nestedattributes::classmethods#accepts_nested_attributes_for()","activemodel::massassignmentsecurity::classmethods#accessible_attributes()","actioncontroller::metal::action()","actiondispatch::testrequest#action=()","abstractcontroller::layouts#action_has_layout?()","abstractcontroller::layouts::classmethods::layoutconditions#action_has_layout?()","abstractcontroller::base#action_method?()","abstractcontroller::base#action_methods()","actioncontroller::hideactions::classmethods#action_methods()","actioncontroller::urlfor::classmethods#action_methods()","actiondispatch::routing::mapper::resources#action_options?()","actiondispatch::routing::mapper::resources#action_path()","actiondispatch::routing::polymorphicroutes#action_prefix()","actiondispatch::middlewarestack#active()","activerecord::connectionadapters::abstractadapter#active?()","activerecord::connectionadapters::mysqladapter#active?()","activerecord::connectionadapters::postgresqladapter#active?()","activemodel::massassignmentsecurity::classmethods#active_authorizer()","object#acts_like?()","date#acts_like_date?()","datetime#acts_like_date?()","activesupport::multibyte::chars#acts_like_string?()","string#acts_like_string?()","activesupport::timewithzone#acts_like_time?()","datetime#acts_like_time?()","time#acts_like_time?()","activerecord::connectionadapters::abstractadapter#adapter_name()","activerecord::connectionadapters::postgresqladapter#adapter_name()","actioncontroller::renderers::add()","activemodel::errors#add()","activesupport::bufferedlogger#add()","activerecord::associations::classmethods#add_association_callbacks()","activerecord::autosaveassociation::classmethods#add_autosave_association_callbacks()","activerecord::connectionadapters::mysqladapter#add_column()","activerecord::connectionadapters::postgresqladapter#add_column()","activerecord::connectionadapters::schemastatements#add_column()","activerecord::connectionadapters::mysqladapter#add_column_position!()","actionview::helpers::urlhelper#add_confirm_to_attributes!()","activerecord::associations::classmethods#add_counter_cache_callbacks()","actionview::helpers::urlhelper#add_disable_with_to_attributes!()","activesupport::testing::proxytestresult#add_error()","actionview::template::handlers::erubis#add_expr_escaped()","actionview::template::handlers::erubis#add_expr_literal()","activesupport::backtracecleaner#add_filter()","rails::backtracecleaner#add_gem_filters()","activerecord::connectionadapters::schemastatements#add_index()","activerecord::connectionadapters::databasestatements#add_limit_offset!()","actionview::helpers::urlhelper#add_method_to_attributes!()","activemodel::observing::classmethods#add_observer()","activerecord::observer#add_observer!()","activemodel::errors#add_on_blank()","activemodel::errors#add_on_empty()","actionview::template::handlers::erubis#add_postamble()","actionview::template::handlers::erubis#add_preamble()","activerecord::associationpreload::classmethods#add_preloaded_record_to_collection()","activerecord::associationpreload::classmethods#add_preloaded_records_to_collection()","actioncontroller::add_renderer()","rails::generators::resourcegenerator#add_resource_route()","rails::generators::controllergenerator#add_routes()","rails::generators::base::add_shebang_option!()","activesupport::backtracecleaner#add_silencer()","rails::generators::actions#add_source()","actionview::template::handlers::erubis#add_stmt()","abstractcontroller::helpers::classmethods#add_template_helper()","actionview::template::handlers::erubis#add_text()","activerecord::connectionadapters::schemastatements#add_timestamps()","activemodel::deprecatederrormethods#add_to_base()","activerecord::transactions#add_to_transaction()","activerecord::associations::classmethods#add_touch_callbacks()","activerecord::connectionadapters::databasestatements#add_transaction_record()","nilclass::add_whiner()","activesupport::timewithzone#advance()","date#advance()","datetime#advance()","time#advance()","actiondispatch::callbacks::after()","rails::initializable::initializer#after()","activerecord::transactions::classmethods#after_commit()","actioncontroller::dispatcher#after_dispatch()","rails::rack::logger#after_dispatch()","rails::railtie::configuration#after_initialize()","activerecord::transactions::classmethods#after_rollback()","activemodel::validations::callbacks::classmethods#after_validation()","activerecord::calculations#aggregate_column()","activerecord::base#aggregate_mapping()","activesupport::duration#ago()","activesupport::timewithzone#ago()","date#ago()","datetime#ago()","numeric#ago()","time#ago()","actiondispatch::flash::flashhash#alert()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#alert()","actiondispatch::flash::flashhash#alert=()","activemodel::attributemethods::classmethods#alias_attribute()","module#alias_attribute()","module#alias_method_chain()","activerecord::findermethods#all()","activesupport::timezone#all()","rails::application::railties#all()","rails::generators::activemodel::all()","rails::plugin::all()","actioncontroller::helpers::classmethods#all_application_helpers()","activerecord::base#all_attributes_exists?()","rails::paths::root#all_paths()","activerecord::migration#announce()","module#anonymous?()","activerecord::relation#any?()","actioncontroller::responder#api_behavior()","rails::api::apptask#api_dir()","rails::api::repotask#api_dir()","actioncontroller::responder#api_location()","rails::api::task#api_main()","actiondispatch::integration::runner#app()","actiondispatch::integrationtest::app()","actiondispatch::integrationtest#app()","object#app()","rails::application#app()","actiondispatch::integrationtest::app=()","rails::railtie::configuration#app_generators()","rails::railtie::configuration#app_middleware()","actionview::outputbuffer#append=()","activerecord::associationpreload::classmethods#append_conditions()","activesupport::concern#append_features()","actionview::outputbuffer#append_if_string=()","activerecord::railties::controllerruntime#append_info_to_payload()","abstractcontroller::viewpaths#append_view_path()","abstractcontroller::viewpaths::classmethods#append_view_path()","rails#application()","rails::generators::actions#application()","rails#application=()","rails::generators::namedbase#application_name()","actiondispatch::showexceptions#application_trace()","actiondispatch::routing::mapper::resources#apply_common_behavior_for()","activerecord::spawnmethods#apply_finder_options()","activerecord::findermethods#apply_join_dependency()","activerecord::querymethods#apply_modules()","activerecord::querymethods#arel()","activerecord::base#arel_attributes_values()","activerecord::base#arel_engine()","activerecord::base#arel_table()","rails::generators::testcase::arguments()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#arguments_for_call()","activerecord::querymethods#array_of_strings?()","actionview::helpers::scriptaculoushelper#array_or_string_for_javascript()","actionview::helpers::urlhelper#array_or_string_for_javascript()","activesupport::okjson#arrenc()","activesupport::okjson#arrparse()","activemodel::errors#as_json()","activemodel::serializers::json#as_json()","activesupport::json::encoding::encoder#as_json()","activesupport::timewithzone#as_json()","activesupport::testing::assertions#assert_blank()","activemodel::lint::tests#assert_boolean()","rails::generators::testcase#assert_class_method()","activesupport::testing::assertions#assert_difference()","rails::generators::testcase#assert_directory()","actiondispatch::assertions::domassertions#assert_dom_equal()","actiondispatch::assertions::domassertions#assert_dom_not_equal()","rails::generators::testcase#assert_field_default_value()","rails::generators::testcase#assert_field_type()","rails::generators::testcase#assert_file()","actiondispatch::assertions::routingassertions#assert_generates()","actiondispatch::middlewarestack#assert_index()","rails::generators::testcase#assert_instance_method()","rails::generators::testcase#assert_method()","rails::generators::testcase#assert_migration()","activesupport::testing::assertions#assert_no_difference()","rails::generators::testcase#assert_no_directory()","rails::generators::testcase#assert_no_file()","rails::generators::testcase#assert_no_migration()","actiondispatch::assertions::tagassertions#assert_no_tag()","activesupport::testing::assertions#assert_present()","actiondispatch::assertions::routingassertions#assert_recognizes()","actiondispatch::assertions::responseassertions#assert_redirected_to()","actiondispatch::assertions::responseassertions#assert_response()","actiondispatch::assertions::routingassertions#assert_routing()","actiondispatch::assertions::selectorassertions#assert_select()","actiondispatch::assertions::selectorassertions#assert_select_email()","actiondispatch::assertions::selectorassertions#assert_select_encoded()","actiondispatch::assertions::selectorassertions#assert_select_rjs()","actiondispatch::assertions::tagassertions#assert_tag()","actioncontroller::templateassertions#assert_template()","hash#assert_valid_keys()","actionview::helpers::assettaghelper#asset_file_path()","actionview::helpers::assettaghelper#asset_file_path!()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#assign()","actiondispatch::response#assign_default_content_type_and_charset!()","activerecord::base#assign_multiparameter_attributes()","actioncontroller::compatibility#assign_shortcuts()","actiondispatch::testprocess#assigns()","actiondispatch::testresponse::deprecatedhelpers#assigns()","activerecord::associationpreload::classmethods#associated_records()","activerecord::autosaveassociation#associated_records_to_validate_or_save()","activerecord::associations::classmethods#association_accessor_methods()","activerecord::associations::classmethods#association_constructor_method()","activerecord::autosaveassociation#association_valid?()","activerecord::connectionadapters::schemastatements#assume_migrated_upto_version()","activesupport::timezone#at()","string#at()","date#at_beginning_of_day()","datetime#at_beginning_of_day()","time#at_beginning_of_day()","date#at_beginning_of_month()","time#at_beginning_of_month()","date#at_beginning_of_quarter()","time#at_beginning_of_quarter()","date#at_beginning_of_week()","time#at_beginning_of_week()","date#at_beginning_of_year()","time#at_beginning_of_year()","date#at_end_of_month()","time#at_end_of_month()","date#at_end_of_quarter()","time#at_end_of_quarter()","date#at_end_of_week()","time#at_end_of_week()","date#at_end_of_year()","time#at_end_of_year()","date#at_midnight()","datetime#at_midnight()","time#at_midnight()","actionview::helpers::atomfeedhelper#atom_feed()","file::atomic_write()","activesupport::logsubscriber#attach_to()","actionmailer::base#attachments()","activemodel::massassignmentsecurity::classmethods#attr_accessible()","module#attr_accessor_with_default()","module#attr_internal()","module#attr_internal_accessor()","module#attr_internal_ivar_name()","module#attr_internal_reader()","module#attr_internal_writer()","activemodel::massassignmentsecurity::classmethods#attr_protected()","activerecord::base#attr_readonly()","activerecord::attributemethods::read#attribute()","activerecord::attributemethods::write#attribute=()","activerecord::attributemethods::query#attribute?()","activerecord::attributemethods::beforetypecast#attribute_before_type_cast()","activemodel::dirty#attribute_change()","activemodel::dirty#attribute_changed?()","activerecord::base#attribute_for_inspect()","html::selector#attribute_match()","activemodel::attributemethods#attribute_method?()","activemodel::validations::classmethods#attribute_method?()","activerecord::base#attribute_method?()","activemodel::attributemethods::classmethods#attribute_method_affix()","activemodel::attributemethods::classmethods#attribute_method_prefix()","activemodel::attributemethods::classmethods#attribute_method_suffix()","activemodel::attributemethods::classmethods#attribute_methods_generated?()","activerecord::base#attribute_names()","activerecord::base#attribute_present?()","activemodel::dirty#attribute_was()","activemodel::dirty#attribute_will_change!()","activerecord::base#attributes()","activerecord::base#attributes=()","activerecord::attributemethods::beforetypecast#attributes_before_type_cast()","activerecord::locking::optimistic#attributes_from_column_definition()","activerecord::persistence#attributes_from_column_definition()","activemodel::massassignmentsecurity::classmethods#attributes_protected_by_default()","activerecord::base::attributes_protected_by_default()","actionview::helpers::assettaghelper#audio_path()","actionview::helpers::assettaghelper#audio_tag()","actioncontroller::httpauthentication::basic#authenticate()","actioncontroller::httpauthentication::basic::controllermethods#authenticate_or_request_with_http_basic()","actioncontroller::httpauthentication::basic::controllermethods#authenticate_with_http_basic()","actioncontroller::httpauthentication::basic#authentication_request()","actiondispatch::request#authorization()","actionview::helpers::assettaghelper#auto_discovery_link_tag()","activesupport::bufferedlogger#auto_flush()","activesupport::bufferedlogger#auto_flushing=()","actionview::helpers::texthelper#auto_link()","actionview::helpers::texthelper#auto_link_email_addresses()","actionview::helpers::texthelper#auto_link_urls()","actionview::helpers::texthelper#auto_linked?()","activesupport::autoload#autoload()","activesupport::autoload#autoload_at()","rails::paths::root#autoload_once()","rails::engine::configuration#autoload_once_paths()","rails::engine::configuration#autoload_paths()","rails::paths::root#autoload_paths()","activesupport::autoload#autoload_under()","activesupport::autoload#autoloads()","erb::generators::scaffoldgenerator#available_views()","activerecord::calculations#average()","activesupport::json#backend()","activesupport::json#backend=()","activesupport::xmlmini#backend=()","rails#backtrace_cleaner()","activerecord::dynamicfindermatch#bang?()","rails::generators::base::banner()","activesupport::securerandom::base64()","activerecord::base#base_class()","rails::generators::base::base_name()","rails::generators::base::base_root()","activerecord::persistence#becomes()","actiondispatch::callbacks::before()","rails::initializable::initializer#before()","rails::railtie::configuration#before_configuration()","actioncontroller::dispatcher#before_dispatch()","rails::rack::logger#before_dispatch()","rails::railtie::configuration#before_eager_load()","actioncontroller::testing::classmethods#before_filters()","rails::railtie::configuration#before_initialize()","activerecord::autosaveassociation#before_save_collection_association()","activemodel::validations::callbacks::classmethods#before_validation()","activerecord::connectionadapters::databasestatements#begin_db_transaction()","activerecord::connectionadapters::postgresqladapter#begin_db_transaction()","date#beginning_of_day()","datetime#beginning_of_day()","time#beginning_of_day()","date#beginning_of_month()","time#beginning_of_month()","date#beginning_of_quarter()","time#beginning_of_quarter()","date#beginning_of_week()","time#beginning_of_week()","date#beginning_of_year()","time#beginning_of_year()","activesupport::deprecation#behavior()","activesupport::deprecation#behavior=()","activerecord::associations::classmethods#belongs_to()","activerecord::connectionadapters::table#belongs_to()","activerecord::connectionadapters::tabledefinition#belongs_to()","activesupport::benchmarkable#benchmark()","activesupport::testing::performance::metrics::base#benchmark()","railsenvironment#best_install_method()","activesupport::timewithzone#between?()","actiondispatch::testresponse::deprecatedhelpers#binary_content()","activerecord::connectionadapters::column#binary_to_string()","rails::initializable::initializer#bind()","activemodel::errors#blank?()","object#blank?()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#block_to_function()","actiondispatch::request#body()","actiondispatch::response#body()","actiondispatch::response#body=()","actiondispatch::response#body_parts()","kernel#breakpoint()","activesupport::bufferedlogger#buffer()","actiondispatch::middlewarestack#build()","actiondispatch::middlewarestack::middleware#build()","activerecord::relation#build()","rails::generators::activemodel::build()","activerecord::querymethods#build_arel()","actionview::helpers::prototypehelper#build_callbacks()","activerecord::associations::throughassociationscope#build_conditions()","activerecord::predicatebuilder#build_from_hash()","activerecord::querymethods#build_joins()","activesupport::cache::memcachestore::build_mem_cache()","actionview::template#build_method_name()","rails::application#build_middleware_stack()","actiondispatch::routing::polymorphicroutes#build_named_route_call()","actionview::pathresolver#build_path()","actioncontroller::testcase::behavior#build_request_uri()","activerecord::querymethods#build_select()","activerecord::associations::throughassociationscope#build_sti_condition()","activerecord::associations::throughassociationscope#build_through_conditions()","activerecord::querymethods#build_where()","rails::application::configuration#builtin_controller()","actionview::helpers::urlhelper#button_to()","actionview::helpers::javascripthelper#button_to_function()","activesupport::cache::strategy::localcache#bypass_local_cache()","numeric#byte()","numeric#bytes()","actioncontroller::caching#cache()","actionview::helpers::cachehelper#cache()","activerecord::connectionadapters::querycache#cache()","activerecord::querycache::classmethods#cache()","rails#cache()","activerecord::attributemethods::read::classmethods#cache_attribute?()","activerecord::attributemethods::read::classmethods#cache_attributes()","actioncontroller::caching::configmethods#cache_configured?()","fixtures::cache_fixtures()","fixtures::cache_for_connection()","activerecord::base#cache_key()","actioncontroller::caching::pages#cache_page()","actioncontroller::caching::pages::classmethods#cache_page()","activerecord::connectionadapters::querycache#cache_sql()","actioncontroller::caching::configmethods#cache_store()","actioncontroller::caching::configmethods#cache_store=()","actionview::resolver#cached()","activerecord::attributemethods::read::classmethods#cached_attributes()","fixtures::cached_fixtures()","actioncontroller::caching::actions::classmethods#caches_action()","actioncontroller::caching::pages::classmethods#caches_page()","actionview::resolver#caching?()","actioncontroller::caching::pages#caching_allowed()","actioncontroller::caching#caching_allowed?()","activerecord::calculations#calculate()","actioncontroller::metal::call()","actioncontroller::middleware::actionmiddleware#call()","actioncontroller::responder::call()","actiondispatch::beststandardssupport#call()","actiondispatch::callbacks#call()","actiondispatch::cookies#call()","actiondispatch::flash#call()","actiondispatch::head#call()","actiondispatch::paramsparser#call()","actiondispatch::remoteip#call()","actiondispatch::rescue#call()","actiondispatch::session::abstractstore#call()","actiondispatch::showexceptions#call()","actiondispatch::static#call()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#call()","actionview::template::actionview::template::template::handler::call()","actionview::template::handlers::compilable::classmethods#call()","activerecord::querycache#call()","activesupport::logsubscriber#call()","i18n::exceptionhandler#call()","logger::simpleformatter#call()","rails::application#call()","rails::rack::debugger#call()","rails::rack::logtailer#call()","rails::rack::logger#call()","activesupport::callbacks#callback()","string#camelcase()","activesupport::inflector#camelize()","string#camelize()","actiondispatch::routing::mapper::resources#canonical_action?()","rails::generators::actions#capify!()","activesupport::multibyte::chars#capitalize()","actionview::helpers::capturehelper#capture()","rails::generators::testcase#capture()","activerecord::connectionadapters::databasestatements#case_sensitive_equality_operator()","activerecord::connectionadapters::mysqladapter#case_sensitive_equality_operator()","class#cattr_accessor()","class#cattr_reader()","class#cattr_writer()","activesupport::xmlmini_nokogirisax::hashbuilder#cdata_block()","actionview::helpers::taghelper#cdata_section()","activesupport::multibyte::chars#center()","activerecord::connectionadapters::table#change()","date#change()","datetime#change()","time#change()","activerecord::connectionadapters::postgresqladapter#change_column()","activerecord::connectionadapters::schemastatements#change_column()","activerecord::connectionadapters::postgresqladapter#change_column_default()","activerecord::connectionadapters::schemastatements#change_column_default()","activerecord::connectionadapters::mysqladapter#change_column_null()","activerecord::connectionadapters::postgresqladapter#change_column_null()","activerecord::connectionadapters::sqliteadapter#change_column_null()","activerecord::connectionadapters::table#change_default()","activerecord::connectionadapters::schemastatements#change_table()","activemodel::dirty#changed()","activemodel::dirty#changed?()","activemodel::dirty#changed_attributes()","activerecord::autosaveassociation#changed_for_autosave?()","activemodel::dirty#changes()","activesupport::xmlmini_nokogirisax::hashbuilder#characters()","activerecord::connectionadapters::mysqladapter#charset()","actionview::helpers::formbuilder#check_box()","actionview::helpers::formhelper#check_box()","actionview::helpers::instancetagmethods::classmethods#check_box_checked?()","actionview::helpers::formtaghelper#check_box_tag()","rails::generators::namedbase::check_class_collision()","activesupport::json::encoding::encoder#check_for_circular_references()","activemodel::eachvalidator#check_validity!()","activemodel::validations::exclusionvalidator#check_validity!()","activemodel::validations::formatvalidator#check_validity!()","activemodel::validations::inclusionvalidator#check_validity!()","activemodel::validations::lengthvalidator#check_validity!()","activemodel::validations::numericalityvalidator#check_validity!()","activerecord::connectionadapters::connectionpool#checkin()","activerecord::connectionadapters::connectionpool#checkout()","activerecord::connectionadapters::connectionpool#checkout_and_verify()","activerecord::connectionadapters::connectionpool#checkout_existing_connection()","activerecord::connectionadapters::connectionpool#checkout_new_connection()","datetime::civil_from_format()","class#class_attribute()","kernel#class_eval()","activerecord::reflection::macroreflection#class_name()","rails::generators::namedbase#class_name()","activerecord::base#class_of_active_record_descendant()","activesupport::inflector#classify()","string#classify()","activesupport::backtracecleaner#clean()","actiondispatch::showexceptions#clean_backtrace()","activesupport::cache::filestore#cleanup()","activesupport::cache::memorystore#cleanup()","activesupport::cache::store#cleanup()","activerecord::railties::controllerruntime#cleanup_view_runtime()","actiondispatch::session::abstractstore::sessionhash#clear()","activesupport::cache::filestore#clear()","activesupport::cache::memcachestore#clear()","activesupport::cache::memorystore#clear()","activesupport::cache::store#clear()","activesupport::cache::strategy::localcache::localstore#clear()","activesupport::descendantstracker::clear()","activesupport::inflector::inflections#clear()","activesupport::dependencies::reference::clear!()","abstractcontroller::base#clear_action_methods!()","activerecord::connectionadapters::connectionhandler#clear_active_connections!()","activerecord::connectionadapters::connectionhandler#clear_all_connections!()","activesupport::bufferedlogger#clear_buffer()","actionview::resolver#clear_cache()","abstractcontroller::helpers::classmethods#clear_helpers()","activerecord::connectionadapters::querycache#clear_query_cache()","activerecord::connectionadapters::connectionhandler#clear_reloadable_connections!()","activerecord::connectionadapters::connectionpool#clear_reloadable_connections!()","actioncontroller::mimeresponds::classmethods#clear_respond_to()","activerecord::connectionadapters::connectionpool#clear_stale_cached_connections!()","activerecord::transactions#clear_transaction_record_state()","actiondispatch::testresponse#client_error?()","activerecord::connectionadapters::postgresqladapter#client_min_messages()","activerecord::connectionadapters::postgresqladapter#client_min_messages=()","activesupport::callbacks::callback#clone()","activerecord::base#clone_attribute_value()","activerecord::base#clone_attributes()","activesupport::safebuffer#clone_empty()","activerecord::attributemethods::dirty#clone_with_time_zone_conversion_attribute?()","activesupport::bufferedlogger#close()","activesupport::gzip::stream#close()","actiondispatch::response#code()","activerecord::querymethods#collapse_wheres()","activerecord::connectionadapters::mysqladapter#collation()","actionview::helpers::assettaghelper#collect_asset_files()","actiondispatch::routing::mapper::resources#collection()","actionview::partials::partialrenderer#collection()","activerecord::associations::classmethods#collection_accessor_methods()","actionview::partials::partialrenderer#collection_from_object()","activerecord::associations::classmethods#collection_reader_method()","actionview::helpers::formbuilder#collection_select()","actionview::helpers::formoptionshelper#collection_select()","actionview::partials::partialrenderer#collection_with_template()","actionview::partials::partialrenderer#collection_without_template()","activesupport::logsubscriber#color()","activerecord::base#colorize_logging()","rails::application::configuration#colorize_logging()","rails::application::configuration#colorize_logging=()","activerecord::connectionadapters::table#column()","activerecord::connectionadapters::tabledefinition#column()","activerecord::calculations#column_alias_for()","activerecord::findermethods#column_aliases()","activerecord::connectionadapters::schemastatements#column_exists?()","activerecord::connectionadapters::table#column_exists?()","activerecord::calculations#column_for()","activerecord::connectionadapters::mysqladapter#column_for()","activerecord::base#column_for_attribute()","activerecord::connectionadapters::databaselimits#column_name_length()","activerecord::base#column_names()","fixtures#column_names()","activerecord::base#columns()","activerecord::connectionadapters::postgresqladapter#columns()","activerecord::connectionadapters::schemastatements#columns()","activerecord::base#columns_hash()","activerecord::connectionadapters::databaselimits#columns_per_multicolumn_index()","activerecord::connectionadapters::databaselimits#columns_per_table()","activerecord::base#comma_pair_list()","activerecord::connectionadapters::databasestatements#commit_db_transaction()","activerecord::connectionadapters::postgresqladapter#commit_db_transaction()","activerecord::connectionadapters::databasestatements#commit_transaction_records()","activesupport::timewithzone#comparable_time()","datetime#compare_with_coercion()","time#compare_with_coercion()","datetime#compare_without_coercion()","time#compare_without_coercion()","actionview::template#compile()","actionview::template::handlers::builder#compile()","actionview::template::handlers::compilable#compile()","actionview::template::handlers::erb#compile()","actionview::template::handlers::rjs#compile()","activesupport::callbacks::callbackchain#compile()","actiondispatch::http::parameterfilter#compile_filter()","actiondispatch::http::parameterfilter#compiled_filter()","rails::api::apptask#component_root_dir()","rails::api::repotask#component_root_dir()","activesupport::multibyte::chars#compose()","activesupport::multibyte::unicode#compose_codepoints()","activerecord::aggregations::classmethods#composed_of()","activesupport::gzip::compress()","activesupport::cache::entry#compressed?()","actionview::helpers::assettaghelper#compute_asset_host()","actionview::helpers::assettaghelper#compute_javascript_paths()","actionview::helpers::assettaghelper#compute_public_path()","actionview::helpers::assettaghelper#compute_stylesheet_paths()","activerecord::base#compute_table_name()","activerecord::base#compute_type()","actionview::helpers::texthelper#concat()","activesupport::safebuffer#concat()","rails::paths::path#concat()","rails::paths::root#concat()","activerecord::associations::throughassociationscope#conditions()","actionview::testcase::behavior#config()","activesupport::configurable#config()","activesupport::configurable::classmethods#config()","rails::application::configurable#config()","rails::engine::configurable#config()","rails::engine::configurable::classmethods#config()","rails::plugin#config()","rails::railtie::configurable#config()","rails::railtie::configurable::classmethods#config()","activesupport::configurable::classmethods#config_accessor()","rails#configuration()","activerecord::base::configurations()","activesupport::configurable::classmethods#configure()","rails::application#configure()","activerecord::connectionadapters::mysqladapter#configure_connection()","activerecord::connectionadapters::postgresqladapter#configure_connection()","activerecord::associations::classmethods#configure_dependency_for_belongs_to()","activerecord::associations::classmethods#configure_dependency_for_has_many()","activerecord::associations::classmethods#configure_dependency_for_has_one()","activerecord::associations::classmethods#configure_destroy_hook_for_has_and_belongs_to_many()","rails::api::task#configure_rdoc_files()","activerecord::connectionadapters::mysqladapter#connect()","activerecord::connectionadapters::postgresqladapter#connect()","activerecord::base#connected?()","activerecord::connectionadapters::connectionhandler#connected?()","activerecord::connectionadapters::connectionpool#connected?()","activerecord::base#connection()","activerecord::connectionadapters::connectionpool#connection()","activerecord::migration#connection()","activerecord::sessionstore::sqlbypass#connection()","activerecord::sessionstore::sqlbypass::connection()","activerecord::base::connection_handler()","activerecord::base#connection_pool()","rails::infocontroller#consider_all_requests_local?()","rails::railtie#console()","activesupport::inflector#constantize()","string#constantize()","actiondispatch::routing::mapper::scoping#constraints()","activerecord::base#construct_attributes_from_arguments()","activerecord::associations::throughassociationscope#construct_conditions()","activerecord::base#construct_finder_arel()","activerecord::associations::throughassociationscope#construct_from()","activerecord::associationpreload::classmethods#construct_id_map()","activerecord::associations::throughassociationscope#construct_join_attributes()","activerecord::findermethods#construct_join_dependency_for_association_find()","activerecord::associations::throughassociationscope#construct_joins()","activerecord::findermethods#construct_limited_ids_condition()","activerecord::associations::throughassociationscope#construct_owner_attributes()","activerecord::associations::throughassociationscope#construct_quoted_owner_attributes()","activerecord::findermethods#construct_relation_for_association_calculations()","activerecord::findermethods#construct_relation_for_association_find()","activerecord::associations::throughassociationscope#construct_scope()","activerecord::associations::throughassociationscope#construct_select()","activesupport::multibyte::chars::consumes?()","html::whitelistsanitizer#contains_bad_protocols?()","activerecord::base#content_columns()","actionview::helpers::capturehelper#content_for()","actionview::helpers::capturehelper#content_for?()","actiondispatch::request#content_length()","actiondispatch::http::mimenegotiation#content_mime_type()","actionview::helpers::taghelper#content_tag()","actionview::helpers::recordtaghelper#content_tag_for()","actionview::helpers::taghelper#content_tag_string()","actioncontroller::metal#content_type()","actiondispatch::http::mimenegotiation#content_type()","actioncontroller::metal#content_type=()","actiondispatch::paramsparser#content_type_from_legacy_post_data_format_header()","actiondispatch::routing::mapper::scoping#controller()","object#controller()","actioncontroller::testcase::behavior::classmethods#controller_class()","actioncontroller::testcase::behavior::classmethods#controller_class=()","rails::generators::resourcehelpers#controller_class_name()","rails::generators::resourcehelpers#controller_class_path()","actiondispatch::routing::routeset#controller_constraints()","rails::generators::resourcehelpers#controller_file_name()","rails::generators::resourcehelpers#controller_file_path()","rails::generators::resourcehelpers#controller_i18n_scope()","actioncontroller::metal::controller_name()","actioncontroller::metal#controller_name()","abstractcontroller::base#controller_path()","actionview::base#controller_path()","actionview::testcase::testcontroller#controller_path=()","rails::configuration::deprecated#controller_paths()","rails::configuration::deprecated#controller_paths=()","actionview::helpers::urlhelper#convert_boolean_attributes!()","activesupport::json::backends::jsongem#convert_dates_from()","activesupport::json::backends::okjson#convert_dates_from()","activesupport::json::backends::yajl#convert_dates_from()","activesupport::hashwithindifferentaccess#convert_key()","activesupport::hashwithindifferentaccess#convert_key()","activerecord::base#convert_number_column_value()","actionview::helpers::urlhelper#convert_options_to_data_attributes()","actionview::context#convert_to_model()","activesupport::hashwithindifferentaccess#convert_value()","activesupport::hashwithindifferentaccess#convert_value()","actiondispatch::request#cookie_jar()","rails::configuration::deprecated#cookie_secret()","rails::configuration::deprecated#cookie_secret=()","actioncontroller::cookies#cookies()","actiondispatch::integration::session#cookies()","actiondispatch::response#cookies()","actiondispatch::testprocess#cookies()","actiondispatch::testrequest#cookies()","rails::generators::stylesheetsgenerator#copy_stylesheets_file()","erb::generators::controllergenerator#copy_view_files()","erb::generators::scaffoldgenerator#copy_view_files()","activemodel::errors#count()","activerecord::calculations#count()","activerecord::base#count_by_sql()","activemodel::observing::classmethods#count_observers()","actionview::template#counter_name()","activerecord::base#create()","activerecord::connectionadapters::postgresqladapter#create()","activerecord::persistence#create()","activerecord::relation#create()","activesupport::cache::entry#create()","activesupport::timezone::create()","activerecord::relation#create!()","activerecord::validations::classmethods#create!()","activerecord::associations::classmethods#create_belongs_to_reflection()","rails::generators::controllergenerator#create_controller_files()","rails::generators::scaffoldcontrollergenerator#create_controller_files()","activerecord::connectionadapters::mysqladapter#create_database()","activerecord::connectionadapters::postgresqladapter#create_database()","activerecord::associations::classmethods#create_extension_modules()","testunit::generators::modelgenerator#create_fixture_file()","fixtures::create_fixtures()","object#create_fixtures()","rails::generators::testcase#create_generated_attribute()","rails::generators::generatorgenerator#create_generator_files()","activerecord::associations::classmethods#create_has_and_belongs_to_many_reflection()","activerecord::associations::classmethods#create_has_many_reflection()","activerecord::associations::classmethods#create_has_one_reflection()","activerecord::associations::classmethods#create_has_one_through_reflection()","rails::generators::helpergenerator#create_helper_files()","testunit::generators::helpergenerator#create_helper_files()","rails::generators::plugingenerator#create_lib_files()","activerecord::persistence#create_or_update()","activerecord::reflection::classmethods#create_reflection()","rails::generators::plugingenerator#create_root_files()","erb::generators::scaffoldgenerator#create_root_folder()","activerecord::connectionadapters::abstractadapter#create_savepoint()","activerecord::connectionadapters::mysqladapter#create_savepoint()","activerecord::connectionadapters::postgresqladapter#create_savepoint()","activerecord::connectionadapters::schemastatements#create_table()","rails::generators::plugingenerator#create_tasks_files()","testunit::generators::modelgenerator#create_test_file()","testunit::generators::controllergenerator#create_test_files()","testunit::generators::integrationgenerator#create_test_files()","testunit::generators::mailergenerator#create_test_files()","testunit::generators::observergenerator#create_test_files()","testunit::generators::performancegenerator#create_test_files()","testunit::generators::plugingenerator#create_test_files()","testunit::generators::scaffoldgenerator#create_test_files()","activerecord::attributemethods::timezoneconversion::classmethods#create_time_zone_conversion_attribute?()","activerecord::querymethods#create_with()","activerecord::dynamicfindermatch#creator?()","actionview::helpers::csrfhelper#csrf_meta_tag()","actiondispatch::assertions::selectorassertions#css_select()","fixtures#csv_file_path()","date#current()","datetime#current()","time#current()","actionview::helpers::texthelper#current_cycle()","activerecord::connectionadapters::mysqladapter#current_database()","activerecord::connectionadapters::postgresqladapter#current_database()","activesupport::xmlmini_libxmlsax::hashbuilder#current_hash()","activesupport::xmlmini_nokogirisax::hashbuilder#current_hash()","actionview::helpers::urlhelper#current_page?()","activerecord::connectionadapters::abstractadapter#current_savepoint_name()","actiondispatch::session::abstractstore#current_session_id()","activerecord::querymethods#custom_join_sql()","actionview::helpers::texthelper#cycle()","process::daemon()","activesupport::inflector#dasherize()","string#dasherize()","activerecord::sessionstore::session#data()","activerecord::sessionstore::sqlbypass#data()","activerecord::sessionstore::sqlbypass::data_column()","activerecord::sessionstore::session::data_column_name()","activerecord::sessionstore::sqlbypass::data_column_name()","activerecord::sessionstore::session#data_column_size_limit()","activesupport::multibyte::unicode#database()","rails::application::configuration#database_configuration()","rails::configuration::deprecated#database_configuration_file()","rails::configuration::deprecated#database_configuration_file=()","actionview::helpers::datehelper#date_select()","actionview::helpers::formbuilder#date_select()","actionview::helpers::datehelper#datetime_select()","actionview::helpers::formbuilder#datetime_select()","numeric#day()","numeric#days()","time#days_in_month()","actionview::helpers::debughelper#debug()","activemodel::massassignmentsecurity::sanitizer#debug_protected_attribute_removal()","actionview::base::debug_rjs=()","kernel#debugger()","activesupport::json::backends::jsongem#decode()","activesupport::json::backends::okjson#decode()","activesupport::json::backends::yajl#decode()","activesupport::json::backends::yaml#decode()","activesupport::okjson#decode()","activesupport::base64::decode64()","actioncontroller::httpauthentication::basic#decode_credentials()","activesupport::multibyte::chars#decompose()","activesupport::multibyte::unicode#decompose_codepoints()","activesupport::gzip::decompress()","activerecord::persistence#decrement()","activesupport::cache::filestore#decrement()","activesupport::cache::memorystore#decrement()","activesupport::cache::store#decrement()","activerecord::persistence#decrement!()","activerecord::countercache#decrement_counter()","activerecord::connectionadapters::abstractadapter#decrement_open_transactions()","activesupport::messageencryptor#decrypt()","activesupport::messageencryptor#decrypt_and_verify()","hash#deep_merge()","hash#deep_merge!()","actiondispatch::request#deep_munge()","actionmailer::base#default()","activesupport::hashwithindifferentaccess#default()","activesupport::hashwithindifferentaccess#default()","rails::generators::generatedattribute#default()","railsenvironment::default()","railsenvironment::default=()","actioncontroller::responder#default_action()","rails::generators::base::default_aliases_for_option()","rails::generators::base::default_for_option()","actionview::template::handlers::rjs#default_format()","abstractcontroller::helpers::classmethods#default_helper_module!()","date#default_inspect()","datetime#default_inspect()","rails::application#default_middleware_stack()","rails::server#default_options()","activerecord::connectionadapters::sqliteadapter#default_primary_key_type()","actioncontroller::implicitrender#default_render()","actioncontroller::responder#default_render()","activerecord::base#default_scope()","activerecord::connectionadapters::databasestatements#default_sequence_name()","rails::generators::base::default_source_root()","activerecord::base::default_timezone()","actiondispatch::integration::session#default_url_options()","actiondispatch::routing::mapper::base#default_url_options()","actionmailer::base::deprecatedurloptions#default_url_options()","actiondispatch::routing::mapper::base#default_url_options=()","actionmailer::base::deprecatedurloptions#default_url_options=()","rails::generators::base::default_value_for_option()","actiondispatch::routing::mapper::scoping#defaults()","activerecord::schema::define()","activemodel::attributemethods::classmethods#define_attr_method()","activemodel::attributemethods::classmethods#define_attribute_methods()","activerecord::attributemethods::classmethods#define_attribute_methods()","activerecord::observer#define_callbacks()","activesupport::callbacks::classmethods#define_callbacks()","activerecord::attributemethods::read::classmethods#define_method_attribute()","activerecord::attributemethods::timezoneconversion::classmethods#define_method_attribute()","activerecord::attributemethods::timezoneconversion::classmethods#define_method_attribute=()","activerecord::attributemethods::write::classmethods#define_method_attribute=()","activemodel::callbacks#define_model_callbacks()","activerecord::autosaveassociation::classmethods#define_non_cyclic_method()","activerecord::attributemethods::read::classmethods#define_read_method()","activerecord::attributemethods::read::classmethods#define_read_method_for_serialized_attribute()","activerecord::attributemethods::classmethods#defined_activerecord_methods()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#delay()","module#delegate()","actioncontroller::testcase::behavior#delete()","actiondispatch::integration::requesthelpers#delete()","actiondispatch::routing::mapper::httphelpers#delete()","actiondispatch::session::abstractstore::sessionhash#delete()","activerecord::connectionadapters::databasestatements#delete()","activerecord::persistence#delete()","activerecord::relation#delete()","activesupport::cache::store#delete()","activesupport::hashwithindifferentaccess#delete()","activesupport::hashwithindifferentaccess#delete()","actiondispatch::request#delete?()","activerecord::relation#delete_all()","activerecord::associations::classmethods#delete_all_has_many_dependencies()","activesupport::cache::filestore#delete_empty_directories()","activesupport::cache::filestore#delete_entry()","activesupport::cache::strategy::localcache::localstore#delete_entry()","fixtures#delete_existing_fixtures()","activesupport::cache::filestore#delete_matched()","activesupport::cache::memorystore#delete_matched()","activesupport::cache::store#delete_matched()","actiondispatch::testrequest#delete_nil_values!()","activerecord::connectionadapters::databasestatements#delete_sql()","actiondispatch::integration::requesthelpers#delete_via_redirect()","activesupport::inflector#demodulize()","string#demodulize()","activemodel::massassignmentsecurity::blacklist#deny?()","activemodel::massassignmentsecurity::whitelist#deny?()","module#deprecate()","activesupport::deprecation#deprecate_methods()","activesupport::deprecation#deprecated_method_warning()","actionmailer::base::deprecatedurloptions#deprecated_url_options()","activesupport::deprecation#deprecation_caller_message()","activesupport::deprecation#deprecation_message()","activerecord::reflection::macroreflection#derive_class_name()","rails::api::task#desc()","rails::generators::base::desc()","activesupport::descendantstracker::descendants()","activesupport::descendantstracker#descendants()","activerecord::base#descends_from_active_record?()","activesupport::testing::declarative::describe()","activesupport::cache::memcachestore#deserialize_entry()","rails::generators::testcase::destination()","actiondispatch::session::abstractstore#destroy()","actiondispatch::session::abstractstore::sessionhash#destroy()","actiondispatch::session::cookiestore#destroy()","actiondispatch::session::memcachestore#destroy()","activerecord::persistence#destroy()","activerecord::relation#destroy()","activerecord::sessionstore#destroy()","activerecord::sessionstore::sqlbypass#destroy()","rails::generators::activemodel#destroy()","activerecord::relation#destroy_all()","activerecord::persistence#destroy_associations()","activerecord::persistence#destroyed?()","abstractcontroller::viewpaths#details_for_lookup()","actioncontroller::testcase::behavior::classmethods#determine_default_controller_class()","actionview::testcase::behavior::classmethods#determine_default_helper_class()","commands::install#determine_install_method()","actionview::helpers::assettaghelper#determine_source()","hash#diff()","activesupport::descendantstracker#direct_descendants()","activesupport::descendantstracker::direct_descendants()","actiondispatch::static#directory_exist?()","activesupport::multibyte::unicode::unicodedatabase::dirname()","activerecord::connectionadapters::querycache#dirties_query_cache()","activerecord::connectionadapters::abstractadapter#disable_referential_integrity()","actiondispatch::flash::flashhash#discard()","activerecord::connectionadapters::abstractadapter#disconnect!()","activerecord::connectionadapters::connectionpool#disconnect!()","activerecord::connectionadapters::mysqladapter#disconnect!()","activerecord::connectionadapters::postgresqladapter#disconnect!()","activerecord::connectionadapters::sqliteadapter#disconnect!()","actioncontroller::metal#dispatch()","actioncontroller::rackdelegation#dispatch()","actioncontroller::responder#display()","sourceannotationextractor#display()","actionview::helpers::datehelper#distance_of_time_in_words()","actionview::helpers::datehelper#distance_of_time_in_words_to_now()","activerecord::connectionadapters::schemastatements#distinct()","actionview::helpers::recordtaghelper#div_for()","actioncontroller::recordidentifier#dom_class()","actioncontroller::recordidentifier#dom_id()","actiondispatch::http::url#domain()","activesupport::multibyte::chars#downcase()","recursivehttpfetcher#download()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#draggable()","actionview::helpers::scriptaculoushelper#draggable_element()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#drop_receiving()","actionview::helpers::scriptaculoushelper#drop_receiving_element()","activerecord::connectionadapters::mysqladapter#drop_table()","activerecord::connectionadapters::schemastatements#drop_table()","activesupport::timewithzone#dst?()","activerecord::base#dup()","activesupport::hashwithindifferentaccess#dup()","activesupport::hashwithindifferentaccess#dup()","object#duplicable?()","activesupport::timewithzone#duration_of_variable_length?()","actiondispatch::response#each()","activemodel::errors#each()","rails::paths::path#each()","activemodel::deprecatederrormethods#each_full()","enumerable#each_with_object()","activesupport::autoload#eager_autoload()","activesupport::autoload::eager_autoload!()","activerecord::querymethods#eager_load()","rails::paths::root#eager_load()","rails::engine#eager_load!()","rails::railtie#eager_load!()","rails::engine::configuration#eager_load_paths()","activerecord::relation#eager_loading?()","activesupport::okjson#eat()","actionview::helpers::formhelper#email_field()","actionview::helpers::formtaghelper#email_field_tag()","actionview::helpers::formbuilder#emitted_hidden_id?()","activemodel::errors#empty?()","activerecord::relation#empty?()","activerecord::connectionadapters::databasestatements#empty_insert_statement_value()","activerecord::connectionadapters::sqliteadapter#empty_insert_statement_value()","actioncontroller::responder#empty_json_resource()","actioncontroller::responder#empty_resource()","activerecord::connectionadapters::mysqladapter::emulate_booleans()","kernel#enable_warnings()","actiondispatch::http::parameterfilter#enabled?()","activesupport::json::encode()","activesupport::json::encoding::encoder#encode()","activesupport::okjson#encode()","activesupport::base64::encode64()","activesupport::base64::encode64s()","actioncontroller::httpauthentication::basic#encode_credentials()","actiondispatch::http::uploadedfile#encode_filename()","actiondispatch::http::parameters#encode_params()","activesupport::timewithzone#encode_with()","bigdecimal#encode_with()","activerecord::connectionadapters::postgresqladapter#encoding()","rails::application::configuration#encoding=()","string#encoding_aware?()","activesupport::messageencryptor#encrypt()","activesupport::messageencryptor#encrypt_and_sign()","activesupport::callbacks::callback#end()","activesupport::xmlmini_nokogirisax::hashbuilder#end_document()","activesupport::xmlmini_nokogirisax::hashbuilder#end_element()","date#end_of_day()","datetime#end_of_day()","time#end_of_day()","date#end_of_month()","time#end_of_month()","date#end_of_quarter()","time#end_of_quarter()","date#end_of_week()","time#end_of_week()","date#end_of_year()","time#end_of_year()","rails::application::railties#engines()","activesupport::cache::filestore#ensure_cache_path()","actionview::helpers::assettaghelper#ensure_javascript_sources!()","activerecord::base#ensure_proper_type()","actiondispatch::session::abstractstore#ensure_session_key!()","actionview::helpers::assettaghelper#ensure_stylesheet_sources!()","actionview::helpers::atomfeedhelper::atomfeedbuilder#entry()","sourceannotationextractor::enumerate()","actiondispatch::testrequest#env()","rails#env()","rails#env=()","rails::application#env_defaults()","actiondispatch::http::filterparameters#env_filter()","actiondispatch::http::headers#env_name()","activesupport::testing::performance::benchmarker#environment()","rails::generators::actions#environment()","commands::plugin#environment=()","actionview::filesystemresolver#eql?()","activerecord::base#eql?()","activesupport::timewithzone#eql?()","fixtures#erb_render()","actionview::template::handlers::erb::erb_trim_mode()","activesupport::xmlmini_nokogirisax::hashbuilder#error()","actiondispatch::testresponse#error?()","actionview::helpers::activemodelinstancetag#error_message()","actionview::helpers::activemodelinstancetag#error_wrapping()","activemodel::validations#errors()","rails::generators::activemodel#errors()","activesupport::json::encoding::encoder#escape()","activerecord::connectionadapters::postgresqladapter#escape_bytea()","actionview::pathresolver#escape_entry()","actionview::helpers::javascripthelper#escape_javascript()","activesupport::cache::memcachestore#escape_key()","actionview::helpers::taghelper#escape_once()","activerecord::base::establish_connection()","activerecord::connectionadapters::connectionhandler#establish_connection()","actiondispatch::http::cache::response#etag()","actiondispatch::http::cache::response#etag=()","actiondispatch::http::cache::response#etag?()","actiondispatch::http::cache::request#etag_matches?()","numeric#exabyte()","numeric#exabytes()","activerecord::spawnmethods#except()","hash#except()","hash#except!()","actionview::helpers::texthelper#excerpt()","enumerable#exclude?()","string#exclude?()","rails::scriptrailsloader::exec_script_rails!()","activerecord::connectionadapters::databasestatements#execute()","activerecord::connectionadapters::postgresqladapter#execute()","activerecord::base#execute_callstack_for_multiparameter_attributes()","activesupport::execute_hook()","activesupport::fileupdatechecker#execute_if_updated()","activesupport::cache::store#exist?()","actiondispatch::session::abstractstore#exists?()","actiondispatch::session::abstractstore::sessionhash#exists?()","actionview::lookupcontext::viewpaths#exists?()","activerecord::findermethods#exists?()","activerecord::base#expand_attribute_names_for_aggregates()","activesupport::cache::expand_cache_key()","activerecord::base#expand_hash_conditions_for_aggregates()","actionview::helpers::assettaghelper#expand_javascript_sources()","actionview::helpers::assettaghelper#expand_stylesheet_sources()","actioncontroller::caching::actions#expire_action()","actioncontroller::caching::fragments#expire_fragment()","actioncontroller::caching::pages#expire_page()","actioncontroller::caching::pages::classmethods#expire_page()","activesupport::cache::entry#expired?()","activesupport::cache::entry#expires_at()","activesupport::cache::entry#expires_at=()","actioncontroller::conditionalget#expires_in()","actioncontroller::conditionalget#expires_now()","activemodel::callbacks::extended()","activesupport::concern::extended()","activesupport::testing::declarative::extended()","activerecord::querymethods#extending()","railsenvironment#externals()","railsenvironment#externals=()","rails::generators::actions#extify()","actionview::helpers::formtaghelper#extra_tags_for_form()","hash#extract!()","sourceannotationextractor#extract_annotations_from()","activesupport::deprecation#extract_callstack()","activerecord::base#extract_callstack_for_multiparameter_attributes()","activerecord::connectionadapters::column#extract_default()","actionview::pathresolver#extract_handler_and_format()","activerecord::connectionadapters::column#extract_limit()","activerecord::connectionadapters::postgresqlcolumn#extract_limit()","array#extract_options!()","activerecord::connectionadapters::postgresqladapter#extract_pg_identifier_from_name()","activerecord::connectionadapters::column#extract_precision()","activerecord::connectionadapters::postgresqlcolumn#extract_precision()","actiondispatch::routing::polymorphicroutes#extract_record()","activerecord::connectionadapters::column#extract_scale()","activerecord::connectionadapters::postgresqlcolumn#extract_scale()","actionview::helpers::formoptionshelper#extract_selected_and_disabled()","actiondispatch::session::abstractstore#extract_session_id()","actiondispatch::session::cookiestore#extract_session_id()","activerecord::connectionadapters::postgresqlcolumn::extract_value_from_default()","actionview::helpers::formoptionshelper#extract_values_from_collection()","activesupport::hashwithindifferentaccess#extractable_options?()","activesupport::hashwithindifferentaccess#extractable_options?()","hash#extractable_options?()","activerecord::connectionadapters::column#fallback_string_to_date()","activerecord::connectionadapters::column#fallback_string_to_time()","rails::generators::fallbacks()","activesupport::okjson#falsetok()","activerecord::connectionadapters::column#fast_string_to_date()","activerecord::connectionadapters::column#fast_string_to_time()","actionview::helpers::assettaghelper#favicon_link_tag()","activesupport::cache::store#fetch()","activesupport::hashwithindifferentaccess#fetch()","activesupport::hashwithindifferentaccess#fetch()","recursivehttpfetcher#fetch()","recursivehttpfetcher#fetch_dir()","activerecord::attributemethods::dirty#field_changed?()","actionview::helpers::formtaghelper#field_set_tag()","rails::generators::generatedattribute#field_type()","actionview::helpers::formbuilder#fields_for()","actionview::helpers::formhelper#fields_for()","actionview::helpers::formbuilder#fields_for_nested_model()","actionview::helpers::formbuilder#fields_for_with_nested_attributes()","array#fifth()","actiondispatch::static#file_exist?()","actionview::helpers::formhelper#file_field()","actionview::helpers::formtaghelper#file_field_tag()","rails::generators::namedbase#file_path()","activesupport::cache::filestore#file_path_key()","activesupport::multibyte::unicode::unicodedatabase::filename()","actiondispatch::http::parameterfilter#filter()","activesupport::backtracecleaner#filter()","rails::paths::root#filter_by()","actiondispatch::http::filterparameters#filtered_env()","activemodel::validations::numericalityvalidator#filtered_options()","actiondispatch::http::filterparameters#filtered_parameters()","actiondispatch::http::filterparameters#filtered_path()","actiondispatch::http::filterparameters#filtered_query_string()","actionview::lookupcontext::viewpaths#find()","activerecord::findermethods#find()","plugin::find()","rails::generators::activemodel::find()","railsenvironment::find()","sourceannotationextractor#find()","actionview::lookupcontext::viewpaths#find_all()","actionview::resolver#find_all()","actiondispatch::assertions::tagassertions#find_all_tag()","activerecord::associationpreload::classmethods#find_associated_records()","activerecord::findermethods#find_by_attributes()","activerecord::sessionstore::session#find_by_session_id()","activerecord::sessionstore::session::find_by_session_id()","activerecord::sessionstore::sqlbypass#find_by_session_id()","activerecord::base#find_by_sql()","rails::dbconsole#find_cmd()","activerecord::findermethods#find_first()","sourceannotationextractor#find_in()","activerecord::findermethods#find_last()","actionview::layouts#find_layout()","activerecord::findermethods#find_one()","activerecord::findermethods#find_or_instantiator_by_attributes()","activerecord::base#find_parameter_position()","rails::engine#find_root_with_flag()","activerecord::sessionstore#find_session()","activerecord::findermethods#find_some()","activerecord::base#find_sti_class()","actiondispatch::assertions::tagassertions#find_tag()","activerecord::associations::hasonethroughassociation#find_target()","actionview::lookupcontext::viewpaths#find_template()","actionview::partials::partialrenderer#find_template()","actionview::pathresolver#find_templates()","actionview::resolver#find_templates()","activesupport::timezone::find_tzinfo()","activerecord::findermethods#find_with_associations()","activerecord::findermethods#find_with_ids()","activerecord::dynamicfindermatch#finder?()","activerecord::findermethods#first()","string#first()","actiondispatch::testprocess#fixture_file_upload()","fixtures::fixture_is_cached?()","actiondispatch::request#flash()","actiondispatch::testprocess#flash()","actiondispatch::testresponse::deprecatedhelpers#flash()","activesupport::bufferedlogger#flush()","activesupport::logsubscriber::testhelper::mocklogger#flush()","activesupport::logsubscriber#flush_all!()","activesupport::memoizable::instancemethods#flush_cache()","activesupport::logsubscriber#flushable_loggers()","actiondispatch::integration::requesthelpers#follow_redirect!()","html::selector#for_class()","html::selector#for_id()","activesupport::testcase::for_tag()","activesupport::inflector#foreign_key()","string#foreign_key()","actiondispatch::request#forgery_whitelisted?()","activesupport::testing::isolation::forking_env?()","actioncontroller::requestforgeryprotection#form_authenticity_param()","actioncontroller::requestforgeryprotection#form_authenticity_token()","actiondispatch::request#form_data?()","actionview::helpers::formhelper#form_for()","actionview::helpers::formtaghelper#form_tag()","actionview::helpers::formtaghelper#form_tag_html()","actionview::helpers::formtaghelper#form_tag_in_block()","actiondispatch::http::mimenegotiation#format()","activesupport::testing::performance::metrics::gcruns#format()","activesupport::testing::performance::metrics::gctime#format()","activesupport::testing::performance::metrics::memory#format()","activesupport::testing::performance::metrics::objects#format()","activesupport::testing::performance::metrics::time#format()","erb::generators::mailergenerator#format()","actiondispatch::http::mimenegotiation#format=()","actiondispatch::http::mimenegotiation#formats()","actionview::lookupcontext::details#formats=()","activesupport::timewithzone#formatted_offset()","activesupport::timezone#formatted_offset()","datetime#formatted_offset()","time#formatted_offset()","numeric#fortnight()","numeric#fortnights()","array#forty_two()","array#fourth()","actioncontroller::caching::fragments#fragment_cache_key()","actioncontroller::caching::fragments#fragment_exist?()","actiondispatch::showexceptions#framework_trace()","rails::info#framework_version()","rails::configuration::deprecated#frameworks()","rails::info#frameworks()","rails::configuration::deprecated#frameworks=()","activerecord::base#freeze()","activesupport::timewithzone#freeze()","rails::generators::actions#freeze!()","activesupport::memoizable::instancemethods#freeze_with_memoizable()","actiondispatch::http::cache::request#fresh?()","actioncontroller::conditionalget#fresh_when()","activerecord::querymethods#from()","array#from()","string#from()","activemodel::serializers::json#from_json()","activesupport::duration#from_now()","numeric#from_now()","actionview::logsubscriber#from_rails_root()","actiondispatch::testresponse::from_response()","hash#from_trusted_xml()","activemodel::serializers::xml#from_xml()","hash#from_xml()","activerecord::base#frozen?()","activemodel::errors#full_messages()","activesupport::testing::performance#full_test_name()","actiondispatch::showexceptions#full_trace()","actiondispatch::request#fullpath()","activesupport::timewithzone#future?()","date#future?()","datetime#future?()","time#future?()","activesupport::multibyte::chars#g_length()","activesupport::multibyte::unicode#g_pack()","activesupport::multibyte::unicode#g_unpack()","rails::engine::configuration#gem()","rails::generators::actions#gem()","activesupport::messageverifier#generate()","rails::generators::actions#generate()","activesupport::messageverifier#generate_digest()","activemodel::errors#generate_message()","abstractcontroller::collector::generate_method_for_mime()","actiondispatch::session::abstractstore#generate_sid()","rails::generators::testcase#generator()","rails::generators::generatorgenerator#generator_dir()","rails::generators::base::generator_name()","rails::railtie#generators()","rails::railtie::configuration#generators()","actioncontroller::testcase::behavior#get()","actiondispatch::integration::requesthelpers#get()","actiondispatch::routing::mapper::httphelpers#get()","activemodel::errors#get()","activesupport::dependencies::reference#get()","actiondispatch::request#get?()","actionview::helpers::texthelper#get_cycle()","activesupport::timewithzone#get_period_and_ensure_valid_local_time()","actiondispatch::session::abstractstore#get_session()","actiondispatch::session::memcachestore#get_session()","activerecord::sessionstore#get_session()","activerecord::sessionstore#get_session_model()","actiondispatch::integration::requesthelpers#get_via_redirect()","time#get_zone()","activesupport::timewithzone#getgm()","activesupport::timewithzone#getlocal()","activesupport::timewithzone#getutc()","datetime#getutc()","numeric#gigabyte()","numeric#gigabytes()","rails::generators::actions#git()","plugin#git_url?()","activesupport::timewithzone#gmt?()","activesupport::timewithzone#gmt_offset()","activesupport::timewithzone#gmtime()","activesupport::timewithzone#gmtoff()","activerecord::querymethods#group()","enumerable#group_by()","actionview::helpers::formbuilder#grouped_collection_select()","actionview::helpers::formoptionshelper#grouped_collection_select()","actionview::helpers::formoptionshelper#grouped_options_for_select()","activemodel::attributemethods#guard_private_attribute_method!()","plugin#guess_name()","erb::util#h()","erb::util::h()","actiondispatch::http::cache::response#handle_conditional_get!()","actioncontroller::requestforgeryprotection#handle_unverified_request()","activesupport::rescuable#handler_for_rescue()","actionview::template::handlers::erb::handles_encoding?()","activerecord::associations::classmethods#has_and_belongs_to_many()","activerecord::base#has_attribute?()","activerecord::connectionadapters::column#has_default?()","actioncontroller::responder#has_empty_resource_definition?()","actioncontroller::responder#has_errors?()","actiondispatch::testresponse::deprecatedhelpers#has_flash?()","actiondispatch::testresponse::deprecatedhelpers#has_flash_object?()","actiondispatch::testresponse::deprecatedhelpers#has_flash_with_contents?()","actiondispatch::session::abstractstore::sessionhash#has_key?()","activesupport::hashwithindifferentaccess#has_key?()","activesupport::hashwithindifferentaccess#has_key?()","activerecord::associations::classmethods#has_many()","activerecord::associations::classmethods#has_one()","fixtures#has_primary_key_column?()","actiondispatch::session::abstractstore::optionshash#has_session_id?()","actiondispatch::testresponse::deprecatedhelpers#has_session_object?()","actiondispatch::testresponse::deprecatedhelpers#has_template_object?()","activerecord::base#hash()","activesupport::timewithzone#hash()","activerecord::querymethods#having()","actioncontroller::head#head()","actioncontroller::testcase::behavior#head()","actiondispatch::integration::requesthelpers#head()","actiondispatch::request#head?()","actiondispatch::request#headers()","actionmailer::base#headers()","actionmailer::base::deprecatedheaderproxy#headers()","actioncontroller::testing#headers=()","rails::generators::help()","abstractcontroller::helpers::classmethods#helper()","object#helper()","actioncontroller::helpers::classmethods#helper_attr()","actionview::testcase::behavior::classmethods#helper_class()","abstractcontroller::helpers::classmethods#helper_method()","actionview::testcase::behavior::classmethods#helper_method()","actioncontroller::helpers::classmethods#helpers()","actioncontroller::helpers::classmethods#helpers_dir()","actioncontroller::helpers::classmethods#helpers_dir=()","activesupport::securerandom::hex()","activesupport::okjson#hexdec4()","abstractcontroller::base#hidden_actions()","actionview::helpers::formbuilder#hidden_field()","actionview::helpers::formhelper#hidden_field()","actionview::helpers::formtaghelper#hidden_field_tag()","rails::generators::hidden_namespaces()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#hide()","actioncontroller::hideactions::classmethods#hide_action()","rails::generators#hide_namespaces()","actionview::helpers::texthelper#highlight()","rails::generators::base::hook_for()","actiondispatch::http::url#host()","actiondispatch::integration::session#host()","actiondispatch::integration::session#host!()","actiondispatch::testrequest#host=()","actiondispatch::http::url#host_with_port()","numeric#hour()","numeric#hours()","mime::type#html?()","actiondispatch::assertions::tagassertions#html_document()","erb::util#html_escape()","erb::util::html_escape()","actionview::helpers::formtaghelper#html_options_for_form()","activesupport::safebuffer#html_safe?()","fixnum#html_safe?()","object#html_safe?()","actionview::helpers::translationhelper#html_safe_translation_key?()","activesupport::timewithzone#httpdate()","actiondispatch::integration::session#https!()","actiondispatch::integration::session#https?()","activemodel::name#human()","activesupport::inflector::inflections#human()","activemodel::translation#human_attribute_name()","activemodel::translation#human_name()","activerecord::connectionadapters::column#human_name()","rails::generators::generatedattribute#human_name()","rails::generators::namedbase#human_name()","activesupport::inflector#humanize()","string#humanize()","activemodel::translation#i18n_scope()","rails::generators::namedbase#i18n_scope()","nilclass#id()","actiondispatch::routing::mapper::resources#id_constraint()","actiondispatch::routing::mapper::resources#id_constraint?()","actionview::template#identifier_method_name()","fixtures::identify()","activerecord::connectionadapters::abstractadapter#ids_in_list_limit()","actiondispatch::http::cache::request#if_modified_since()","actiondispatch::testrequest#if_modified_since=()","actiondispatch::http::cache::request#if_none_match()","actiondispatch::testrequest#if_none_match=()","actionview::helpers::assettaghelper#image_path()","actionview::helpers::formtaghelper#image_submit_tag()","actionview::helpers::assettaghelper#image_tag()","date#in()","datetime#in()","time#in()","activesupport::multibyte::unicode#in_char_class?()","activerecord::connectionadapters::databaselimits#in_clause_length()","array#in_groups()","array#in_groups_of()","actiondispatch::routing::routeset#in_memory_controller_namespaces()","activerecord::associationpreload::classmethods#in_or_equals_for_ids()","rails::scriptrailsloader::in_rails_application?()","rails::scriptrailsloader::in_rails_application_subdirectory?()","activesupport::timewithzone#in_time_zone()","datetime#in_time_zone()","time#in_time_zone()","activemodel::massassignmentsecurity::permissionset#include?()","activesupport::hashwithindifferentaccess#include?()","activesupport::hashwithindifferentaccess#include?()","activesupport::multibyte::chars#include?()","i18n::railtie::include_fallbacks_module()","actionview::testcase::behavior::classmethods#include_helper_modules!()","range#include_with_range?()","actioncontroller::testcase::raiseactionexceptions::included()","actioncontroller::urlwriter::included()","actionview::template::handlers::compilable::included()","activerecord::connectionadapters::querycache#included()","activesupport::concern#included()","activesupport::memoizable::instancemethods::included()","activesupport::testing::isolation::included()","activesupport::testing::performance::included()","rails::application::configurable::included()","rails::engine::configurable::included()","rails::initializable::included()","rails::railtie::configurable::included()","activerecord::querymethods#includes()","activerecord::persistence#increment()","activesupport::cache::filestore#increment()","activesupport::cache::memorystore#increment()","activesupport::cache::store#increment()","activerecord::persistence#increment!()","activerecord::countercache#increment_counter()","activerecord::connectionadapters::abstractadapter#increment_open_transactions()","actioncontroller::middleware#index()","activerecord::connectionadapters::table#index()","activesupport::multibyte::chars#index()","enumerable#index_by()","activerecord::connectionadapters::schemastatements#index_exists?()","activerecord::connectionadapters::table#index_exists?()","rails::generators::namedbase#index_helper()","activerecord::connectionadapters::schemastatements#index_name_exists?()","activerecord::connectionadapters::databaselimits#index_name_length()","activerecord::connectionadapters::postgresqladapter#index_name_length()","activerecord::connectionadapters::postgresqladapter#indexes()","activerecord::connectionadapters::databaselimits#indexes_per_table()","activesupport::inflector#inflections()","plugin#info()","activerecord::base#inheritance_column()","fixtures#inheritance_column_name()","abstractcontroller::helpers::classmethods#inherited()","abstractcontroller::layouts::classmethods#inherited()","actioncontroller::base::inherited()","actioncontroller::hideactions::classmethods#inherited()","actioncontroller::metal::inherited()","activemodel::observing::classmethods#inherited()","activemodel::validations::classmethods#inherited()","activesupport::descendantstracker#inherited()","rails::application#inherited()","rails::application::configurable::classmethods#inherited()","rails::engine#inherited()","rails::engine::configurable::classmethods#inherited()","rails::plugin::inherited()","rails::railtie#inherited()","rails::railtie::configurable::classmethods#inherited()","i18n::railtie::init_fallbacks()","activerecord::base#init_with()","rails#initialize!()","rails::application#initialize!()","rails::application#initialize_console()","activerecord::base#initialize_copy()","activerecord::relation#initialize_copy()","activesupport::safebuffer#initialize_copy()","rails::application#initialize_generators()","i18n::railtie::initialize_i18n()","activerecord::connectionadapters::schemastatements#initialize_schema_migrations_table()","rails::application#initialize_tasks()","actioncontroller::compatibility#initialize_template_class()","rails#initialized=()","rails#initialized?()","rails::generators::actions#initializer()","rails::initializable::classmethods#initializer()","rails::application#initializers()","rails::initializable#initializers()","rails::initializable::classmethods#initializers()","rails::initializable::classmethods#initializers_chain()","rails::initializable::classmethods#initializers_for()","actiondispatch::middlewarestack#insert()","activerecord::connectionadapters::databasestatements#insert()","activerecord::connectionadapters::postgresqladapter#insert()","activesupport::multibyte::chars#insert()","actiondispatch::middlewarestack#insert_after()","actiondispatch::middlewarestack#insert_before()","activerecord::connectionadapters::databasestatements#insert_fixture()","fixtures#insert_fixtures()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#insert_html()","activerecord::connectionadapters::databasestatements#insert_sql()","actiondispatch::middlewarestack::middleware#inspect()","actiondispatch::session::abstractstore::sessionhash#inspect()","actionview::template#inspect()","activerecord::base#inspect()","activerecord::relation#inspect()","activesupport::timewithzone#inspect()","date#inspect()","datetime#inspect()","plugin#install()","railsenvironment#install()","plugin#install_using_checkout()","plugin#install_using_export()","plugin#install_using_externals()","plugin#install_using_git()","plugin#install_using_http()","plugin#installed?()","activesupport::inflector::inflections::instance()","rails::application#instance()","activemodel::attributemethods::classmethods#instance_method_already_implemented?()","activerecord::attributemethods::classmethods#instance_method_already_implemented?()","module#instance_method_names()","object#instance_variable_names()","activerecord::base#instantiate()","fixtures::instantiate_all_loaded_fixtures()","fixtures::instantiate_fixtures()","activemodel::observing::classmethods#instantiate_observers()","activerecord::base#instantiate_time_object()","activerecord::dynamicfindermatch#instantiator?()","activesupport::cache::store#instrument()","activesupport::cache::store::instrument()","activesupport::notifications#instrument()","activesupport::notifications::instrumenter#instrument()","activesupport::cache::store::instrument=()","actioncontroller::caching::fragments#instrument_fragment_cache()","actioncontroller::caching::pages::classmethods#instrument_page_cache()","activesupport::notifications#instrumenter()","abstractcontroller::base#internal_methods()","activerecord::base#interpolate_and_sanitize_sql()","activerecord::base#interpolate_sanitized_sql()","activemodel::deprecatederrormethods#invalid?()","activemodel::validations#invalid?()","rails::generators::invoke()","actiondispatch::request#ip()","activesupport::inflector::inflections#irregular()","activesupport::timewithzone#is_a?()","loaderror#is_missing?()","loaderror#is_missing?()","actionview::helpers::assettaghelper#is_uri?()","string#is_utf8?()","activesupport::timewithzone#isdst()","activesupport::timewithzone#iso8601()","erb::util::j()","erb::util#j()","actionview::helpers::assettaghelper#javascript_include_tag()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#javascript_object_for()","actionview::helpers::assettaghelper#javascript_path()","actionview::helpers::assettaghelper#javascript_src_tag()","actionview::helpers::javascripthelper#javascript_tag()","actionview::helpers::assettaghelper#join_asset_file_contents()","activerecord::associations::classmethods#join_table_name()","activerecord::querymethods#joins()","activerecord::connectionadapters::databaselimits#joins_per_query()","erb::util::json_escape()","erb::util#json_escape()","actiondispatch::flash::flashhash#keep()","actiondispatch::request#key?()","activesupport::hashwithindifferentaccess#key?()","activesupport::hashwithindifferentaccess#key?()","activesupport::cache::filestore#key_file_path()","activesupport::cache::store#key_matcher()","activesupport::okjson#keyenc()","numeric#kilobyte()","numeric#kilobytes()","activemodel::validator#kind()","activemodel::validator::kind()","activesupport::timewithzone#kind_of?()","actiondispatch::middlewarestack::middleware#klass()","activerecord::connectionadapters::column#klass()","activerecord::reflection::macroreflection#klass()","abstractcontroller::translation#l()","actionview::helpers::translationhelper#l()","actionview::helpers::formbuilder#label()","actionview::helpers::formhelper#label()","actionview::helpers::formtaghelper#label_tag()","activerecord::findermethods#last()","string#last()","actiondispatch::http::cache::response#last_modified()","actiondispatch::http::cache::response#last_modified=()","actiondispatch::http::cache::response#last_modified?()","abstractcontroller::layouts::classmethods#layout()","actiondispatch::testresponse::deprecatedhelpers#layout()","activesupport::okjson#lex()","rails::generators::actions#lib()","activerecord::querymethods#limit()","activesupport::multibyte::chars#limit()","activerecord::connectionadapters::databasestatements#limited_update_conditions()","activerecord::connectionadapters::mysqladapter#limited_update_conditions()","actionview::helpers::urlhelper#link_to()","actionview::helpers::javascripthelper#link_to_function()","actionview::helpers::urlhelper#link_to_if()","actionview::helpers::urlhelper#link_to_unless()","actionview::helpers::urlhelper#link_to_unless_current()","recursivehttpfetcher#links()","activesupport::notifications::fanout#listeners_for()","activesupport::notifications::fanout#listening?()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#literal()","activesupport::multibyte::chars#ljust()","activesupport::multibyte::unicode::unicodedatabase#load()","actiondispatch::session::abstractstore::sessionhash#load!()","rails::api::repotask#load_and_configure_sdoc()","rails::api::task#load_and_configure_sdoc()","rails::application#load_console()","rails::railtie#load_console()","rails::plugin#load_deprecated_tasks()","actiondispatch::session::abstractstore::sessionhash#load_for_read!()","actiondispatch::session::abstractstore::sessionhash#load_for_write!()","rails::application#load_generators()","rails::railtie#load_generators()","activerecord::migrationproxy#load_migration()","rails::engine::configuration#load_paths()","rails::paths::root#load_paths()","rails::engine::configuration#load_paths=()","actiondispatch::session::abstractstore#load_session()","actiondispatch::session::cookiestore#load_session()","actiondispatch::session::abstractstore::optionshash#load_session_id!()","rails::application#load_tasks()","rails::engine#load_tasks()","rails::plugin#load_tasks()","rails::railtie#load_tasks()","actiondispatch::session::abstractstore::sessionhash#loaded?()","activerecord::sessionstore::session#loaded?()","activerecord::sessionstore::sqlbypass#loaded?()","activesupport::timezone#local()","actiondispatch::request#local?()","activesupport::cache::strategy::localcache#local_cache()","module#local_constant_names()","module#local_constants()","datetime#local_offset()","time#local_time()","activesupport::timezone#local_to_utc()","actionview::lookupcontext::details#locale()","actionview::lookupcontext::details#locale=()","abstractcontroller::translation#localize()","actionview::helpers::translationhelper#localize()","actionview::testcase::behavior#locals()","activesupport::timewithzone#localtime()","actioncontroller::metal#location()","actiondispatch::response#location()","actioncontroller::metal#location=()","actiondispatch::response#location=()","activerecord::querymethods#lock()","activerecord::locking::pessimistic#lock!()","activerecord::locking::optimistic::classmethods#locking_column()","activerecord::locking::optimistic::classmethods#locking_enabled?()","activerecord::connectionadapters::abstractadapter#log()","activesupport::cache::store#log()","rails::generators::actions#log()","actiondispatch::showexceptions#log_error()","rails::configuration::deprecated#log_path()","rails::server#log_path()","rails::configuration::deprecated#log_path=()","activerecord::railties::controllerruntime::classmethods#log_process_action()","rails::railtie#log_subscriber()","activesupport::logsubscriber#log_subscribers()","activesupport::logsubscriber::testhelper::mocklogger#logged()","actioncontroller::logsubscriber#logger()","actiondispatch::paramsparser#logger()","actiondispatch::showexceptions#logger()","actionview::logsubscriber#logger()","activerecord::base::logger()","activerecord::logsubscriber#logger()","activesupport::logsubscriber#logger()","rails#logger()","rails#logger=()","activesupport::timezone#lookup()","mime::type#lookup()","activemodel::translation#lookup_ancestors()","mime::type#lookup_by_extension()","abstractcontroller::viewpaths#lookup_context()","activesupport::cache::lookup_store()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#loop_on_multiple_args()","recursivehttpfetcher#ls()","activesupport::multibyte::chars#lstrip()","actionmailer::base#mail()","actionview::helpers::urlhelper#mail_to()","actionmailer::base#mailer_name()","actionview::testcase::behavior#make_test_case_available_to_view!()","activerecord::relation#many?()","enumerable#many?()","actiondispatch::routing::mapper::httphelpers#map_method()","activerecord::autosaveassociation#mark_for_destruction()","activerecord::autosaveassociation#marked_for_destruction?()","activerecord::sessionstore::session#marshal_data!()","activesupport::timewithzone#marshal_dump()","activesupport::timewithzone#marshal_load()","activemodel::massassignmentsecurity#mass_assignment_authorizer()","actiondispatch::routing::mapper::base#match()","actiondispatch::routing::mapper::resources#match()","actiondispatch::routing::mapper::shorthand#match()","activemodel::attributemethods::classmethods::attributemethodmatcher#match()","activerecord::dynamicfindermatch::match()","activerecord::dynamicscopematch::match()","html::selector#match()","activemodel::attributemethods#match_attribute_method?()","activesupport::callbacks::callback#matches?()","module#mattr_accessor()","module#mattr_reader()","module#mattr_writer()","activerecord::calculations#maximum()","string#mb_chars()","activesupport::testing::performance::metrics::base#measure()","activesupport::testing::performance::metrics::cputime#measure()","activesupport::testing::performance::metrics::gcruns#measure()","activesupport::testing::performance::metrics::gctime#measure()","activesupport::testing::performance::metrics::memory#measure()","activesupport::testing::performance::metrics::objects#measure()","activesupport::testing::performance::metrics::processtime#measure()","activesupport::testing::performance::metrics::time#measure()","activesupport::testing::performance::metrics::walltime#measure()","activesupport::testing::performance::metrics::base#measure_mode()","actiondispatch::request#media_type()","numeric#megabyte()","numeric#megabytes()","actiondispatch::routing::mapper::resources#member()","activesupport::hashwithindifferentaccess#member?()","activesupport::hashwithindifferentaccess#member?()","activesupport::memoizable#memoize()","activesupport::memoizable::instancemethods#memoize_all()","activesupport::memoizable::memoized_ivar_for()","activerecord::spawnmethods#merge()","activesupport::hashwithindifferentaccess#merge()","activesupport::hashwithindifferentaccess#merge()","activesupport::hashwithindifferentaccess#merge!()","activesupport::hashwithindifferentaccess#merge!()","actiondispatch::routing::mapper::scoping#merge_as_scope()","actiondispatch::routing::mapper::scoping#merge_blocks_scope()","actiondispatch::routing::mapper::scoping#merge_constraints_scope()","actiondispatch::routing::mapper::scoping#merge_controller_scope()","actiondispatch::routing::mapper::scoping#merge_defaults_scope()","actiondispatch::routing::mapper::scoping#merge_module_scope()","actiondispatch::routing::mapper::scoping#merge_options_scope()","actiondispatch::routing::mapper::scoping#merge_path_names_scope()","actiondispatch::routing::mapper::scoping#merge_path_scope()","actiondispatch::routing::mapper::scoping#merge_shallow_path_scope()","actiondispatch::routing::mapper::scoping#merge_shallow_prefix_scope()","actiondispatch::routing::mapper::scoping#merge_shallow_scope()","actiondispatch::response#message()","actiondispatch::request#method()","abstractcontroller::base#method_added()","activerecord::callbacks::classmethods#method_added()","abstractcontroller::base#method_for_action()","actioncontroller::compatibility#method_for_action()","actioncontroller::hideactions#method_for_action()","actioncontroller::implicitrender#method_for_action()","abstractcontroller::collector#method_missing()","actiondispatch::assertions::routingassertions#method_missing()","actiondispatch::integration::runner#method_missing()","actionmailer::base::deprecatedheaderproxy#method_missing()","actionview::helpers::atomfeedhelper::atombuilder#method_missing()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#method_missing()","actionview::testcase::behavior#method_missing()","activemodel::attributemethods#method_missing()","activerecord::base#method_missing()","activerecord::connectionadapters::tabledefinition#method_missing()","activerecord::migration#method_missing()","activerecord::relation#method_missing()","activesupport::logsubscriber::testhelper::mocklogger#method_missing()","activesupport::multibyte::chars#method_missing()","activesupport::orderedoptions#method_missing()","activesupport::stringinquirer#method_missing()","activesupport::testing::proxytestresult#method_missing()","activesupport::timewithzone#method_missing()","mime::type#method_missing()","nilclass#method_missing()","rails::application#method_missing()","rails::paths::pathparent#method_missing()","rails::railtie::configuration#method_missing()","activemodel::attributemethods::classmethods::attributemethodmatcher#method_missing_target()","activemodel::attributemethods::classmethods::attributemethodmatcher#method_name()","module#method_names()","actionview::helpers::prototypehelper#method_option_to_s()","actiondispatch::request#method_symbol()","activerecord::connectionadapters::column#microseconds()","actioncontroller::metal::middleware()","activesupport::cache::strategy::localcache#middleware()","rails::server#middleware()","date#midnight()","datetime#midnight()","time#midnight()","activerecord::migration#migrate()","activerecord::migrationproxy#migration()","rails::generators::migration#migration_template()","activerecord::schema::migrations_path()","actionview::template#mime_type()","activerecord::calculations#minimum()","time#minus_with_coercion()","time#minus_without_coercion()","time#minus_without_duration()","numeric#minute()","numeric#minutes()","actiondispatch::testresponse#missing?()","activemodel::attributemethods#missing_attribute()","nameerror#missing_name()","nameerror#missing_name?()","activemodel::lint::tests#model()","fixtures#model_class()","actionview::helpers::formbuilder::model_name()","activemodel::naming#model_name()","activemodel::naming::model_name_from_record_or_class()","abstractcontroller::helpers::classmethods#modules_for_helpers()","actioncontroller::helpers::classmethods#modules_for_helpers()","date#monday()","time#monday()","integer#month()","integer#months()","date#months_ago()","time#months_ago()","date#months_since()","time#months_since()","actiondispatch::routing::mapper::base#mount()","benchmark#ms()","integer#multiple_of?()","activesupport::cache::store#mute()","activesupport::callbacks::callback#name()","activesupport::testing::performance::metrics::base#name()","activesupport::timewithzone::name()","actiondispatch::routing::mapper::resources#name_for_action()","actiondispatch::http::url#named_host?()","activerecord::namedscope::classmethods#named_scope()","actiondispatch::routing::mapper::resources#namespace()","actiondispatch::routing::mapper::scoping#namespace()","rails::generators::base::namespace()","activesupport::cache::store#namespaced_key()","activerecord::connectionadapters::table#native()","activerecord::connectionadapters::tabledefinition#native()","activerecord::connectionadapters::schemastatements#native_database_types()","actioncontroller::responder#navigation_behavior()","actioncontroller::responder#navigation_location()","actiondispatch::http::mimenegotiation#negotiate_mime()","actiondispatch::routing::mapper::resources#nested()","actionview::helpers::formbuilder#nested_attributes_association?()","actionview::helpers::formbuilder#nested_child_index()","actiondispatch::routing::mapper::resources#nested_options()","activerecord::autosaveassociation#nested_records_changed_for_autosave?()","abstractcontroller::doublerendererror::new()","abstractcontroller::doublerendererror::new()","abstractcontroller::layouts::new()","abstractcontroller::rendering::new()","actioncontroller::caching::actions::actioncachepath::new()","actioncontroller::dispatcher#new()","actioncontroller::metal::new()","actioncontroller::middleware::new()","actioncontroller::middleware#new()","actioncontroller::middleware::actionmiddleware::new()","actioncontroller::responder::new()","actioncontroller::urlrewriter::new()","actiondispatch::beststandardssupport::new()","actiondispatch::callbacks::new()","actiondispatch::cookies::new()","actiondispatch::flash::new()","actiondispatch::head::new()","actiondispatch::http::cache::response::new()","actiondispatch::http::headers::new()","actiondispatch::http::parameterfilter::new()","actiondispatch::http::uploadedfile::new()","actiondispatch::integration::session::new()","actiondispatch::middlewarestack::new()","actiondispatch::middlewarestack::middleware::new()","actiondispatch::paramsparser::new()","actiondispatch::remoteip::new()","actiondispatch::remoteip::remoteipgetter::new()","actiondispatch::request::new()","actiondispatch::rescue::new()","actiondispatch::response::setup::new()","actiondispatch::routing::mapper::resources#new()","actiondispatch::session::abstractstore::new()","actiondispatch::session::abstractstore::optionshash::new()","actiondispatch::session::abstractstore::sessionhash::new()","actiondispatch::session::cookiestore::new()","actiondispatch::session::memcachestore::new()","actiondispatch::showexceptions::new()","actiondispatch::static::new()","actiondispatch::testrequest::new()","actiondispatch::testrequest::new()","actionmailer::base::new()","actionmailer::base::deprecatedheaderproxy::new()","actionview::filesystemresolver::new()","actionview::fixtureresolver::new()","actionview::helpers::atomfeedhelper::atombuilder::new()","actionview::helpers::atomfeedhelper::atomfeedbuilder::new()","actionview::helpers::formbuilder::new()","actionview::helpers::numberhelper::invalidnumbererror::new()","actionview::outputbuffer::new()","actionview::partials::partialrenderer::new()","actionview::resolver::new()","actionview::template::new()","actionview::testcase::behavior::classmethods#new()","actionview::testcase::testcontroller::new()","activemodel::attributemethods::classmethods::attributemethodmatcher::new()","activemodel::blockvalidator::new()","activemodel::eachvalidator::new()","activemodel::errors::new()","activemodel::name::new()","activemodel::observer::new()","activemodel::validations::acceptancevalidator::new()","activemodel::validations::lengthvalidator::new()","activemodel::validations::numericalityvalidator::new()","activemodel::validator::new()","activerecord::attributeassignmenterror::new()","activerecord::base::new()","activerecord::connectionadapters::column::new()","activerecord::connectionadapters::connectionhandler::new()","activerecord::connectionadapters::connectionpool::new()","activerecord::connectionadapters::mysqladapter::new()","activerecord::connectionadapters::postgresqladapter::new()","activerecord::connectionadapters::sqliteadapter::new()","activerecord::connectionadapters::sqliteadapter::version::new()","activerecord::connectionadapters::table::new()","activerecord::connectionadapters::tabledefinition::new()","activerecord::dynamicfindermatch::new()","activerecord::dynamicscopematch::new()","activerecord::logsubscriber::new()","activerecord::multiparameterassignmenterrors::new()","activerecord::observer::new()","activerecord::predicatebuilder::new()","activerecord::querycache::new()","activerecord::recordinvalid::new()","activerecord::reflection::macroreflection::new()","activerecord::relation::new()","activerecord::relation#new()","activerecord::sessionstore::session::new()","activerecord::sessionstore::sqlbypass::new()","activerecord::validations::uniquenessvalidator::new()","activerecord::wrappeddatabaseexception::new()","activesupport::backtracecleaner::new()","activesupport::bufferedlogger::new()","activesupport::cache::compressedmemcachestore::new()","activesupport::cache::entry::new()","activesupport::cache::filestore::new()","activesupport::cache::memcachestore::new()","activesupport::cache::memorystore::new()","activesupport::cache::store::new()","activesupport::cache::strategy::localcache::localstore::new()","activesupport::cache::synchronizedmemorystore::new()","activesupport::callbacks::callback::new()","activesupport::callbacks::callbackchain::new()","activesupport::dependencies::reference::new()","activesupport::dependencies::watchstack::new()","activesupport::fileupdatechecker::new()","activesupport::gzip::stream::new()","activesupport::hashwithindifferentaccess::new()","activesupport::hashwithindifferentaccess::new()","activesupport::inflector::inflections::new()","activesupport::inheritableoptions::new()","activesupport::json::encoding::encoder::new()","activesupport::logsubscriber::testhelper::mocklogger::new()","activesupport::messageencryptor::new()","activesupport::messageverifier::new()","activesupport::multibyte::chars::new()","activesupport::multibyte::unicode::unicodedatabase::new()","activesupport::notifications::event::new()","activesupport::notifications::fanout::new()","activesupport::notifications::instrumenter::new()","activesupport::safebuffer::new()","activesupport::safebuffer::safeconcaterror::new()","activesupport::testing::performance::metrics::base::new()","activesupport::testing::performance::metrics::cputime::new()","activesupport::testing::performance::performer::new()","activesupport::testing::performance::profiler::new()","activesupport::testing::proxytestresult::new()","activesupport::testing::remoteerror::new()","activesupport::timewithzone::new()","activesupport::timezone::new()","activesupport::timezone#new()","arjdbcmysql::error::new()","commands::info::new()","commands::install::new()","commands::plugin::new()","commands::remove::new()","fixtures::new()","html::selector::new()","mime::type::new()","plugin::new()","rails::api::task::new()","rails::application::configuration::new()","rails::application::railties::new()","rails::backtracecleaner::new()","rails::console::new()","rails::dbconsole::new()","rails::engine::configuration::new()","rails::generators::activemodel::new()","rails::generators::generatedattribute::new()","rails::initializable::initializer::new()","rails::paths::path::new()","rails::paths::root::new()","rails::plugin::new()","rails::rack::debugger::new()","rails::rack::logtailer::new()","rails::rack::logger::new()","rails::railtie::configuration::new()","rails::server::new()","railsenvironment::new()","recursivehttpfetcher::new()","sourceannotationextractor::new()","activesupport::messageencryptor#new_cipher()","activerecord::connectionadapters::connectionpool#new_connection()","activesupport::dependencies::watchstack#new_constants()","activerecord::connectionadapters::column#new_date()","activesupport::hashwithindifferentaccess::new_from_hash_copying_default()","activesupport::hashwithindifferentaccess::new_from_hash_copying_default()","activerecord::persistence#new_record?()","object#new_session()","activerecord::connectionadapters::column#new_time()","html::selector#next_element()","activesupport::callbacks::callback#next_id()","date#next_month()","time#next_month()","html::selector#next_selector()","date#next_week()","time#next_week()","date#next_year()","time#next_year()","activesupport::okjson#nibble()","rails::generators::no_color!()","activesupport::backtracecleaner#noise()","actiondispatch::http::cache::response#nonempty_ok_response?()","actiondispatch::middlewarestack::middleware#normalize()","activesupport::multibyte::chars#normalize()","activesupport::multibyte::unicode#normalize()","actioncontroller::caching::actions::actioncachepath#normalize!()","actiondispatch::assertions::responseassertions#normalize_argument_to_redirection()","actiondispatch::routing::mapper::normalize_name()","activesupport::callbacks::callback#normalize_options!()","actiondispatch::http::parameters#normalize_parameters()","actiondispatch::http::upload#normalize_parameters()","actiondispatch::routing::mapper::normalize_path()","actiondispatch::http::cache::request#not_modified?()","actiondispatch::flash::flashhash#notice()","actiondispatch::flash::flashhash#notice=()","activesupport::notifications#notifier()","activemodel::observing#notify_observers()","activemodel::observing::classmethods#notify_observers()","actiondispatch::flash::flashhash#now()","activesupport::timezone#now()","html::selector#nth_child()","activerecord::associations::classmethods#nullify_has_many_dependencies()","activesupport::okjson#nulltok()","activerecord::connectionadapters::column#number?()","actionview::helpers::formhelper#number_field()","actionview::helpers::formtaghelper#number_field_tag()","actionview::helpers::numberhelper#number_to_currency()","actionview::helpers::numberhelper#number_to_human()","actionview::helpers::numberhelper#number_to_human_size()","actionview::helpers::numberhelper#number_to_percentage()","actionview::helpers::numberhelper#number_to_phone()","actionview::helpers::numberhelper#number_with_delimiter()","actionview::helpers::numberhelper#number_with_precision()","activesupport::okjson#numenc()","activesupport::okjson#numtok()","actionview::helpers::activemodelinstancetag#object()","activerecord::base#object_from_yaml()","actionview::helpers::activemodelinstancetag#object_has_errors?()","actionview::helpers::formbuilder#objectify_options()","activesupport::okjson#objenc()","activesupport::okjson#objparse()","activemodel::observer#observe()","activemodel::observer#observed_class()","activemodel::observer#observed_classes()","activerecord::observer#observed_descendants()","activemodel::observing::classmethods#observers()","activemodel::observing::classmethods#observers=()","activerecord::logsubscriber#odd?()","activerecord::querymethods#offset()","activemodel::deprecatederrormethods#on()","activemodel::deprecatederrormethods#on_base()","activesupport::xmlmini_libxmlsax::hashbuilder#on_cdata_block()","activesupport::xmlmini_libxmlsax::hashbuilder#on_characters()","activesupport::xmlmini_libxmlsax::hashbuilder#on_end_document()","activesupport::xmlmini_libxmlsax::hashbuilder#on_end_element()","activesupport::on_load()","activesupport::xmlmini_libxmlsax::hashbuilder#on_start_document()","activesupport::xmlmini_libxmlsax::hashbuilder#on_start_element()","activerecord::spawnmethods#only()","html::selector#only_child()","actiondispatch::http::uploadedfile#open()","activesupport::bufferedlogger#open_log()","actiondispatch::integration::runner#open_session()","activerecord::connectionadapters::abstractadapter#open_transactions()","activerecord::calculations#operation_over_aggregate_column()","rails::server#opt_parser()","actionview::helpers::formoptionshelper#option_groups_from_collection_for_select()","actionview::helpers::formoptionshelper#option_html_attributes()","actionview::helpers::formoptionshelper#option_text_and_value()","actionview::helpers::formoptionshelper#option_value_selected?()","commands::info#options()","commands::install#options()","commands::plugin#options()","commands::remove#options()","activesupport::json::encoding::encoder#options_for()","actionview::helpers::prototypehelper#options_for_ajax()","actionview::helpers::prototypehelper#options_for_javascript()","actionview::helpers::urlhelper#options_for_javascript()","actionview::helpers::formoptionshelper#options_for_select()","actionview::helpers::formoptionshelper#options_from_collection_for_select()","activerecord::connectionadapters::schemastatements#options_include_default?()","activesupport::multibyte::chars#ord()","string#ord()","activerecord::querymethods#order()","activesupport::inflector#ordinalize()","integer#ordinalize()","activesupport::safebuffer#original_concat()","rails::generators::resourcehelpers#orm_class()","rails::generators::resourcehelpers#orm_instance()","activesupport::testing::performance::benchmarker#output_filename()","activesupport::testing::performance::performer#output_filename()","activesupport::testing::performance::profiler#output_filename()","activerecord::connectionadapters::databasestatements#outside_transaction?()","activerecord::connectionadapters::postgresqladapter#outside_transaction?()","range#overlaps?()","actiondispatch::routing::mapper::scoping#override_keys()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#page()","actioncontroller::caching::pages::classmethods#page_cache_file()","actioncontroller::caching::pages::classmethods#page_cache_path()","activesupport::okjson#pairparse()","actiondispatch::http::filterparameters#parameter_filter()","actiondispatch::http::filterparameters#parameter_filter_for()","actiondispatch::assertions::responseassertions#parameterize()","activesupport::inflector#parameterize()","string#parameterize()","actiondispatch::http::parameters#parameters()","actioncontroller::metal#params()","actiondispatch::http::parameters#params()","actioncontroller::metal#params=()","module#parent()","module#parent_name()","activesupport::notifications::event#parent_of?()","module#parents()","activesupport::timezone#parse()","activesupport::xmlmini_libxmlsax#parse()","activesupport::xmlmini_nokogirisax#parse()","mime::type#parse()","commands::info#parse!()","commands::install#parse!()","commands::plugin#parse!()","commands::plugin::parse!()","commands::remove#parse!()","rails::server::options#parse!()","actiondispatch::paramsparser#parse_formatted_parameters()","actiondispatch::request#parse_query()","activemodel::validations::numericalityvalidator#parse_raw_value_as_a_number()","activemodel::validations::numericalityvalidator#parse_raw_value_as_an_integer()","fixtures#parse_yaml_string()","actionview::partials::partialrenderer#partial_path()","actionview::helpers::formhelper#password_field()","actionview::helpers::formtaghelper#password_field_tag()","activesupport::timewithzone#past?()","date#past?()","datetime#past?()","time#past?()","actiondispatch::http::uploadedfile#path()","loaderror#path()","loaderror#path()","actiondispatch::testrequest#path=()","actiondispatch::routing::mapper::resources#path_for_action()","actiondispatch::http::parameters#path_parameters()","actionview::helpers::assettaghelper#path_to_audio()","actionview::helpers::assettaghelper#path_to_image()","actionview::helpers::assettaghelper#path_to_javascript()","actionview::helpers::assettaghelper#path_to_stylesheet()","actionview::helpers::assettaghelper#path_to_video()","rails::application::configuration#paths()","rails::engine::configuration#paths()","rails::paths::path#paths()","activesupport::testing::pending#pending()","activerecord::calculations#perform_calculation()","activerecord::validations#perform_validations()","actioncontroller::compatibility#performed?()","activesupport::timewithzone#period()","activesupport::timezone#period_for_local()","activesupport::timezone#period_for_utc()","activerecord::persistence#persisted?()","actiondispatch::session::cookiestore#persistent_session_id!()","numeric#petabyte()","numeric#petabytes()","actionview::helpers::formhelper#phone_field()","actionview::helpers::formtaghelper#phone_field_tag()","rails::generators::actions#plugin()","rails::generators::plugingenerator#plugin_dir()","rails::application::railties#plugins()","activemodel::naming::plural()","activesupport::inflector::inflections#plural()","rails::generators::namedbase#plural_file_name()","rails::generators::namedbase#plural_name()","rails::generators::namedbase#plural_table_name()","actionview::helpers::texthelper#pluralize()","activesupport::inflector#pluralize()","string#pluralize()","activerecord::base::pluralize_table_names()","rails::generators::namedbase#pluralize_table_names?()","actiondispatch::routing::polymorphicroutes#polymorphic_path()","actiondispatch::routing::polymorphicroutes#polymorphic_url()","recursivehttpfetcher#pop_d()","activesupport::dependencies::watchstack#pop_modules()","activerecord::base#populate_with_current_scope_attributes()","actiondispatch::http::url#port()","actiondispatch::testrequest#port=()","actiondispatch::http::url#port_string()","actioncontroller::testcase::behavior#post()","actiondispatch::integration::requesthelpers#post()","actiondispatch::routing::mapper::httphelpers#post()","actiondispatch::request#post?()","actiondispatch::integration::requesthelpers#post_via_redirect()","activerecord::connectionadapters::postgresqladapter#postgresql_version()","float#precisionless_round()","activerecord::connectionadapters::abstractadapter#prefetch_primary_key?()","actiondispatch::routing::mapper::resources#prefix_name_for_action()","activerecord::querymethods#preload()","activerecord::associationpreload::classmethods#preload_associations()","activerecord::associationpreload::classmethods#preload_belongs_to_association()","activerecord::associationpreload::classmethods#preload_has_and_belongs_to_many_association()","activerecord::associationpreload::classmethods#preload_has_many_association()","activerecord::associationpreload::classmethods#preload_has_one_association()","activerecord::associationpreload::classmethods#preload_one_association()","activerecord::associationpreload::classmethods#preload_through_records()","actiondispatch::response#prepare!()","actiondispatch::session::abstractstore#prepare!()","actioncontroller::testcase::behavior::classmethods#prepare_controller_class()","rails::generators::testcase#prepare_destination()","abstractcontroller::viewpaths#prepend_view_path()","abstractcontroller::viewpaths::classmethods#prepend_view_path()","object#presence()","object#present?()","date#prev_month()","time#prev_month()","date#prev_year()","time#prev_year()","activemodel::dirty#previous_changes()","activerecord::attributemethods::primarykey::classmethods#primary_key()","activerecord::connectionadapters::mysqladapter#primary_key()","activerecord::connectionadapters::postgresqladapter#primary_key()","activerecord::connectionadapters::tabledefinition#primary_key()","activerecord::relation#primary_key()","activerecord::attributemethods::primarykey::classmethods#primary_key=()","fixtures#primary_key_name()","activerecord::base::primary_key_prefix_type()","activesupport::memoizable::instancemethods#prime_cache()","abstractcontroller::base#process()","actioncontroller::middleware#process()","actioncontroller::templateassertions#process()","actioncontroller::testcase::behavior#process()","actiondispatch::integration::session#process()","abstractcontroller::base#process_action()","abstractcontroller::callbacks#process_action()","actioncontroller::instrumentation#process_action()","actioncontroller::logsubscriber#process_action()","actioncontroller::rescue#process_action()","html::whitelistsanitizer#process_attributes_for()","activerecord::associationpreload::classmethods#process_conditions_for_preload()","html::fullsanitizer#process_node()","html::linksanitizer#process_node()","html::sanitizer#process_node()","html::whitelistsanitizer#process_node()","actionview::base::process_view_paths()","actioncontroller::testing#process_with_new_base_test()","activesupport::testing::performance::metrics::base#profile()","rails::infocontroller#properties()","rails::info#property()","actioncontroller::requestforgeryprotection#protect_against_forgery?()","actionview::testcase::behavior#protect_against_forgery?()","actioncontroller::requestforgeryprotection::classmethods#protect_from_forgery()","activemodel::massassignmentsecurity::classmethods#protected_attributes()","actiondispatch::http::url#protocol()","activesupport::multibyte::proxy_class()","activesupport::multibyte::proxy_class=()","activesupport::cache::memorystore#prune()","activesupport::cache::memorystore#pruning?()","actiondispatch::showexceptions#public_path()","rails#public_path()","rails#public_path=()","activesupport::notifications::fanout#publish()","rails::paths::path#push()","rails::paths::root#push()","recursivehttpfetcher#push_d()","actioncontroller::testcase::behavior#put()","actiondispatch::integration::requesthelpers#put()","actiondispatch::routing::mapper::httphelpers#put()","actiondispatch::request#put?()","actiondispatch::integration::requesthelpers#put_via_redirect()","actionview::fixtureresolver#query()","actionview::nullresolver#query()","actionview::pathresolver#query()","activerecord::attributemethods::query#query_attribute()","actiondispatch::request#query_parameters()","activerecord::connectionadapters::mysqladapter#quote()","activerecord::connectionadapters::quoting#quote()","activerecord::connectionadapters::quoting#quote_column_name()","activerecord::base#quote_columns()","activerecord::connectionadapters::quoting#quote_string()","activerecord::connectionadapters::abstractadapter#quote_table_name()","activerecord::connectionadapters::postgresqladapter#quote_table_name()","activerecord::connectionadapters::quoting#quote_table_name()","activerecord::base#quote_value()","activerecord::connectionadapters::mysqladapter#quoted_columns_for_index()","activerecord::connectionadapters::schemastatements#quoted_columns_for_index()","activerecord::base#quoted_comma_pair_list()","activerecord::connectionadapters::quoting#quoted_date()","activerecord::connectionadapters::mysqladapter#quoted_false()","activerecord::connectionadapters::quoting#quoted_false()","activerecord::locking::optimistic::classmethods#quoted_locking_column()","activerecord::attributemethods::primarykey::classmethods#quoted_primary_key()","activerecord::base#quoted_table_name()","activerecord::connectionadapters::mysqladapter#quoted_true()","activerecord::connectionadapters::quoting#quoted_true()","actionview::helpers::formbuilder#radio_button()","actionview::helpers::formhelper#radio_button()","actionview::helpers::instancetagmethods::classmethods#radio_button_checked?()","actionview::helpers::formtaghelper#radio_button_tag()","actionview::helpers::assettaghelper#rails_asset_id()","plugin#rails_env()","rails::api::apptask#rails_version()","rails::api::edgetask#rails_version()","rails::api::stabletask#rails_version()","rails::railtie#railtie_name()","rails::application#railties()","rails::application::railties#railties()","activesupport::basicobject#raise()","nilclass#raise_nil_warning_for()","activerecord::sessionstore::session#raise_on_session_data_overflow!()","rails::generators::actions#rake()","rails::railtie#rake_tasks()","rails::generators::actions#rakefile()","activesupport::securerandom::random_bytes()","activesupport::securerandom::random_number()","actionview::helpers::formhelper#range_field()","actionview::helpers::formtaghelper#range_field_tag()","actionview::helpers::rawoutputhelper#raw()","activerecord::connectionadapters::abstractadapter#raw_connection()","actiondispatch::http::url#raw_host_with_port()","actiondispatch::request#raw_post()","activesupport::cache::entry#raw_value()","actiondispatch::http::uploadedfile#read()","activesupport::cache::store#read()","activerecord::attributemethods::read#read_attribute()","activerecord::attributemethods::beforetypecast#read_attribute_before_type_cast()","fixtures#read_csv_fixture_files()","activesupport::cache::filestore#read_entry()","activesupport::cache::strategy::localcache::localstore#read_entry()","fixtures#read_fixture_files()","actioncontroller::caching::fragments#read_fragment()","activesupport::cache::memcachestore#read_multi()","activesupport::cache::store#read_multi()","fixtures#read_yaml_fixture_files()","date#readable_inspect()","datetime#readable_inspect()","activerecord::aggregations::classmethods#reader_method()","rails::generators::actions#readme()","activerecord::querymethods#readonly()","activerecord::base#readonly!()","activerecord::base#readonly?()","activerecord::base#readonly_attributes()","actionmailer::base#receive()","actiondispatch::assertions::routingassertions#recognized_request_for()","activesupport::callbacks::callback#recompile!()","activerecord::connectionadapters::abstractadapter#reconnect!()","activerecord::connectionadapters::mysqladapter#reconnect!()","activerecord::connectionadapters::postgresqladapter#reconnect!()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#record()","activesupport::testing::performance::benchmarker#record()","activesupport::testing::performance::profiler#record()","actioncontroller::recordidentifier#record_key_for_dom_id()","actioncontroller::testresponse#recycle!()","module#redefine_method()","actiondispatch::routing::mapper::httphelpers#redirect()","actiondispatch::testresponse#redirect?()","actioncontroller::flash#redirect_to()","actioncontroller::instrumentation#redirect_to()","actioncontroller::logsubscriber#redirect_to()","actioncontroller::redirecting#redirect_to()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#redirect_to()","actiondispatch::testprocess#redirect_to_url()","actiondispatch::response#redirect_url()","actiondispatch::testresponse::deprecatedhelpers#redirect_url_match?()","actiondispatch::testresponse::deprecatedhelpers#redirected_to()","mime::type#ref()","rails::generators::generatedattribute#reference?()","activerecord::connectionadapters::table#references()","activerecord::connectionadapters::tabledefinition#references()","activerecord::relation#references_eager_loaded_tables?()","activerecord::reflection::classmethods#reflect_on_aggregation()","activerecord::reflection::classmethods#reflect_on_all_aggregations()","activerecord::reflection::classmethods#reflect_on_all_associations()","activerecord::reflection::classmethods#reflect_on_all_autosave_associations()","activerecord::reflection::classmethods#reflect_on_association()","activerecord::reflection::classmethods#reflections()","mime::type#register()","mime::type#register_alias()","actionmailer::base#register_interceptor()","actionmailer::base#register_interceptors()","actionview::helpers::assettaghelper::register_javascript_expansion()","actionview::helpers::assettaghelper::register_javascript_include_default()","actionmailer::base#register_observer()","actionmailer::base#register_observers()","actionview::helpers::assettaghelper::register_stylesheet_expansion()","activesupport::hashwithindifferentaccess#regular_update()","activesupport::hashwithindifferentaccess#regular_update()","activesupport::hashwithindifferentaccess#regular_writer()","activesupport::hashwithindifferentaccess#regular_writer()","activerecord::connectionadapters::connectionpool#release_connection()","activerecord::connectionadapters::abstractadapter#release_savepoint()","activerecord::connectionadapters::mysqladapter#release_savepoint()","activerecord::connectionadapters::postgresqladapter#release_savepoint()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#reload()","activerecord::autosaveassociation#reload()","activerecord::persistence#reload()","activerecord::relation#reload()","object#reload!()","rails::application#reload_routes!()","i18n::railtie::reloader()","activerecord::transactions#remember_transaction_record_state()","actiondispatch::testrequest#remote_addr=()","actiondispatch::remoteip::remoteipgetter#remote_addrs()","actionview::helpers::prototypehelper#remote_function()","actiondispatch::request#remote_ip()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#remove()","activerecord::connectionadapters::table#remove()","activerecord::connectionadapters::table#remove_belongs_to()","activerecord::connectionadapters::schemastatements#remove_column()","activerecord::connectionadapters::schemastatements#remove_columns()","activerecord::base#remove_connection()","activerecord::connectionadapters::connectionhandler#remove_connection()","activesupport::backtracecleaner#remove_filters!()","rails::generators::base::remove_hook_for()","activerecord::connectionadapters::schemastatements#remove_index()","activerecord::connectionadapters::table#remove_index()","activemodel::massassignmentsecurity::permissionset#remove_multiparameter_id()","module#remove_possible_method()","activerecord::connectionadapters::table#remove_references()","activesupport::backtracecleaner#remove_silencers!()","activerecord::connectionadapters::schemastatements#remove_timestamps()","activerecord::connectionadapters::table#remove_timestamps()","activerecord::connectionadapters::table#rename()","activerecord::connectionadapters::postgresqladapter#rename_column()","activerecord::connectionadapters::schemastatements#rename_column()","activerecord::connectionadapters::schemastatements#rename_index()","activesupport::xmlmini#rename_key()","activerecord::connectionadapters::mysqladapter#rename_table()","activerecord::connectionadapters::postgresqladapter#rename_table()","activerecord::connectionadapters::sqliteadapter#rename_table()","activerecord::connectionadapters::schemastatements#rename_table()","abstractcontroller::rendering#render()","actioncontroller::instrumentation#render()","actiondispatch::showexceptions#render()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#render()","actionview::partials::partialrenderer#render()","actionview::rendering#render()","actionview::template#render()","actionview::template::actionview::template::template::handler#render()","actionview::testcase::behavior#render()","actionview::logsubscriber#render_collection()","actionview::partials::partialrenderer#render_collection()","actiondispatch::showexceptions#render_exception()","actionview::logsubscriber#render_partial()","actionview::partials::partialrenderer#render_partial()","actionview::logsubscriber#render_template()","abstractcontroller::rendering#render_to_body()","actioncontroller::compatibility#render_to_body()","actioncontroller::renderers#render_to_body()","abstractcontroller::rendering#render_to_string()","actiondispatch::testresponse::deprecatedhelpers#rendered()","activerecord::querymethods#reorder()","activesupport::multibyte::unicode#reorder_characters()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#replace()","activerecord::associations::hasonethroughassociation#replace()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#replace_html()","activesupport::testing::performance::performer#report()","activesupport::testing::performance::profiler#report()","actioncontroller::httpauthentication::basic::controllermethods#request_http_basic_authentication()","actiondispatch::request#request_method()","actiondispatch::testrequest#request_method=()","actiondispatch::request#request_method_symbol()","actiondispatch::request#request_parameters()","actiondispatch::http::url#request_uri()","actiondispatch::testrequest#request_uri=()","actiondispatch::integration::requesthelpers#request_via_redirect()","kernel#require_library_or_gem()","activerecord::connectionadapters::abstractadapter#requires_reloading?()","activerecord::connectionadapters::sqliteadapter#requires_reloading?()","actioncontroller::compatibility#rescue_action()","actiondispatch::showexceptions#rescue_action_in_public()","actioncontroller::testcase::behavior#rescue_action_in_public!()","actiondispatch::showexceptions#rescue_action_locally()","actioncontroller::testcase::raiseactionexceptions#rescue_action_without_handler()","actiondispatch::rescue#rescue_from()","activesupport::rescuable::classmethods#rescue_from()","actioncontroller::rescue#rescue_with_handler()","activesupport::rescuable#rescue_with_handler()","activerecord::relation#reset()","actiondispatch::integration::runner#reset!()","actiondispatch::integration::session#reset!()","activerecord::connectionadapters::abstractadapter#reset!()","activerecord::connectionadapters::mysqladapter#reset!()","activemodel::dirty#reset_attribute!()","fixtures::reset_cache()","activesupport::callbacks::classmethods#reset_callbacks()","activerecord::base#reset_column_information()","activerecord::countercache#reset_counters()","actionview::helpers::texthelper#reset_cycle()","actionview::helpers::assettaghelper::reset_javascript_include_default()","activerecord::locking::optimistic::classmethods#reset_locking_column()","activerecord::logsubscriber::reset_runtime()","activerecord::connectionadapters::databasestatements#reset_sequence!()","actioncontroller::rackdelegation#reset_session()","actiondispatch::request#reset_session()","actiondispatch::routing::mapper::resources#resource()","actioncontroller::responder#resource_location()","actiondispatch::routing::mapper::resources#resource_method_scope?()","actiondispatch::routing::mapper::resources#resource_scope()","actiondispatch::routing::mapper::resources#resource_scope?()","actioncontroller::responder#resourceful?()","actiondispatch::routing::mapper::resources#resources()","actiondispatch::routing::mapper::resources#resources_path_names()","actioncontroller::responder#respond()","actioncontroller::mimeresponds::classmethods#respond_to()","actiondispatch::response#respond_to?()","activemodel::attributemethods#respond_to?()","activerecord::base#respond_to?()","activerecord::relation#respond_to?()","activesupport::multibyte::chars#respond_to?()","activesupport::timewithzone#respond_to?()","rails::application#respond_to?()","rails::railtie::configuration#respond_to?()","activemodel::attributemethods#respond_to_without_attributes?()","actioncontroller::metal#response_body=()","actioncontroller::rackdelegation#response_body=()","actiondispatch::response#response_code()","actiondispatch::assertions::selectorassertions#response_from_page_or_rjs()","actionview::testcase::behavior#response_from_page_or_rjs()","activerecord::transactions#restore_transaction_record_state()","activerecord::base#retrieve_connection()","activerecord::connectionadapters::connectionhandler#retrieve_connection_pool()","object#returning()","activesupport::multibyte::chars#reverse()","activesupport::hashwithindifferentaccess#reverse_merge()","activesupport::hashwithindifferentaccess#reverse_merge()","hash#reverse_merge()","activesupport::hashwithindifferentaccess#reverse_merge!()","activesupport::hashwithindifferentaccess#reverse_merge!()","hash#reverse_merge!()","activerecord::querymethods#reverse_order()","activerecord::querymethods#reverse_sql_order()","hash#reverse_update()","actiondispatch::http::uploadedfile#rewind()","actionview::helpers::assettaghelper#rewrite_asset_path()","actionview::helpers::assettaghelper#rewrite_extension?()","actionview::helpers::assettaghelper#rewrite_host_and_protocol()","activesupport::timewithzone#rfc2822()","activesupport::timewithzone#rfc822()","activesupport::multibyte::chars#rindex()","activesupport::multibyte::chars#rjust()","activerecord::transactions#rollback_active_record_state!()","activerecord::connectionadapters::databasestatements#rollback_db_transaction()","activerecord::connectionadapters::postgresqladapter#rollback_db_transaction()","activerecord::connectionadapters::abstractadapter#rollback_to_savepoint()","activerecord::connectionadapters::mysqladapter#rollback_to_savepoint()","activerecord::connectionadapters::postgresqladapter#rollback_to_savepoint()","activerecord::connectionadapters::databasestatements#rollback_transaction_records()","actiondispatch::routing::mapper::base#root()","actiondispatch::routing::mapper::resources#root()","rails#root()","rails::engine::configuration#root=()","float#round()","rails::generators::actions#route()","rails::generators::namedbase#route_url()","rails::application#routes()","rails::configuration::deprecated#routes_configuration_file()","rails::configuration::deprecated#routes_configuration_file=()","rails::application#routes_reloader()","actiondispatch::routing::polymorphicroutes#routing_type()","activesupport::multibyte::chars#rstrip()","activesupport::testing::isolation::minitest#run()","activesupport::testing::isolation::testunit#run()","activesupport::testing::performance#run()","activesupport::testing::performance::benchmarker#run()","activesupport::testing::performance::profiler#run()","activesupport::testing::setupandteardown::forclassictestunit#run()","activesupport::testing::setupandteardown::forminitest#run()","rails::initializable::initializer#run()","rails::initializer::run()","activesupport::callbacks#run_callbacks()","rails::generators::testcase#run_generator()","activesupport::testing::isolation::forking#run_in_isolation()","activesupport::testing::isolation::subprocess#run_in_isolation()","rails::initializable#run_initializers()","plugin#run_install_hook()","activesupport::run_load_hooks()","activesupport::testing::performance#run_profile()","activesupport::testing::performance#run_test()","plugin#run_uninstall_hook()","activemodel::validations#run_validations!()","activemodel::validations::callbacks#run_validations!()","activesupport::testing::performance#run_warmup()","activerecord::logsubscriber::runtime()","activerecord::logsubscriber::runtime=()","actionview::helpers::texthelper#safe_concat()","activesupport::safebuffer#safe_concat()","array#sample()","actionview::helpers::sanitizehelper#sanitize()","activemodel::massassignmentsecurity::sanitizer#sanitize()","html::fullsanitizer#sanitize()","html::sanitizer#sanitize()","actionview::helpers::sanitizehelper#sanitize_css()","html::whitelistsanitizer#sanitize_css()","actioncontroller::recordidentifier#sanitize_dom_id()","activemodel::massassignmentsecurity#sanitize_for_mass_assignment()","activerecord::connectionadapters::databasestatements#sanitize_limit()","activerecord::base#sanitize_sql_array()","activerecord::base#sanitize_sql_for_assignment()","activerecord::base#sanitize_sql_for_conditions()","activerecord::base#sanitize_sql_hash_for_assignment()","activerecord::base#sanitize_sql_hash_for_conditions()","actionview::helpers::formtaghelper#sanitize_to_id()","html::linksanitizer#sanitizeable?()","html::sanitizer#sanitizeable?()","activerecord::persistence#save()","activerecord::sessionstore::sqlbypass#save()","activerecord::validations#save()","rails::generators::activemodel#save()","activerecord::persistence#save!()","activerecord::validations#save!()","activerecord::autosaveassociation#save_belongs_to_association()","activerecord::autosaveassociation#save_collection_association()","activerecord::autosaveassociation#save_has_one_association()","activerecord::migration#say()","actionview::testcase::behavior#say_no_to_protect_against_forgery!()","activerecord::migration#say_with_time()","activerecord::base::schema_format()","activerecord::connectionadapters::postgresqladapter#schema_search_path()","activerecord::connectionadapters::postgresqladapter#schema_search_path=()","actiondispatch::http::url#scheme()","actiondispatch::routing::mapper::scoping#scope()","activerecord::namedscope::classmethods#scope()","actiondispatch::routing::mapper::resources#scope_action_options()","actiondispatch::routing::mapper::resources#scope_action_options?()","activerecord::relation#scope_for_create()","actionview::helpers::translationhelper#scope_key_by_partial()","actiondispatch::routing::mapper::scoping#scope_options()","activerecord::namedscope::classmethods#scoped()","activerecord::namedscope::classmethods#scopes()","activerecord::relation#scoping()","activesupport::cache::filestore#search_dir()","actionview::helpers::formhelper#search_field()","actionview::helpers::formtaghelper#search_field_tag()","array#second()","numeric#second()","numeric#seconds()","datetime#seconds_since_midnight()","time#seconds_since_midnight()","datetime#seconds_since_unix_epoch()","activesupport::timezone::seconds_to_utc_offset()","activesupport::messageverifier#secure_compare()","actionview::helpers::formbuilder#select()","actionview::helpers::formoptionshelper#select()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#select()","activerecord::connectionadapters::databasestatements#select()","activerecord::connectionadapters::mysqladapter#select()","activerecord::connectionadapters::postgresqladapter#select()","activerecord::querymethods#select()","html::selector#select()","html::tag#select()","activerecord::connectionadapters::databasestatements#select_all()","activerecord::connectionadapters::querycache#select_all()","actionview::helpers::datehelper#select_date()","actionview::helpers::datehelper#select_datetime()","actionview::helpers::datehelper#select_day()","html::selector#select_first()","activerecord::calculations#select_for_count()","actionview::helpers::datehelper#select_hour()","actionview::helpers::datehelper#select_minute()","actionview::helpers::datehelper#select_month()","activerecord::connectionadapters::databasestatements#select_one()","activerecord::connectionadapters::postgresqladapter#select_raw()","activerecord::connectionadapters::databasestatements#select_rows()","activerecord::connectionadapters::mysqladapter#select_rows()","activerecord::connectionadapters::postgresqladapter#select_rows()","activerecord::connectionadapters::sqliteadapter#select_rows()","actionview::helpers::datehelper#select_second()","actionview::helpers::formtaghelper#select_tag()","actionview::helpers::datehelper#select_time()","activerecord::connectionadapters::databasestatements#select_value()","activerecord::connectionadapters::databasestatements#select_values()","actionview::helpers::datehelper#select_year()","html::selector()","actioncontroller::implicitrender#send_action()","actioncontroller::instrumentation#send_data()","actioncontroller::logsubscriber#send_data()","actioncontroller::streaming#send_data()","actioncontroller::instrumentation#send_file()","actioncontroller::logsubscriber#send_file()","actioncontroller::streaming#send_file()","actioncontroller::streaming#send_file_headers!()","activerecord::serialization#serializable_add_includes()","activemodel::serialization#serializable_hash()","activerecord::serialization#serializable_hash()","activerecord::base#serialize()","activerecord::base#serialized_attributes()","actiondispatch::testresponse#server_error?()","actiondispatch::http::url#server_port()","actiondispatch::request#server_software()","actiondispatch::testprocess#session()","actiondispatch::testresponse::deprecatedhelpers#session()","activerecord::sessionstore::session#session_id_column()","activerecord::sessionstore::sqlbypass::session_id_column()","actiondispatch::request#session_options=()","rails::application::configuration#session_store()","activemodel::errors#set()","activerecord::associationpreload::classmethods#set_association_collection_records()","activerecord::associationpreload::classmethods#set_association_single_records()","activesupport::callbacks::classmethods#set_callback()","actiondispatch::http::cache::response#set_conditional_cache_control!()","actionmailer::base#set_content_type()","actiondispatch::session::abstractstore#set_cookie()","actiondispatch::session::cookiestore#set_cookie()","actionview::helpers::texthelper#set_cycle()","activesupport::json#set_default_backend()","rails::server#set_environment()","activerecord::base#set_inheritance_column()","activerecord::locking::optimistic::classmethods#set_locking_column()","activesupport::logsubscriber::testhelper#set_logger()","activerecord::attributemethods::primarykey::classmethods#set_primary_key()","activerecord::base#set_sequence_name()","actiondispatch::session::abstractstore#set_session()","actiondispatch::session::cookiestore#set_session()","actiondispatch::session::memcachestore#set_session()","activerecord::sessionstore#set_session()","activerecord::connectionadapters::postgresqladapter#set_standard_conforming_strings()","activerecord::base#set_table_name()","actioncontroller::testing#set_test_assigns()","actionview::partials::partialrenderer#setup()","activemodel::validations::acceptancevalidator#setup()","activemodel::validations::confirmationvalidator#setup()","activerecord::validations::uniquenessvalidator#setup()","activesupport::logsubscriber::testhelper#setup()","activesupport::testing::setupandteardown::classmethods#setup()","actioncontroller::testcase::behavior#setup_controller_request_and_response()","rails::api::task#setup_horo_variables()","activerecord::sessionstore::session#setup_sessid_compatibility!()","actioncontroller::templateassertions#setup_subscriptions()","actionview::testcase::behavior#setup_with_controller()","actiondispatch::routing::mapper::resources#shallow()","actiondispatch::routing::mapper::resources#shallow?()","actiondispatch::routing::mapper::resources#shallow_scoping?()","activesupport::cache::entry#should_compress?()","activerecord::timestamp#should_record_timestamps?()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#show()","activerecord::connectionadapters::mysqladapter#show_variable()","activesupport::backtracecleaner#silence()","activesupport::benchmarkable#silence()","activesupport::bufferedlogger#silence()","activesupport::deprecation#silence()","rails::generators::testcase#silence()","activesupport::cache::store#silence!()","kernel#silence_stream()","kernel#silence_warnings()","activesupport::bufferedlogger::silencer()","actionview::helpers::texthelper#simple_format()","html::selector#simple_selector()","activerecord::connectionadapters::column#simplified_type()","activerecord::connectionadapters::postgresqlcolumn#simplified_type()","activesupport::duration#since()","activesupport::timewithzone#since()","date#since()","datetime#since()","numeric#since()","time#since()","kernel#singleton_class()","activemodel::naming::singular()","activesupport::inflector::inflections#singular()","rails::generators::namedbase#singular_table_name()","activesupport::inflector#singularize()","string#singularize()","actiondispatch::http::uploadedfile#size()","activemodel::errors#size()","activerecord::relation#size()","activesupport::cache::entry#size()","activesupport::multibyte::chars#size()","activesupport::callbacks::classmethods#skip_callback()","actionview::lookupcontext::details#skip_default_locale!()","abstractcontroller::callbacks::classmethods#skip_filter()","activesupport::multibyte::chars#slice()","hash#slice()","hash#slice!()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#sortable()","actionview::helpers::scriptaculoushelper#sortable_element()","rails::generators::base::source_root()","activesupport::multibyte::chars#split()","array#split()","commands::plugin#split_args()","activerecord::logsubscriber#sql()","activerecord::associations::throughassociationscope#sql_conditions()","activerecord::connectionadapters::databaselimits#sql_query_length()","activerecord::connectionadapters::sqliteadapter#sqlite_version()","string#squish()","string#squish!()","actiondispatch::http::url#ssl?()","actioncontroller::conditionalget#stale?()","actiondispatch::session::abstractstore#stale_session_check!()","actiondispatch::http::url#standard_port()","actiondispatch::http::url#standard_port?()","activesupport::callbacks::callback#start()","rails::console::start()","rails::console#start()","rails::dbconsole::start()","rails::dbconsole#start()","rails::server#start()","activesupport::xmlmini_nokogirisax::hashbuilder#start_document()","activesupport::xmlmini_nokogirisax::hashbuilder#start_element()","actioncontroller::logsubscriber#start_processing()","activesupport::cache::memcachestore#stats()","actioncontroller::metal#status()","actioncontroller::metal#status=()","actiondispatch::response#status=()","actiondispatch::showexceptions#status_code()","actiondispatch::response#status_message()","range#step_with_blockless()","activerecord::base#sti_name()","activesupport::hashwithindifferentaccess#store()","activesupport::hashwithindifferentaccess#store()","activesupport::okjson#strenc()","activesupport::timewithzone#strftime()","actiondispatch::http::cache::response#string_body?()","activerecord::connectionadapters::column#string_to_binary()","activerecord::connectionadapters::column#string_to_date()","activerecord::connectionadapters::column#string_to_dummy_time()","activerecord::connectionadapters::column#string_to_time()","activesupport::hashwithindifferentaccess#stringify_keys()","activesupport::hashwithindifferentaccess#stringify_keys()","hash#stringify_keys()","activesupport::hashwithindifferentaccess#stringify_keys!()","activesupport::hashwithindifferentaccess#stringify_keys!()","hash#stringify_keys!()","activesupport::multibyte::chars#strip()","string#strip_heredoc()","actionview::helpers::sanitizehelper#strip_links()","actionview::helpers::sanitizehelper#strip_tags()","activesupport::okjson#strtok()","activerecord::connectionadapters::schemastatements#structure_dump()","actionview::helpers::assettaghelper#stylesheet_link_tag()","actionview::helpers::assettaghelper#stylesheet_path()","actionview::helpers::assettaghelper#stylesheet_tag()","activerecord::base#subclasses()","rails::generators::subclasses()","rails::railtie#subclasses()","actiondispatch::http::url#subdomain()","actiondispatch::http::url#subdomains()","actionview::helpers::formbuilder#submit()","actionview::helpers::formbuilder#submit_default_value()","actionview::helpers::formtaghelper#submit_tag()","activesupport::notifications#subscribe()","activesupport::notifications::fanout#subscribe()","activesupport::okjson#subst()","actiondispatch::testresponse#success?()","activerecord::calculations#sum()","enumerable#sum()","date#sunday()","class#superclass_delegating_accessor()","activerecord::connectionadapters::sqliteadapter#supports_add_column?()","activerecord::connectionadapters::abstractadapter#supports_count_distinct?()","activerecord::connectionadapters::abstractadapter#supports_ddl_transactions?()","activerecord::connectionadapters::postgresqladapter#supports_ddl_transactions?()","activerecord::connectionadapters::sqliteadapter#supports_ddl_transactions?()","activerecord::connectionadapters::postgresqladapter#supports_insert_with_returning?()","activerecord::connectionadapters::abstractadapter#supports_migrations?()","activerecord::connectionadapters::postgresqladapter#supports_migrations?()","activerecord::connectionadapters::abstractadapter#supports_primary_key?()","activerecord::connectionadapters::abstractadapter#supports_savepoints?()","activerecord::connectionadapters::postgresqladapter#supports_savepoints?()","activerecord::connectionadapters::mysqladapter#supports_views?()","kernel#suppress()","activerecord::migration#suppress_messages()","activesupport::okjson#surrogate?()","plugin#svn_command()","plugin#svn_url?()","actiondispatch::middlewarestack#swap()","activesupport::hashwithindifferentaccess#symbolize_keys()","activesupport::hashwithindifferentaccess#symbolize_keys()","hash#symbolize_keys()","hash#symbolize_keys!()","actiondispatch::http::parameters#symbolized_path_parameters()","mime::mimes#symbols()","module#synchronize()","abstractcontroller::translation#t()","actionview::helpers::translationhelper#t()","activerecord::connectionadapters::schemastatements#table_alias_for()","activerecord::connectionadapters::databaselimits#table_alias_length()","activerecord::connectionadapters::postgresqladapter#table_alias_length()","activerecord::base#table_exists?()","activerecord::connectionadapters::mysqladapter#table_exists?()","activerecord::connectionadapters::postgresqladapter#table_exists?()","activerecord::connectionadapters::schemastatements#table_exists?()","activerecord::base#table_name()","activerecord::sessionstore::sqlbypass::table_name()","rails::generators::namedbase#table_name()","activerecord::connectionadapters::databaselimits#table_name_length()","activerecord::base::table_name_prefix()","activerecord::base::table_name_suffix()","activerecord::connectionadapters::sqliteadapter#table_structure()","activesupport::inflector#tableize()","string#tableize()","activerecord::connectionadapters::postgresqladapter#tables()","activerecord::relation#tables_in_string()","actionview::helpers::activemodelinstancetag#tag()","actionview::helpers::taghelper#tag()","actionview::helpers::activemodelinstancetag#tag_generate_errors?()","actionview::helpers::taghelper#tag_options()","rails::rack::logtailer#tail!()","activesupport::logsubscriber::testhelper#teardown()","activesupport::testing::setupandteardown::classmethods#teardown()","actioncontroller::templateassertions#teardown_subscriptions()","actionview::helpers::formhelper#telephone_field()","actionview::helpers::formtaghelper#telephone_field_tag()","actiondispatch::testresponse::deprecatedhelpers#template()","actionview::lookupcontext::viewpaths#template_exists?()","actiondispatch::testresponse::deprecatedhelpers#template_objects()","rails::generators::templates_path()","numeric#terabyte()","numeric#terabytes()","activesupport::testing::declarative#test()","activemodel::lint::tests#test_errors_aref()","activemodel::lint::tests#test_errors_full_messages()","browsingtest#test_homepage()","activemodel::lint::tests#test_model_naming()","activemodel::lint::tests#test_persisted?()","activemodel::lint::tests#test_to_key()","activemodel::lint::tests#test_to_param()","activemodel::lint::tests#test_valid?()","actioncontroller::testcase::behavior::classmethods#tests()","actionview::testcase::behavior::classmethods#tests()","rails::generators::testcase::tests()","activerecord::connectionadapters::column#text?()","actionview::helpers::formhelper#text_area()","actionview::helpers::formtaghelper#text_area_tag()","actionview::helpers::formhelper#text_field()","actionview::helpers::formtaghelper#text_field_tag()","activesupport::okjson#textparse()","array#third()","activesupport::cache::strategy::localcache#thread_local_key()","rails::application::configuration#threadsafe!()","activesupport::multibyte::unicode#tidy_byte()","activesupport::multibyte::chars#tidy_bytes()","activesupport::multibyte::unicode#tidy_bytes()","activesupport::timewithzone#time()","actionview::helpers::datehelper#time_ago_in_words()","actionview::helpers::datehelper#time_select()","actionview::helpers::formbuilder#time_select()","time#time_with_datetime_fallback()","actionview::helpers::formoptionshelper#time_zone_options_for_select()","actionview::helpers::formbuilder#time_zone_select()","actionview::helpers::formoptionshelper#time_zone_select()","activerecord::timestamp#timestamp_attributes_for_update_in_model()","fixtures#timestamp_column_names()","activerecord::base::timestamped_migrations()","activerecord::connectionadapters::table#timestamps()","activerecord::connectionadapters::tabledefinition#timestamps()","activesupport::multibyte::chars#titlecase()","string#titlecase()","activesupport::inflector#titleize()","activesupport::multibyte::chars#titleize()","string#titleize()","array#to()","string#to()","actioncontroller::metal#to_a()","actiondispatch::response#to_a()","activemodel::errors#to_a()","activerecord::relation#to_a()","activesupport::timewithzone#to_a()","rails::paths::path#to_a()","bigdecimal#to_d()","date#to_date()","datetime#to_date()","string#to_date()","time#to_date()","activesupport::timewithzone#to_datetime()","date#to_datetime()","datetime#to_datetime()","string#to_datetime()","time#to_datetime()","array#to_default_s()","date#to_default_s()","datetime#to_default_s()","range#to_default_s()","time#to_default_s()","activesupport::timewithzone#to_f()","datetime#to_f()","actioncontroller::responder#to_format()","activesupport::timewithzone#to_formatted_s()","array#to_formatted_s()","bigdecimal#to_formatted_s()","date#to_formatted_s()","datetime#to_formatted_s()","range#to_formatted_s()","time#to_formatted_s()","actiondispatch::session::abstractstore::sessionhash#to_hash()","activemodel::errors#to_hash()","activesupport::hashwithindifferentaccess#to_hash()","activesupport::hashwithindifferentaccess#to_hash()","actioncontroller::responder#to_html()","rails::info#to_html()","activesupport::timewithzone#to_i()","datetime#to_i()","activemodel::conversion#to_key()","activerecord::attributemethods::primarykey#to_key()","actionview::helpers::formbuilder#to_model()","activemodel::conversion#to_model()","hash#to_options()","activesupport::hashwithindifferentaccess#to_options!()","activesupport::hashwithindifferentaccess#to_options!()","hash#to_options!()","activemodel::conversion#to_param()","activerecord::base#to_param()","activesupport::safebuffer#to_param()","array#to_param()","falseclass#to_param()","hash#to_param()","nilclass#to_param()","object#to_param()","trueclass#to_param()","actiondispatch::response#to_path()","actionview::pathresolver#to_path()","actioncontroller::dispatcher#to_prepare()","actiondispatch::callbacks::to_prepare()","rails::railtie::configuration#to_prepare()","rails::railtie::configuration#to_prepare_blocks()","array#to_query()","hash#to_query()","object#to_query()","actiondispatch::remoteip::remoteipgetter#to_s()","actionview::pathresolver#to_s()","activesupport::safebuffer#to_s()","activesupport::timewithzone#to_s()","activesupport::timezone#to_s()","array#to_s()","bigdecimal#to_s()","date#to_s()","datetime#to_s()","mime::type#to_s()","plugin#to_s()","rails::info#to_s()","range#to_s()","sourceannotationextractor::annotation#to_s()","time#to_s()","array#to_sentence()","activerecord::connectionadapters::tabledefinition#to_sql()","activerecord::relation#to_sql()","mime::type#to_str()","mime::type#to_sym()","activesupport::xmlmini#to_tag()","activesupport::timewithzone#to_time()","date#to_time()","datetime#to_time()","string#to_time()","time#to_time()","date#to_time_in_current_zone()","activemodel::errors#to_xml()","activemodel::serializers::xml#to_xml()","activerecord::serialization#to_xml()","array#to_xml()","hash#to_xml()","activesupport::safebuffer#to_yaml()","activesupport::timewithzone#to_yaml()","bigdecimal#to_yaml()","activesupport::timezone#today()","activesupport::timewithzone#today?()","date#today?()","time#today?()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#toggle()","activerecord::persistence#toggle()","activerecord::persistence#toggle!()","activesupport::okjson#tok()","actionview::helpers::formtaghelper#token_tag()","html::sanitizer#tokenize()","html::whitelistsanitizer#tokenize()","date#tomorrow()","time#tomorrow()","activerecord::persistence#touch()","activerecord::connectionadapters::databasestatements#transaction()","activerecord::transactions#transaction()","activerecord::transactions::classmethods#transaction()","activerecord::transactions#transaction_include_action?()","activerecord::connectionadapters::abstractadapter#transaction_joinable=()","activerecord::transactions#transaction_record_state()","activesupport::timewithzone#transfer_time_values_to_utc_constructor()","abstractcontroller::translation#translate()","actionview::helpers::translationhelper#translate()","activerecord::connectionadapters::abstractadapter#translate_exception()","activerecord::connectionadapters::mysqladapter#translate_exception()","activerecord::connectionadapters::postgresqladapter#translate_exception()","activerecord::connectionadapters::sqliteadapter#translate_exception()","activesupport::inflector#transliterate()","activesupport::okjson#truetok()","actionview::helpers::texthelper#truncate()","string#truncate()","object#try()","rails::initializable::collection#tsort_each_child()","activesupport::timewithzone#tv_sec()","activerecord::connectionadapters::column#type_cast()","activerecord::base#type_cast_attribute_value()","activerecord::calculations#type_cast_calculated_value()","activerecord::connectionadapters::column#type_cast_code()","activerecord::calculations#type_cast_using_column()","activerecord::base#type_condition()","activerecord::connectionadapters::mysqladapter#type_to_sql()","activerecord::connectionadapters::postgresqladapter#type_to_sql()","hash#typecast_xml_value()","activesupport::multibyte::unicode#u_unpack()","activesupport::okjson#ucharcopy()","activesupport::okjson#ucharenc()","activerecord::connectionadapters::querycache#uncached()","activerecord::querycache::classmethods#uncached()","activesupport::inflector::inflections#uncountable()","activemodel::naming::uncountable?()","rails::generators::namedbase#uncountable?()","activerecord::base#undecorated_table_name()","activemodel::attributemethods::classmethods#undefine_attribute_methods()","activesupport::inflector#underscore()","string#underscore()","object#unescape()","activerecord::connectionadapters::postgresqladapter#unescape_bytea()","actiondispatch::assertions::selectorassertions#unescape_rjs()","plugin#uninstall()","array#uniq_by()","array#uniq_by!()","activesupport::notifications::instrumenter#unique_id()","activesupport::memoizable::instancemethods#unmemoize_all()","actiondispatch::session::cookiestore#unpacked_cookie_data()","activesupport::okjson#unquote()","hash#unrename_keys()","activerecord::attributemethods::read#unserializable_attribute?()","activerecord::attributemethods::read#unserialize_attribute()","rails::paths::path#unshift()","rails::paths::root#unshift()","activesupport::notifications#unsubscribe()","activesupport::notifications::fanout#unsubscribe()","activesupport::duration#until()","numeric#until()","activesupport::multibyte::chars#upcase()","actiondispatch::session::abstractstore::sessionhash#update()","activerecord::attributemethods::dirty#update()","activerecord::connectionadapters::databasestatements#update()","activerecord::persistence#update()","activerecord::relation#update()","activesupport::hashwithindifferentaccess#update()","activesupport::hashwithindifferentaccess#update()","activerecord::relation#update_all()","activerecord::persistence#update_attribute()","activerecord::persistence#update_attributes()","rails::generators::activemodel#update_attributes()","activerecord::persistence#update_attributes!()","activerecord::countercache#update_counters()","activerecord::locking::optimistic::classmethods#update_counters()","actionview::lookupcontext::details#update_details()","actionview::helpers::prototypehelper#update_page()","actionview::helpers::prototypehelper#update_page_tag()","activerecord::connectionadapters::databasestatements#update_sql()","activerecord::connectionadapters::postgresqladapter#update_sql()","actionview::helpers::atomfeedhelper::atomfeedbuilder#updated()","activesupport::fileupdatechecker#updated_at()","actiondispatch::http::url#url()","actionview::helpers::formhelper#url_field()","actionview::helpers::formtaghelper#url_field_tag()","actioncontroller::metal#url_for()","actiondispatch::routing::urlfor#url_for()","actionview::helpers::urlhelper#url_for()","actioncontroller::urlfor#url_options()","actiondispatch::integration::runner#url_options()","actiondispatch::routing::urlfor#url_options()","actionview::helpers::urlhelper#url_options()","activesupport::timezone#us_zones()","actioncontroller::metal::use()","actiondispatch::flash::flashhash#use()","actiondispatch::middlewarestack#use()","railsenvironment#use_checkout?()","railsenvironment#use_externals?()","actioncontroller::renderers::classmethods#use_renderer()","actioncontroller::renderers::classmethods#use_renderers()","railsenvironment#use_svn?()","time#use_zone()","activesupport::timewithzone#usec()","actiondispatch::testrequest#user_agent=()","actioncontroller::httpauthentication::basic#user_name_and_password()","activerecord::findermethods#using_limitable_reflections?()","activesupport::timewithzone#utc()","datetime#utc()","activesupport::timewithzone#utc?()","datetime#utc?()","activesupport::timewithzone#utc_offset()","activesupport::timezone#utc_offset()","datetime#utc_offset()","time#utc_time()","activesupport::timezone#utc_to_local()","activesupport::okjson#valenc()","activemodel::validations#valid?()","activerecord::validations#valid?()","activerecord::connectionadapters::sqliteadapter#valid_alter_table_options()","actionview::template::handlers::erb#valid_encoding()","activerecord::namedscope::classmethods#valid_scope_name?()","activemodel::eachvalidator#validate()","activemodel::validations::classmethods#validate()","activemodel::validations::presencevalidator#validate()","activemodel::validator#validate()","activerecord::autosaveassociation#validate_collection_association()","activemodel::blockvalidator#validate_each()","activemodel::eachvalidator#validate_each()","activemodel::validations::acceptancevalidator#validate_each()","activemodel::validations::confirmationvalidator#validate_each()","activemodel::validations::exclusionvalidator#validate_each()","activemodel::validations::formatvalidator#validate_each()","activemodel::validations::inclusionvalidator#validate_each()","activemodel::validations::lengthvalidator#validate_each()","activemodel::validations::numericalityvalidator#validate_each()","activerecord::validations::associatedvalidator#validate_each()","activerecord::validations::uniquenessvalidator#validate_each()","i18n::railtie::validate_fallbacks()","actiondispatch::assertions::responseassertions#validate_request!()","activerecord::autosaveassociation#validate_single_association()","activemodel::validations::classmethods#validates()","activemodel::validations::helpermethods#validates_acceptance_of()","activerecord::validations::classmethods#validates_associated()","activemodel::validations::helpermethods#validates_confirmation_of()","activemodel::validations::classmethods#validates_each()","activemodel::validations::helpermethods#validates_exclusion_of()","activemodel::validations::helpermethods#validates_format_of()","activemodel::validations::helpermethods#validates_inclusion_of()","activemodel::validations::helpermethods#validates_length_of()","activemodel::validations::helpermethods#validates_numericality_of()","activemodel::validations::helpermethods#validates_presence_of()","activemodel::validations::helpermethods#validates_size_of()","activerecord::validations::classmethods#validates_uniqueness_of()","activemodel::validations#validates_with()","activemodel::validations::classmethods#validates_with()","activemodel::validations::classmethods#validators()","activemodel::validations::classmethods#validators_on()","activesupport::okjson#valparse()","actionview::helpers::instancetagmethods::classmethods#value()","activesupport::cache::entry#value()","actionview::helpers::instancetagmethods::classmethods#value_before_type_cast()","activerecord::connectionadapters::column#value_to_boolean()","activerecord::connectionadapters::column#value_to_decimal()","activesupport::hashwithindifferentaccess#values_at()","activesupport::hashwithindifferentaccess#values_at()","actionview::template#variable_name()","rails::generators::actions#vendor()","actioncontroller::requestforgeryprotection#verified_request?()","activesupport::messageencryptor#verifier()","activesupport::messageverifier#verify()","activerecord::connectionadapters::abstractadapter#verify!()","actioncontroller::requestforgeryprotection#verify_authenticity_token()","mime::type#verify_request?()","activerecord::connectionadapters::mysqladapter#version()","rails#version()","actionview::helpers::assettaghelper#video_path()","actionview::helpers::assettaghelper#video_tag()","actionview::testcase::behavior#view()","abstractcontroller::rendering#view_assigns()","actionview::testcase::behavior#view_assigns()","abstractcontroller::rendering#view_context()","actionview::base#view_context()","abstractcontroller::rendering#view_context_class()","abstractcontroller::rendering::classmethods#view_context_class()","rails::configuration::deprecated#view_path()","rails::configuration::deprecated#view_path=()","abstractcontroller::viewpaths::classmethods#view_paths()","abstractcontroller::viewpaths::classmethods#view_paths=()","actionview::lookupcontext::viewpaths#view_paths=()","actioncontroller::hideactions::classmethods#visible_action?()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#visual_effect()","actionview::helpers::scriptaculoushelper#visual_effect()","activesupport::logsubscriber::testhelper#wait()","activesupport::notifications::fanout#wait()","activesupport::multibyte::chars::wants?()","activesupport::deprecation#warn()","activemodel::massassignmentsecurity::sanitizer#warn!()","activesupport::dependencies::watchstack#watch_namespaces()","numeric#week()","numeric#weeks()","activerecord::querymethods#where()","activerecord::relation#where_values_hash()","activesupport::json#with_backend()","activesupport::xmlmini#with_backend()","activerecord::connectionadapters::connectionpool#with_connection()","actiondispatch::routing::mapper::resources#with_exclusive_scope()","activerecord::base#with_exclusive_scope()","actionview::lookupcontext::viewpaths#with_fallbacks()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#with_formats()","activesupport::testing::performance::metrics::base#with_gc_stats()","hash#with_indifferent_access()","actionview::lookupcontext::details#with_layout_format()","activesupport::cache::strategy::localcache#with_local_cache()","object#with_options()","activesupport::testing::performance::benchmarker#with_output_file()","actiondispatch::assertions::routingassertions#with_routing()","activerecord::base#with_scope()","actiondispatch::routing::mapper::resources#with_scope_level()","activerecord::transactions#with_transaction_returning_status()","kernel#with_warnings()","actioncontroller::base::without_modules()","actionview::helpers::texthelper#word_wrap()","array::wrap()","actiondispatch::response#write()","activerecord::migration#write()","activesupport::cache::store#write()","actionview::helpers::assettaghelper#write_asset_file_contents()","activerecord::attributemethods::dirty#write_attribute()","activerecord::attributemethods::write#write_attribute()","actiondispatch::testrequest#write_cookies!()","activesupport::cache::filestore#write_entry()","activesupport::cache::strategy::localcache::localstore#write_entry()","actioncontroller::caching::fragments#write_fragment()","activerecord::aggregations::classmethods#writer_method()","actioncontroller::testcase::behavior#xhr()","actiondispatch::integration::requesthelpers#xhr()","actiondispatch::request#xhr?()","actionview::helpers::atomfeedhelper::atombuilder#xhtml_block?()","activerecord::connectionadapters::tabledefinition#xml()","activerecord::connectionadapters::tabledefinition#xml_column_fallback()","actioncontroller::testcase::behavior#xml_http_request()","actiondispatch::integration::requesthelpers#xml_http_request()","actiondispatch::request#xml_http_request?()","activesupport::timewithzone#xmlschema()","date#xmlschema()","datetime#xmlschema()","fixtures#yaml_file_path()","fixtures#yaml_fixtures_key()","integer#year()","integer#years()","date#years_ago()","time#years_ago()","date#years_since()","time#years_since()","date#yesterday()","time#yesterday()","activesupport::timewithzone#zone()","time#zone()","time#zone=()","activesupport::timezone#zones_map()","","","","","","","","","","","","","",""],"info":[["AbstractController","","classes/AbstractController.html","",""],["AbstractController::ActionNotFound","","classes/AbstractController/ActionNotFound.html","",""],["AbstractController::AssetPaths","","classes/AbstractController/AssetPaths.html","",""],["AbstractController::Base","","classes/AbstractController/Base.html","","<p><code>AbstractController::Base</code> is a low-level API. Nobody should be\nusing it directly, and subclasses (like …\n"],["AbstractController::Callbacks","","classes/AbstractController/Callbacks.html","",""],["AbstractController::Callbacks::ClassMethods","","classes/AbstractController/Callbacks/ClassMethods.html","",""],["AbstractController::Collector","","classes/AbstractController/Collector.html","",""],["AbstractController::Collector::Mime","","classes/AbstractController/Collector/Mime.html","",""],["AbstractController::DoubleRenderError","","classes/AbstractController/DoubleRenderError.html","",""],["AbstractController::Error","","classes/AbstractController/Error.html","",""],["AbstractController::Helpers","","classes/AbstractController/Helpers.html","",""],["AbstractController::Helpers::ClassMethods","","classes/AbstractController/Helpers/ClassMethods.html","",""],["AbstractController::Layouts","","classes/AbstractController/Layouts.html","","<p>Layouts reverse the common pattern of including shared headers and footers\nin many templates to isolate …\n"],["AbstractController::Layouts::ClassMethods","","classes/AbstractController/Layouts/ClassMethods.html","",""],["AbstractController::Layouts::ClassMethods::LayoutConditions","","classes/AbstractController/Layouts/ClassMethods/LayoutConditions.html","","<p>This module is mixed in if layout conditions are provided. This means that\nif no layout conditions are …\n"],["AbstractController::Logger","","classes/AbstractController/Logger.html","",""],["AbstractController::Rendering","","classes/AbstractController/Rendering.html","",""],["AbstractController::Rendering::ClassMethods","","classes/AbstractController/Rendering/ClassMethods.html","",""],["AbstractController::Translation","","classes/AbstractController/Translation.html","",""],["AbstractController::ViewPaths","","classes/AbstractController/ViewPaths.html","",""],["AbstractController::ViewPaths::ActionView","","classes/AbstractController/ViewPaths/ActionView.html","",""],["AbstractController::ViewPaths::ClassMethods","","classes/AbstractController/ViewPaths/ClassMethods.html","",""],["ActionController","","classes/ActionController.html","",""],["ActionController::Base","","classes/ActionController/Base.html","","<p>Action Controllers are the core of a web request in Rails. They are made up\nof one or more actions that …\n"],["ActionController::Caching","","classes/ActionController/Caching.html","","<p>Caching is a cheap way of speeding up slow applications by keeping the\nresult of calculations, renderings, …\n"],["ActionController::Caching::Actions","","classes/ActionController/Caching/Actions.html","","<p>Action caching is similar to page caching by the fact that the entire\noutput of the response is cached, …\n"],["ActionController::Caching::Actions::ActionCachePath","","classes/ActionController/Caching/Actions/ActionCachePath.html","",""],["ActionController::Caching::Actions::ClassMethods","","classes/ActionController/Caching/Actions/ClassMethods.html","",""],["ActionController::Caching::ActiveRecord","","classes/ActionController/Caching/ActiveRecord.html","",""],["ActionController::Caching::ConfigMethods","","classes/ActionController/Caching/ConfigMethods.html","",""],["ActionController::Caching::Fragments","","classes/ActionController/Caching/Fragments.html","","<p>Fragment caching is used for caching various blocks within templates\nwithout caching the entire action …\n"],["ActionController::Caching::Pages","","classes/ActionController/Caching/Pages.html","","<p>Page caching is an approach to caching where the entire action output of is\nstored as a HTML file that …\n"],["ActionController::Caching::Pages::ClassMethods","","classes/ActionController/Caching/Pages/ClassMethods.html","",""],["ActionController::Caching::Sweeping","","classes/ActionController/Caching/Sweeping.html","","<p>Sweepers are the terminators of the caching world and responsible for\nexpiring caches when model objects …\n"],["ActionController::Compatibility","","classes/ActionController/Compatibility.html","",""],["ActionController::Compatibility::ClassMethods","","classes/ActionController/Compatibility/ClassMethods.html","",""],["ActionController::ConditionalGet","","classes/ActionController/ConditionalGet.html","",""],["ActionController::Cookies","","classes/ActionController/Cookies.html","",""],["ActionController::Dispatcher","","classes/ActionController/Dispatcher.html","",""],["ActionController::DoubleRenderError","","classes/AbstractController/DoubleRenderError.html","",""],["ActionController::Flash","","classes/ActionController/Flash.html","",""],["ActionController::Head","","classes/ActionController/Head.html","",""],["ActionController::Helpers","","classes/ActionController/Helpers.html","","<p>The Rails framework provides a large number of helpers for working with\n<code>assets</code>, <code>dates</code>, <code>forms</code>,\n<code>numbers</code> …\n"],["ActionController::Helpers::ClassMethods","","classes/ActionController/Helpers/ClassMethods.html","",""],["ActionController::Helpers::PrototypeHelper","","classes/ActionController/Helpers/PrototypeHelper.html","",""],["ActionController::HideActions","","classes/ActionController/HideActions.html","","<p>ActionController::HideActions adds the ability to prevent public methods on\na controller to be called …\n"],["ActionController::HideActions::ClassMethods","","classes/ActionController/HideActions/ClassMethods.html","",""],["ActionController::HttpAuthentication","","classes/ActionController/HttpAuthentication.html","",""],["ActionController::HttpAuthentication::Basic","","classes/ActionController/HttpAuthentication/Basic.html","","<p>Makes it dead easy to do HTTP Basic authentication.\n<p>Simple Basic example:\n\n<pre><code>class PostsController &lt; ApplicationController ...\n</code></pre>\n"],["ActionController::HttpAuthentication::Basic::ControllerMethods","","classes/ActionController/HttpAuthentication/Basic/ControllerMethods.html","",""],["ActionController::HttpAuthentication::Digest","","classes/ActionController/HttpAuthentication/Digest.html","",""],["ActionController::HttpAuthentication::Digest::ControllerMethods","","classes/ActionController/HttpAuthentication/Digest/ControllerMethods.html","",""],["ActionController::HttpAuthentication::Token","","classes/ActionController/HttpAuthentication/Token.html","",""],["ActionController::HttpAuthentication::Token::ControllerMethods","","classes/ActionController/HttpAuthentication/Token/ControllerMethods.html","",""],["ActionController::ImplicitRender","","classes/ActionController/ImplicitRender.html","",""],["ActionController::Instrumentation","","classes/ActionController/Instrumentation.html","","<p>Adds instrumentation to several ends in ActionController::Base. It also\nprovides some hooks related with …\n"],["ActionController::Instrumentation::ClassMethods","","classes/ActionController/Instrumentation/ClassMethods.html","",""],["ActionController::LogSubscriber","","classes/ActionController/LogSubscriber.html","",""],["ActionController::Metal","","classes/ActionController/Metal.html","","<p>ActionController::Metal provides a way to get a valid Rack application from\na controller.\n<p>In AbstractController …\n"],["ActionController::Middleware","","classes/ActionController/Middleware.html","",""],["ActionController::Middleware::ActionMiddleware","","classes/ActionController/Middleware/ActionMiddleware.html","",""],["ActionController::MimeResponds","","classes/ActionController/MimeResponds.html","",""],["ActionController::MimeResponds::ClassMethods","","classes/ActionController/MimeResponds/ClassMethods.html","",""],["ActionController::RackDelegation","","classes/ActionController/RackDelegation.html","",""],["ActionController::Railtie","","classes/ActionController/Railtie.html","",""],["ActionController::Railtie::ActiveSupport","","classes/ActionController/Railtie/ActiveSupport.html","",""],["ActionController::Railtie::ActiveSupport::Deprecation","","classes/ActionController/Railtie/ActiveSupport/Deprecation.html","",""],["ActionController::RecordIdentifier","","classes/ActionController/RecordIdentifier.html","","<p>The record identifier encapsulates a number of naming conventions for\ndealing with records, like Active …\n"],["ActionController::Redirecting","","classes/ActionController/Redirecting.html","",""],["ActionController::Renderers","","classes/ActionController/Renderers.html","",""],["ActionController::Renderers::ActionView","","classes/ActionController/Renderers/ActionView.html","",""],["ActionController::Renderers::All","","classes/ActionController/Renderers/All.html","",""],["ActionController::Renderers::ClassMethods","","classes/ActionController/Renderers/ClassMethods.html","",""],["ActionController::Renderers::Mime","","classes/ActionController/Renderers/Mime.html","",""],["ActionController::Rendering","","classes/ActionController/Rendering.html","",""],["ActionController::RequestForgeryProtection","","classes/ActionController/RequestForgeryProtection.html","","<p>Protecting controller actions from CSRF attacks by ensuring that all forms\nare coming from the current …\n"],["ActionController::RequestForgeryProtection::ClassMethods","","classes/ActionController/RequestForgeryProtection/ClassMethods.html","",""],["ActionController::Rescue","","classes/ActionController/Rescue.html","",""],["ActionController::Responder","","classes/ActionController/Responder.html","","<p>Responder is responsible for exposing a resource to different mime\nrequests, usually depending on the …\n"],["ActionController::Routing","","classes/ActionController/Routing.html","",""],["ActionController::SessionManagement","","classes/ActionController/SessionManagement.html","",""],["ActionController::SessionManagement::ClassMethods","","classes/ActionController/SessionManagement/ClassMethods.html","",""],["ActionController::Streaming","","classes/ActionController/Streaming.html","","<p>Methods for sending arbitrary data and for streaming files to the browser,\ninstead of rendering.\n"],["ActionController::TemplateAssertions","","classes/ActionController/TemplateAssertions.html","",""],["ActionController::TestCase","","classes/ActionController/TestCase.html","","<p>Superclass for ActionController functional tests. Functional tests allow\nyou to test a single controller …\n"],["ActionController::TestCase::Behavior","","classes/ActionController/TestCase/Behavior.html","",""],["ActionController::TestCase::Behavior::ClassMethods","","classes/ActionController/TestCase/Behavior/ClassMethods.html","",""],["ActionController::TestCase::RaiseActionExceptions","","classes/ActionController/TestCase/RaiseActionExceptions.html","","<p>When the request.remote_addr remains the default for testing, which is\n0.0.0.0, the exception is simply …\n"],["ActionController::TestResponse","","classes/ActionController/TestResponse.html","",""],["ActionController::Testing","","classes/ActionController/Testing.html","",""],["ActionController::Testing::ClassMethods","","classes/ActionController/Testing/ClassMethods.html","",""],["ActionController::UnknownAction","","classes/AbstractController/ActionNotFound.html","",""],["ActionController::UrlFor","","classes/ActionController/UrlFor.html","",""],["ActionController::UrlFor::ClassMethods","","classes/ActionController/UrlFor/ClassMethods.html","",""],["ActionController::UrlRewriter","","classes/ActionController/UrlRewriter.html","",""],["ActionController::UrlWriter","","classes/ActionController/UrlWriter.html","",""],["ActionDispatch","","classes/ActionDispatch.html","",""],["ActionDispatch::Assertions","","classes/ActionDispatch/Assertions.html","",""],["ActionDispatch::Assertions::DomAssertions","","classes/ActionDispatch/Assertions/DomAssertions.html","",""],["ActionDispatch::Assertions::ResponseAssertions","","classes/ActionDispatch/Assertions/ResponseAssertions.html","","<p>A small suite of assertions that test responses from Rails applications.\n"],["ActionDispatch::Assertions::RoutingAssertions","","classes/ActionDispatch/Assertions/RoutingAssertions.html","","<p>Suite of assertions to test routes generated by Rails and the handling of\nrequests made to them.\n"],["ActionDispatch::Assertions::SelectorAssertions","","classes/ActionDispatch/Assertions/SelectorAssertions.html","","<p>Adds the <code>assert_select</code> method for use in Rails functional test\ncases, which can be used to make assertions …\n"],["ActionDispatch::Assertions::TagAssertions","","classes/ActionDispatch/Assertions/TagAssertions.html","","<p>Pair of assertions to testing elements in the HTML output of the response.\n"],["ActionDispatch::BestStandardsSupport","","classes/ActionDispatch/BestStandardsSupport.html","",""],["ActionDispatch::Callbacks","","classes/ActionDispatch/Callbacks.html","","<p>Provide callbacks to be executed before and after the request dispatch.\n<p>It also provides a to_prepare …\n"],["ActionDispatch::Cookies","","classes/ActionDispatch/Cookies.html","","<p>Cookies are read and written through ActionController#cookies.\n<p>The cookies being read are the ones received …\n"],["ActionDispatch::Cookies::CookieOverflow","","classes/ActionDispatch/Cookies/CookieOverflow.html","","<p>Raised when storing more than 4K of session data.\n"],["ActionDispatch::Flash","","classes/ActionDispatch/Flash.html","","<p>The flash provides a way to pass temporary objects between actions.\nAnything you place in the flash will …\n"],["ActionDispatch::Flash::FlashHash","","classes/ActionDispatch/Flash/FlashHash.html","",""],["ActionDispatch::Head","","classes/ActionDispatch/Head.html","",""],["ActionDispatch::Http","","classes/ActionDispatch/Http.html","",""],["ActionDispatch::Http::Cache","","classes/ActionDispatch/Http/Cache.html","",""],["ActionDispatch::Http::Cache::Request","","classes/ActionDispatch/Http/Cache/Request.html","",""],["ActionDispatch::Http::Cache::Response","","classes/ActionDispatch/Http/Cache/Response.html","",""],["ActionDispatch::Http::FilterParameters","","classes/ActionDispatch/Http/FilterParameters.html","","<p>Allows you to specify sensitive parameters which will be replaced from the\nrequest log by looking in …\n"],["ActionDispatch::Http::Headers","","classes/ActionDispatch/Http/Headers.html","",""],["ActionDispatch::Http::MimeNegotiation","","classes/ActionDispatch/Http/MimeNegotiation.html","",""],["ActionDispatch::Http::ParameterFilter","","classes/ActionDispatch/Http/ParameterFilter.html","",""],["ActionDispatch::Http::Parameters","","classes/ActionDispatch/Http/Parameters.html","",""],["ActionDispatch::Http::URL","","classes/ActionDispatch/Http/URL.html","",""],["ActionDispatch::Http::Upload","","classes/ActionDispatch/Http/Upload.html","",""],["ActionDispatch::Http::UploadedFile","","classes/ActionDispatch/Http/UploadedFile.html","",""],["ActionDispatch::Integration","","classes/ActionDispatch/Integration.html","",""],["ActionDispatch::Integration::RequestHelpers","","classes/ActionDispatch/Integration/RequestHelpers.html","",""],["ActionDispatch::Integration::Runner","","classes/ActionDispatch/Integration/Runner.html","",""],["ActionDispatch::Integration::Session","","classes/ActionDispatch/Integration/Session.html","","<p>An instance of this class represents a set of requests and responses\nperformed sequentially by a test …\n"],["ActionDispatch::IntegrationTest","","classes/ActionDispatch/IntegrationTest.html","","<p>An test that spans multiple controllers and actions, tying them all\ntogether to ensure they work together …\n"],["ActionDispatch::MiddlewareStack","","classes/ActionDispatch/MiddlewareStack.html","",""],["ActionDispatch::MiddlewareStack::Middleware","","classes/ActionDispatch/MiddlewareStack/Middleware.html","",""],["ActionDispatch::ParamsParser","","classes/ActionDispatch/ParamsParser.html","",""],["ActionDispatch::PerformanceTest","","classes/ActionDispatch/PerformanceTest.html","","<p>An integration test that runs a code profiler on your test methods.\nProfiling output for combinations …\n"],["ActionDispatch::Railtie","","classes/ActionDispatch/Railtie.html","",""],["ActionDispatch::Railtie::ActiveSupport","","classes/ActionDispatch/Railtie/ActiveSupport.html","",""],["ActionDispatch::RemoteIp","","classes/ActionDispatch/RemoteIp.html","",""],["ActionDispatch::RemoteIp::IpSpoofAttackError","","classes/ActionDispatch/RemoteIp/IpSpoofAttackError.html","",""],["ActionDispatch::RemoteIp::RemoteIpGetter","","classes/ActionDispatch/RemoteIp/RemoteIpGetter.html","",""],["ActionDispatch::Request","","classes/ActionDispatch/Request.html","",""],["ActionDispatch::Rescue","","classes/ActionDispatch/Rescue.html","",""],["ActionDispatch::Response","","classes/ActionDispatch/Response.html","","<p>Represents an HTTP response generated by a controller action. Use it to\nretrieve the current state of …\n"],["ActionDispatch::Response::Setup","","classes/ActionDispatch/Response/Setup.html","",""],["ActionDispatch::Routing","","classes/ActionDispatch/Routing.html","","<p>The routing module provides URL rewriting in native Ruby. It&#39;s a way to\nredirect incoming requests …\n"],["ActionDispatch::Routing::Mapper","","classes/ActionDispatch/Routing/Mapper.html","",""],["ActionDispatch::Routing::Mapper::Base","","classes/ActionDispatch/Routing/Mapper/Base.html","",""],["ActionDispatch::Routing::Mapper::HttpHelpers","","classes/ActionDispatch/Routing/Mapper/HttpHelpers.html","",""],["ActionDispatch::Routing::Mapper::Resources","","classes/ActionDispatch/Routing/Mapper/Resources.html","","<p>Resource routing allows you to quickly declare all of the common routes for\na given resourceful controller. …\n"],["ActionDispatch::Routing::Mapper::Scoping","","classes/ActionDispatch/Routing/Mapper/Scoping.html","","<p>You may wish to organize groups of controllers under a namespace. Most\ncommonly, you might group a number …\n"],["ActionDispatch::Routing::Mapper::Shorthand","","classes/ActionDispatch/Routing/Mapper/Shorthand.html","",""],["ActionDispatch::Routing::PolymorphicRoutes","","classes/ActionDispatch/Routing/PolymorphicRoutes.html","","<p>Polymorphic URL helpers are methods for smart resolution to a named route\ncall when given an Active  …\n"],["ActionDispatch::Routing::RouteSet","","classes/ActionDispatch/Routing/RouteSet.html","",""],["ActionDispatch::Routing::UrlFor","","classes/ActionDispatch/Routing/UrlFor.html","","<p>In <code>config/routes.rb</code> you define URL-to-controller mappings, but\nthe reverse is also possible: an URL can …\n"],["ActionDispatch::Session","","classes/ActionDispatch/Session.html","",""],["ActionDispatch::Session::AbstractStore","","classes/ActionDispatch/Session/AbstractStore.html","",""],["ActionDispatch::Session::AbstractStore::OptionsHash","","classes/ActionDispatch/Session/AbstractStore/OptionsHash.html","","<p>thin wrapper around Hash that allows us to lazily load session id into\nsession_options\n"],["ActionDispatch::Session::AbstractStore::SessionHash","","classes/ActionDispatch/Session/AbstractStore/SessionHash.html","",""],["ActionDispatch::Session::CookieStore","","classes/ActionDispatch/Session/CookieStore.html","","<p>This cookie-based session store is the Rails default. Sessions typically\ncontain at most a user_id and …\n"],["ActionDispatch::Session::MemCacheStore","","classes/ActionDispatch/Session/MemCacheStore.html","",""],["ActionDispatch::ShowExceptions","","classes/ActionDispatch/ShowExceptions.html","","<p>This middleware rescues any exception returned by the application and\nrenders nice exception pages if …\n"],["ActionDispatch::Static","","classes/ActionDispatch/Static.html","",""],["ActionDispatch::TestProcess","","classes/ActionDispatch/TestProcess.html","",""],["ActionDispatch::TestRequest","","classes/ActionDispatch/TestRequest.html","",""],["ActionDispatch::TestResponse","","classes/ActionDispatch/TestResponse.html","","<p>Integration test methods such as ActionDispatch::Integration::Session#get\nand ActionDispatch::Integration::Session#post …\n"],["ActionDispatch::TestResponse::DeprecatedHelpers","","classes/ActionDispatch/TestResponse/DeprecatedHelpers.html","",""],["ActionMailer","","classes/ActionMailer.html","",""],["ActionMailer::Base","","classes/ActionMailer/Base.html","","<p>Action Mailer allows you to send email from your application using a mailer\nmodel and views.\n<p>Mailer Models …\n"],["ActionMailer::Base::DeprecatedHeaderProxy","","classes/ActionMailer/Base/DeprecatedHeaderProxy.html","",""],["ActionMailer::Base::DeprecatedUrlOptions","","classes/ActionMailer/Base/DeprecatedUrlOptions.html","",""],["ActionView","","classes/ActionView.html","","<p>Legacy TemplateHandler stub\n"],["ActionView::Base","","classes/ActionView/Base.html","","<p>Action View Base\n<p>Action View templates can be written in three ways. If the template file\nhas a <code>.erb</code> (or …\n"],["ActionView::Base::Subclasses","","classes/ActionView/Base/Subclasses.html","",""],["ActionView::Context","","classes/ActionView/Context.html","","<p>Action View Context\n<p>Action View contexts are supplied to Action Controller to render template.\nThe default …\n"],["ActionView::FileSystemResolver","","classes/ActionView/FileSystemResolver.html","",""],["ActionView::FixtureResolver","","classes/ActionView/FixtureResolver.html","","<p>Use FixtureResolver in your tests to simulate the presence of files on the\nfile system. This is used …\n"],["ActionView::Helpers","","classes/ActionView/Helpers.html","","<p>Active Model Helpers\n<p>Action View Cache Helper\n<p>Action View Capture Helper\n"],["ActionView::Helpers::ActiveModelFormBuilder","","classes/ActionView/Helpers/ActiveModelFormBuilder.html","",""],["ActionView::Helpers::ActiveModelHelper","","classes/ActionView/Helpers/ActiveModelHelper.html","",""],["ActionView::Helpers::ActiveModelInstanceTag","","classes/ActionView/Helpers/ActiveModelInstanceTag.html","",""],["ActionView::Helpers::AssetTagHelper","","classes/ActionView/Helpers/AssetTagHelper.html","","<p>This module provides methods for generating HTML that links views to assets\nsuch as images, javascripts, …\n"],["ActionView::Helpers::AtomFeedHelper","","classes/ActionView/Helpers/AtomFeedHelper.html","",""],["ActionView::Helpers::AtomFeedHelper::AtomBuilder","","classes/ActionView/Helpers/AtomFeedHelper/AtomBuilder.html","",""],["ActionView::Helpers::AtomFeedHelper::AtomFeedBuilder","","classes/ActionView/Helpers/AtomFeedHelper/AtomFeedBuilder.html","",""],["ActionView::Helpers::CacheHelper","","classes/ActionView/Helpers/CacheHelper.html","",""],["ActionView::Helpers::CaptureHelper","","classes/ActionView/Helpers/CaptureHelper.html","","<p>CaptureHelper exposes methods to let you extract generated markup which can\nbe used in other parts of …\n"],["ActionView::Helpers::CsrfHelper","","classes/ActionView/Helpers/CsrfHelper.html","",""],["ActionView::Helpers::DateHelper","","classes/ActionView/Helpers/DateHelper.html","","<p>Action View Date Helpers\n<p>The Date Helper primarily creates select/option tags for different kinds of\ndates …\n"],["ActionView::Helpers::DebugHelper","","classes/ActionView/Helpers/DebugHelper.html","",""],["ActionView::Helpers::FormBuilder","","classes/ActionView/Helpers/FormBuilder.html","",""],["ActionView::Helpers::FormHelper","","classes/ActionView/Helpers/FormHelper.html","","<p>Form helpers are designed to make working with resources much easier\ncompared to using vanilla HTML. …\n"],["ActionView::Helpers::FormOptionsHelper","","classes/ActionView/Helpers/FormOptionsHelper.html","","<p>Provides a number of methods for turning different kinds of containers into\na set of option tags.\n<p>Options …\n"],["ActionView::Helpers::FormTagHelper","","classes/ActionView/Helpers/FormTagHelper.html","","<p>Provides a number of methods for creating form tags that doesn&#39;t rely\non an Active Record object …\n"],["ActionView::Helpers::InstanceTag","","classes/ActionView/Helpers/InstanceTag.html","",""],["ActionView::Helpers::InstanceTagMethods","","classes/ActionView/Helpers/InstanceTagMethods.html","",""],["ActionView::Helpers::InstanceTagMethods::ClassMethods","","classes/ActionView/Helpers/InstanceTagMethods/ClassMethods.html","",""],["ActionView::Helpers::JavaScriptHelper","","classes/ActionView/Helpers/JavaScriptHelper.html","","<p>Provides functionality for working with JavaScript in your views.\n<p>Ajax, controls and visual effects\n<p>For …\n"],["ActionView::Helpers::NumberHelper","","classes/ActionView/Helpers/NumberHelper.html","","<p>Provides methods for converting numbers into formatted strings. Methods are\nprovided for phone numbers, …\n"],["ActionView::Helpers::NumberHelper::InvalidNumberError","","classes/ActionView/Helpers/NumberHelper/InvalidNumberError.html","","<p>Raised when argument <code>number</code> param given to the helpers is\ninvalid and the option :raise is set to  <code>true</code> …\n"],["ActionView::Helpers::PrototypeHelper","","classes/ActionView/Helpers/PrototypeHelper.html","","<p>Prototype is a JavaScript library that provides DOM manipulation, Ajax\nfunctionality, and more traditional …\n"],["ActionView::Helpers::PrototypeHelper::JavaScriptGenerator","","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator.html","",""],["ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html","","<p>JavaScriptGenerator generates blocks of JavaScript code that allow you to\nchange the content and presentation …\n"],["ActionView::Helpers::RawOutputHelper","","classes/ActionView/Helpers/RawOutputHelper.html","",""],["ActionView::Helpers::RecordTagHelper","","classes/ActionView/Helpers/RecordTagHelper.html","",""],["ActionView::Helpers::SanitizeHelper","","classes/ActionView/Helpers/SanitizeHelper.html","","<p>The SanitizeHelper module provides a set of methods for scrubbing text of\nundesired HTML elements. These …\n"],["ActionView::Helpers::ScriptaculousHelper","","classes/ActionView/Helpers/ScriptaculousHelper.html","","<p>Provides a set of helpers for calling Scriptaculous JavaScript functions,\nincluding those which create …\n"],["ActionView::Helpers::TagHelper","","classes/ActionView/Helpers/TagHelper.html","","<p>Provides methods to generate HTML tags programmatically when you can&#39;t\nuse a Builder. By default, …\n"],["ActionView::Helpers::TextHelper","","classes/ActionView/Helpers/TextHelper.html","","<p>The TextHelper module provides a set of methods for filtering, formatting\nand transforming strings, which …\n"],["ActionView::Helpers::TranslationHelper","","classes/ActionView/Helpers/TranslationHelper.html","",""],["ActionView::Helpers::UrlHelper","","classes/ActionView/Helpers/UrlHelper.html","","<p>Provides a set of methods for making links and getting URLs that depend on\nthe routing subsystem (see …\n"],["ActionView::Layouts","","classes/ActionView/Layouts.html","","<p>Action View Layouts\n"],["ActionView::LogSubscriber","","classes/ActionView/LogSubscriber.html","","<p>Action View Log Subscriber\n<p>Provides functionality so that Rails can output logs from Action View.\n"],["ActionView::LookupContext","","classes/ActionView/LookupContext.html","",""],["ActionView::LookupContext::Details","","classes/ActionView/LookupContext/Details.html","",""],["ActionView::LookupContext::ViewPaths","","classes/ActionView/LookupContext/ViewPaths.html","",""],["ActionView::NonConcattingString","","classes/ActionView/NonConcattingString.html","",""],["ActionView::NullResolver","","classes/ActionView/NullResolver.html","",""],["ActionView::OutputBuffer","","classes/ActionView/OutputBuffer.html","",""],["ActionView::Partials","","classes/ActionView/Partials.html","","<p>Action View Partials\n<p>There&#39;s also a convenience method for rendering sub templates within\nthe current …\n"],["ActionView::Partials::PartialRenderer","","classes/ActionView/Partials/PartialRenderer.html","",""],["ActionView::PathResolver","","classes/ActionView/PathResolver.html","",""],["ActionView::Railtie","","classes/ActionView/Railtie.html","","<p>Action View Railtie\n"],["ActionView::Railtie::ActiveSupport","","classes/ActionView/Railtie/ActiveSupport.html","",""],["ActionView::Rendering","","classes/ActionView/Rendering.html","","<p>Action View Rendering\n"],["ActionView::Resolver","","classes/ActionView/Resolver.html","","<p>Action View Resolver\n"],["ActionView::Template","","classes/ActionView/Template.html","","<p>Action View Template\n<p>Action View Template Handlers\n<p>Action View Text Template\n"],["ActionView::Template::ActionView","","classes/ActionView/Template/ActionView.html","",""],["ActionView::Template::ActionView::Template","","classes/ActionView/Template/ActionView/Template.html","",""],["ActionView::Template::ActionView::Template::Template","","classes/ActionView/Template/ActionView/Template/Template.html","",""],["ActionView::Template::ActionView::Template::Template::Handler","","classes/ActionView/Template/ActionView/Template/Template/Handler.html","",""],["ActionView::Template::Handlers","","classes/ActionView/Template/Handlers.html","",""],["ActionView::Template::Handlers::Builder","","classes/ActionView/Template/Handlers/Builder.html","",""],["ActionView::Template::Handlers::Compilable","","classes/ActionView/Template/Handlers/Compilable.html","",""],["ActionView::Template::Handlers::Compilable::ClassMethods","","classes/ActionView/Template/Handlers/Compilable/ClassMethods.html","",""],["ActionView::Template::Handlers::ERB","","classes/ActionView/Template/Handlers/ERB.html","",""],["ActionView::Template::Handlers::Erubis","","classes/ActionView/Template/Handlers/Erubis.html","",""],["ActionView::Template::Handlers::RJS","","classes/ActionView/Template/Handlers/RJS.html","",""],["ActionView::TestCase","","classes/ActionView/TestCase.html","","<p>Action View Test Case\n"],["ActionView::TestCase::Behavior","","classes/ActionView/TestCase/Behavior.html","",""],["ActionView::TestCase::Behavior::ClassMethods","","classes/ActionView/TestCase/Behavior/ClassMethods.html","",""],["ActionView::TestCase::Behavior::Locals","","classes/ActionView/TestCase/Behavior/Locals.html","",""],["ActionView::TestCase::TestController","","classes/ActionView/TestCase/TestController.html","",""],["ActiveModel","","classes/ActiveModel.html","",""],["ActiveModel::AttributeMethods","","classes/ActiveModel/AttributeMethods.html","","<p>Active Model Attribute Methods\n<p><code>ActiveModel::AttributeMethods</code> provides a way to add prefixes\nand suffixes …\n"],["ActiveModel::AttributeMethods::ClassMethods","","classes/ActiveModel/AttributeMethods/ClassMethods.html","",""],["ActiveModel::AttributeMethods::ClassMethods::AttributeMethodMatcher","","classes/ActiveModel/AttributeMethods/ClassMethods/AttributeMethodMatcher.html","",""],["ActiveModel::BlockValidator","","classes/ActiveModel/BlockValidator.html","","<p>BlockValidator is a special EachValidator which receives a block on\ninitialization and call this block …\n"],["ActiveModel::Callbacks","","classes/ActiveModel/Callbacks.html","","<p>Active Model Callbacks\n<p>Provides an interface for any class to have Active Record like callbacks.\n<p>Like the …\n"],["ActiveModel::Conversion","","classes/ActiveModel/Conversion.html","","<p>Active Model Conversions\n<p>Handles default conversions: to_model, to_key and to_param.\n<p>Example\n"],["ActiveModel::DeprecatedErrorMethods","","classes/ActiveModel/DeprecatedErrorMethods.html","",""],["ActiveModel::Dirty","","classes/ActiveModel/Dirty.html","","<p>Active Model Dirty\n<p>Provides a way to track changes in your object in the same way as Active\nRecord does. …\n"],["ActiveModel::EachValidator","","classes/ActiveModel/EachValidator.html","","<p>EachValidator is a validator which iterates through the attributes given in\nthe options hash invoking …\n"],["ActiveModel::Errors","","classes/ActiveModel/Errors.html","","<p>Active Model Errors\n<p>Provides a modified <code>OrderedHash</code> that you can include in your\nobject for handling error …\n"],["ActiveModel::Lint","","classes/ActiveModel/Lint.html","",""],["ActiveModel::Lint::Tests","","classes/ActiveModel/Lint/Tests.html","","<p>Active Model Lint Tests\n<p>You can test whether an object is compliant with the Active Model API by\nincluding …\n"],["ActiveModel::MassAssignmentSecurity","","classes/ActiveModel/MassAssignmentSecurity.html","","<p>Active Model Mass-Assignment Security\n"],["ActiveModel::MassAssignmentSecurity::BlackList","","classes/ActiveModel/MassAssignmentSecurity/BlackList.html","",""],["ActiveModel::MassAssignmentSecurity::ClassMethods","","classes/ActiveModel/MassAssignmentSecurity/ClassMethods.html","","<p>Mass assignment security provides an interface for protecting attributes\nfrom end-user assignment. For …\n"],["ActiveModel::MassAssignmentSecurity::PermissionSet","","classes/ActiveModel/MassAssignmentSecurity/PermissionSet.html","",""],["ActiveModel::MassAssignmentSecurity::Sanitizer","","classes/ActiveModel/MassAssignmentSecurity/Sanitizer.html","",""],["ActiveModel::MassAssignmentSecurity::WhiteList","","classes/ActiveModel/MassAssignmentSecurity/WhiteList.html","",""],["ActiveModel::MissingAttributeError","","classes/ActiveModel/MissingAttributeError.html","",""],["ActiveModel::Name","","classes/ActiveModel/Name.html","",""],["ActiveModel::Naming","","classes/ActiveModel/Naming.html","","<p>Active Model Naming\n<p>Creates a <code>model_name</code> method on your object.\n<p>To implement, just extend ActiveModel::Naming …\n"],["ActiveModel::Observer","","classes/ActiveModel/Observer.html","","<p>Active Model Observers\n<p>Observer classes respond to life cycle callbacks to implement trigger-like\nbehavior …\n"],["ActiveModel::Observing","","classes/ActiveModel/Observing.html","",""],["ActiveModel::Observing::ClassMethods","","classes/ActiveModel/Observing/ClassMethods.html","",""],["ActiveModel::Serialization","","classes/ActiveModel/Serialization.html","","<p>Active Model Serialization\n<p>Provides a basic serialization to a serializable_hash for your object.\n<p>A minimal …\n"],["ActiveModel::Serializers","","classes/ActiveModel/Serializers.html","","<p>Active Model JSON Serializer\n<p>Active Model XML Serializer\n"],["ActiveModel::Serializers::JSON","","classes/ActiveModel/Serializers/JSON.html","",""],["ActiveModel::Serializers::Xml","","classes/ActiveModel/Serializers/Xml.html","",""],["ActiveModel::Translation","","classes/ActiveModel/Translation.html","","<p>Active Model Translation\n<p>Provides integration between your object and the Rails internationalization\n(i18n) …\n"],["ActiveModel::Validations","","classes/ActiveModel/Validations.html","","<p>Active Model Validations\n<p>Provides a full validation framework to your objects.\n<p>A minimal implementation …\n"],["ActiveModel::Validations::AcceptanceValidator","","classes/ActiveModel/Validations/AcceptanceValidator.html","",""],["ActiveModel::Validations::Callbacks","","classes/ActiveModel/Validations/Callbacks.html","",""],["ActiveModel::Validations::Callbacks::ClassMethods","","classes/ActiveModel/Validations/Callbacks/ClassMethods.html","",""],["ActiveModel::Validations::ClassMethods","","classes/ActiveModel/Validations/ClassMethods.html","",""],["ActiveModel::Validations::ConfirmationValidator","","classes/ActiveModel/Validations/ConfirmationValidator.html","",""],["ActiveModel::Validations::ExclusionValidator","","classes/ActiveModel/Validations/ExclusionValidator.html","",""],["ActiveModel::Validations::FormatValidator","","classes/ActiveModel/Validations/FormatValidator.html","",""],["ActiveModel::Validations::HelperMethods","","classes/ActiveModel/Validations/HelperMethods.html","",""],["ActiveModel::Validations::InclusionValidator","","classes/ActiveModel/Validations/InclusionValidator.html","",""],["ActiveModel::Validations::LengthValidator","","classes/ActiveModel/Validations/LengthValidator.html","",""],["ActiveModel::Validations::NumericalityValidator","","classes/ActiveModel/Validations/NumericalityValidator.html","",""],["ActiveModel::Validations::PresenceValidator","","classes/ActiveModel/Validations/PresenceValidator.html","",""],["ActiveModel::Validator","","classes/ActiveModel/Validator.html","","<p>Active Model Validator\n<p>A simple base class that can be used along with\nActiveModel::Validations::ClassMethods.validates_with …\n"],["ActiveRecord","","classes/ActiveRecord.html","",""],["ActiveRecord::ActiveRecordError","","classes/ActiveRecord/ActiveRecordError.html","","<p>Active Record Errors\n<p>Generic Active Record exception class.\n"],["ActiveRecord::AdapterNotFound","","classes/ActiveRecord/AdapterNotFound.html","","<p>Raised when Active Record cannot find database adapter specified in\n<code>config/database.yml</code> or programmatically. …\n"],["ActiveRecord::AdapterNotSpecified","","classes/ActiveRecord/AdapterNotSpecified.html","","<p>Raised when adapter not specified on connection (or configuration file\n<code>config/database.yml</code> misses adapter …\n"],["ActiveRecord::Aggregations","","classes/ActiveRecord/Aggregations.html","",""],["ActiveRecord::Aggregations::ClassMethods","","classes/ActiveRecord/Aggregations/ClassMethods.html","","<p>Active Record implements aggregation through a macro-like class method\ncalled <code>composed_of</code> for representing …\n"],["ActiveRecord::AssociationPreload","","classes/ActiveRecord/AssociationPreload.html","",""],["ActiveRecord::AssociationPreload::ClassMethods","","classes/ActiveRecord/AssociationPreload/ClassMethods.html","","<p>Implements the details of eager loading of Active Record associations.\nApplication developers should …\n"],["ActiveRecord::AssociationTypeMismatch","","classes/ActiveRecord/AssociationTypeMismatch.html","","<p>Raised when an object assigned to an association has an incorrect type.\n\n<pre><code>class Ticket &lt; ActiveRecord::Base ...\n</code></pre>\n"],["ActiveRecord::Associations","","classes/ActiveRecord/Associations.html","","<p>Active Record Belongs To Associations\n<p>Active Record Belongs To Polymorphic Association\n<p>Active Record Has …\n"],["ActiveRecord::Associations::ClassMethods","","classes/ActiveRecord/Associations/ClassMethods.html","","<p>Associations are a set of macro-like class methods for tying objects\ntogether through foreign keys.  …\n"],["ActiveRecord::Associations::HasOneThroughAssociation","","classes/ActiveRecord/Associations/HasOneThroughAssociation.html","",""],["ActiveRecord::Associations::ThroughAssociationScope","","classes/ActiveRecord/Associations/ThroughAssociationScope.html","",""],["ActiveRecord::AttributeAssignmentError","","classes/ActiveRecord/AttributeAssignmentError.html","","<p>Raised when an error occurred while doing a mass assignment to an attribute\nthrough the <code>attributes=</code> method. …\n"],["ActiveRecord::AttributeMethods","","classes/ActiveRecord/AttributeMethods.html","",""],["ActiveRecord::AttributeMethods::BeforeTypeCast","","classes/ActiveRecord/AttributeMethods/BeforeTypeCast.html","",""],["ActiveRecord::AttributeMethods::ClassMethods","","classes/ActiveRecord/AttributeMethods/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::Dirty","","classes/ActiveRecord/AttributeMethods/Dirty.html","",""],["ActiveRecord::AttributeMethods::PrimaryKey","","classes/ActiveRecord/AttributeMethods/PrimaryKey.html","",""],["ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","","classes/ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::Query","","classes/ActiveRecord/AttributeMethods/Query.html","",""],["ActiveRecord::AttributeMethods::Read","","classes/ActiveRecord/AttributeMethods/Read.html","",""],["ActiveRecord::AttributeMethods::Read::ClassMethods","","classes/ActiveRecord/AttributeMethods/Read/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::TimeZoneConversion","","classes/ActiveRecord/AttributeMethods/TimeZoneConversion.html","",""],["ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods","","classes/ActiveRecord/AttributeMethods/TimeZoneConversion/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::Write","","classes/ActiveRecord/AttributeMethods/Write.html","",""],["ActiveRecord::AttributeMethods::Write::ClassMethods","","classes/ActiveRecord/AttributeMethods/Write/ClassMethods.html","",""],["ActiveRecord::AutosaveAssociation","","classes/ActiveRecord/AutosaveAssociation.html","","<p>Active Record Autosave Association\n<p><code>AutosaveAssociation</code> is a module that takes care of\nautomatically saving …\n"],["ActiveRecord::AutosaveAssociation::ClassMethods","","classes/ActiveRecord/AutosaveAssociation/ClassMethods.html","",""],["ActiveRecord::Base","","classes/ActiveRecord/Base.html","","<p>Active Record\n<p>Active Record objects don&#39;t specify their attributes directly, but\nrather infer them …\n"],["ActiveRecord::Calculations","","classes/ActiveRecord/Calculations.html","",""],["ActiveRecord::Callbacks","","classes/ActiveRecord/Callbacks.html","","<p>Active Record Callbacks\n<p>Callbacks are hooks into the life cycle of an Active Record object that\nallow …\n"],["ActiveRecord::Callbacks::ClassMethods","","classes/ActiveRecord/Callbacks/ClassMethods.html","",""],["ActiveRecord::ConfigurationError","","classes/ActiveRecord/ConfigurationError.html","","<p>Raised when association is being configured improperly or user tries to use\noffset and limit together …\n"],["ActiveRecord::ConnectionAdapters","","classes/ActiveRecord/ConnectionAdapters.html","",""],["ActiveRecord::ConnectionAdapters::AbstractAdapter","","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html","","<p>Active Record supports multiple database systems. AbstractAdapter and\nrelated classes form the abstraction …\n"],["ActiveRecord::ConnectionAdapters::Column","","classes/ActiveRecord/ConnectionAdapters/Column.html","","<p>An abstract definition of a column in a table.\n"],["ActiveRecord::ConnectionAdapters::Column::Format","","classes/ActiveRecord/ConnectionAdapters/Column/Format.html","",""],["ActiveRecord::ConnectionAdapters::ConnectionHandler","","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html","","<p>ConnectionHandler is a collection of ConnectionPool objects. It is used for\nkeeping separate connection …\n"],["ActiveRecord::ConnectionAdapters::ConnectionManagement","","classes/ActiveRecord/ConnectionAdapters/ConnectionManagement.html","",""],["ActiveRecord::ConnectionAdapters::ConnectionPool","","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html","","<p>Connection pool base class for managing Active Record database connections.\n<p>Introduction\n<p>A connection pool …\n"],["ActiveRecord::ConnectionAdapters::DatabaseLimits","","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html","",""],["ActiveRecord::ConnectionAdapters::DatabaseStatements","","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html","",""],["ActiveRecord::ConnectionAdapters::MysqlAdapter","","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html","","<p>The MySQL adapter will work with both Ruby/MySQL, which is a Ruby-based\nMySQL adapter that comes bundled …\n"],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html","","<p>The PostgreSQL adapter works both with the native C\n(ruby.scripting.ca/postgres/) and the pure Ruby (available …\n"],["ActiveRecord::ConnectionAdapters::PostgreSQLColumn","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn.html","",""],["ActiveRecord::ConnectionAdapters::QueryCache","","classes/ActiveRecord/ConnectionAdapters/QueryCache.html","",""],["ActiveRecord::ConnectionAdapters::Quoting","","classes/ActiveRecord/ConnectionAdapters/Quoting.html","",""],["ActiveRecord::ConnectionAdapters::SQLiteAdapter","","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html","","<p>The SQLite adapter works with both the 2.x and 3.x series of SQLite with\nthe sqlite-ruby drivers (available …\n"],["ActiveRecord::ConnectionAdapters::SQLiteAdapter::Version","","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter/Version.html","",""],["ActiveRecord::ConnectionAdapters::SchemaStatements","","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html","",""],["ActiveRecord::ConnectionAdapters::Table","","classes/ActiveRecord/ConnectionAdapters/Table.html","","<p>Represents an SQL table in an abstract way for updating a table. Also see\nTableDefinition and SchemaStatements#create_table …\n"],["ActiveRecord::ConnectionAdapters::TableDefinition","","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html","","<p>Represents the schema of an SQL table in an abstract way. This class\nprovides methods for manipulating …\n"],["ActiveRecord::ConnectionNotEstablished","","classes/ActiveRecord/ConnectionNotEstablished.html","","<p>Raised when connection to the database could not been established (for\nexample when <code>connection=</code> is given …\n"],["ActiveRecord::ConnectionTimeoutError","","classes/ActiveRecord/ConnectionTimeoutError.html","","<p>Raised when a connection could not be obtained within the connection\nacquisition timeout period.\n"],["ActiveRecord::CounterCache","","classes/ActiveRecord/CounterCache.html","","<p>Active Record Counter Cache\n"],["ActiveRecord::DangerousAttributeError","","classes/ActiveRecord/DangerousAttributeError.html","","<p>Raised when attribute has a name reserved by Active Record (when attribute\nhas name of one of Active …\n"],["ActiveRecord::DynamicFinderMatch","","classes/ActiveRecord/DynamicFinderMatch.html","","<p>Active Record Dynamic Finder Match\n<p>Refer to ActiveRecord::Base documentation for Dynamic attribute-based …\n"],["ActiveRecord::DynamicScopeMatch","","classes/ActiveRecord/DynamicScopeMatch.html","","<p>Active Record Dynamic Scope Match\n<p>Provides dynamic attribute-based scopes such as\n<code>scoped_by_price(4.99)</code> …\n"],["ActiveRecord::FinderMethods","","classes/ActiveRecord/FinderMethods.html","",""],["ActiveRecord::InvalidForeignKey","","classes/ActiveRecord/InvalidForeignKey.html","","<p>Raised when a record cannot be inserted or updated because it references a\nnon-existent record.\n"],["ActiveRecord::IrreversibleMigration","","classes/ActiveRecord/IrreversibleMigration.html","","<p>Exception that can be raised to stop migrations from going backwards.\n"],["ActiveRecord::Locking","","classes/ActiveRecord/Locking.html","",""],["ActiveRecord::Locking::Optimistic","","classes/ActiveRecord/Locking/Optimistic.html","","<p>What is Optimistic Locking\n<p>Optimistic locking allows multiple users to access the same record for\nedits, …\n"],["ActiveRecord::Locking::Optimistic::ClassMethods","","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html","",""],["ActiveRecord::Locking::Pessimistic","","classes/ActiveRecord/Locking/Pessimistic.html","","<p>Locking::Pessimistic provides support for row-level locking using SELECT …\nFOR UPDATE and other lock …\n"],["ActiveRecord::LogSubscriber","","classes/ActiveRecord/LogSubscriber.html","",""],["ActiveRecord::Migration","","classes/ActiveRecord/Migration.html","","<p>Active Record Migrations\n<p>Migrations can manage the evolution of a schema used by several physical\ndatabases. …\n"],["ActiveRecord::MigrationProxy","","classes/ActiveRecord/MigrationProxy.html","","<p>MigrationProxy is used to defer loading of the actual migration classes\nuntil they are needed\n"],["ActiveRecord::MultiparameterAssignmentErrors","","classes/ActiveRecord/MultiparameterAssignmentErrors.html","","<p>Raised when there are multiple errors while doing a mass assignment through\nthe <code>attributes</code> method. The …\n"],["ActiveRecord::NamedScope","","classes/ActiveRecord/NamedScope.html","","<p>Active Record Named Scopes\n"],["ActiveRecord::NamedScope::ClassMethods","","classes/ActiveRecord/NamedScope/ClassMethods.html","",""],["ActiveRecord::NestedAttributes","","classes/ActiveRecord/NestedAttributes.html","",""],["ActiveRecord::NestedAttributes::ClassMethods","","classes/ActiveRecord/NestedAttributes/ClassMethods.html","","<p>Active Record Nested Attributes\n<p>Nested attributes allow you to save attributes on associated records\nthrough …\n"],["ActiveRecord::NestedAttributes::TooManyRecords","","classes/ActiveRecord/NestedAttributes/TooManyRecords.html","",""],["ActiveRecord::Observer","","classes/ActiveRecord/Observer.html","","<p>Active Record Observer\n<p>Observer classes respond to life cycle callbacks to implement trigger-like\nbehavior …\n"],["ActiveRecord::Persistence","","classes/ActiveRecord/Persistence.html","","<p>Active Record Persistence\n"],["ActiveRecord::PredicateBuilder","","classes/ActiveRecord/PredicateBuilder.html","",""],["ActiveRecord::PreparedStatementInvalid","","classes/ActiveRecord/PreparedStatementInvalid.html","","<p>Raised when number of bind variables in statement given to\n<code>:condition</code> key (for example, when using <code>find</code> …\n"],["ActiveRecord::QueryCache","","classes/ActiveRecord/QueryCache.html","","<p>Active Record Query Cache\n"],["ActiveRecord::QueryCache::ClassMethods","","classes/ActiveRecord/QueryCache/ClassMethods.html","",""],["ActiveRecord::QueryMethods","","classes/ActiveRecord/QueryMethods.html","",""],["ActiveRecord::Railtie","","classes/ActiveRecord/Railtie.html","","<p>Active Record Railtie\n"],["ActiveRecord::Railtie::ActiveSupport","","classes/ActiveRecord/Railtie/ActiveSupport.html","",""],["ActiveRecord::Railties","","classes/ActiveRecord/Railties.html","",""],["ActiveRecord::Railties::ControllerRuntime","","classes/ActiveRecord/Railties/ControllerRuntime.html","",""],["ActiveRecord::Railties::ControllerRuntime::ClassMethods","","classes/ActiveRecord/Railties/ControllerRuntime/ClassMethods.html","",""],["ActiveRecord::ReadOnlyRecord","","classes/ActiveRecord/ReadOnlyRecord.html","","<p>Raised on attempt to update record that is instantiated as read only.\n"],["ActiveRecord::RecordInvalid","","classes/ActiveRecord/RecordInvalid.html","","<p>Active Record Validations\n<p>Raised by <code>save!</code> and <code>create!</code> when the record is\ninvalid.  Use the <code>record</code> method …\n"],["ActiveRecord::RecordNotFound","","classes/ActiveRecord/RecordNotFound.html","","<p>Raised when Active Record cannot find record by given id or set of ids.\n"],["ActiveRecord::RecordNotSaved","","classes/ActiveRecord/RecordNotSaved.html","","<p>Raised by ActiveRecord::Base.save! and ActiveRecord::Base.create! methods\nwhen record cannot be saved …\n"],["ActiveRecord::RecordNotUnique","","classes/ActiveRecord/RecordNotUnique.html","","<p>Raised when a record cannot be inserted because it would violate a\nuniqueness constraint.\n"],["ActiveRecord::Reflection","","classes/ActiveRecord/Reflection.html","",""],["ActiveRecord::Reflection::ClassMethods","","classes/ActiveRecord/Reflection/ClassMethods.html","","<p>Reflection enables to interrogate Active Record classes and objects about\ntheir associations and aggregations. …\n"],["ActiveRecord::Reflection::MacroReflection","","classes/ActiveRecord/Reflection/MacroReflection.html","","<p>Abstract base class for AggregateReflection and AssociationReflection.\nObjects of AggregateReflection …\n"],["ActiveRecord::Relation","","classes/ActiveRecord/Relation.html","","<p>Active Record Relation\n"],["ActiveRecord::Rollback","","classes/ActiveRecord/Rollback.html","","<p>ActiveRecord::Transactions::ClassMethods.transaction uses this exception to\ndistinguish a deliberate …\n"],["ActiveRecord::Schema","","classes/ActiveRecord/Schema.html","","<p>Active Record Schema\n<p>Allows programmers to programmatically define a schema in a portable DSL.\nThis means …\n"],["ActiveRecord::Serialization","","classes/ActiveRecord/Serialization.html","","<p>Active Record Serialization\n"],["ActiveRecord::SerializationTypeMismatch","","classes/ActiveRecord/SerializationTypeMismatch.html","","<p>Raised when unserialized object&#39;s type mismatches one specified for\nserializable field.\n"],["ActiveRecord::SessionStore","","classes/ActiveRecord/SessionStore.html","","<p>Active Record Session Store\n<p>A session store backed by an Active Record class.  A default class is\nprovided, …\n"],["ActiveRecord::SessionStore::Session","","classes/ActiveRecord/SessionStore/Session.html","","<p>The default Active Record class.\n"],["ActiveRecord::SessionStore::SqlBypass","","classes/ActiveRecord/SessionStore/SqlBypass.html","","<p>A barebones session store which duck-types with the default session store\nbut bypasses Active Record …\n"],["ActiveRecord::SpawnMethods","","classes/ActiveRecord/SpawnMethods.html","",""],["ActiveRecord::StaleObjectError","","classes/ActiveRecord/StaleObjectError.html","","<p>Raised on attempt to save stale record. Record is stale when it&#39;s being\nsaved in another query after …\n"],["ActiveRecord::StatementInvalid","","classes/ActiveRecord/StatementInvalid.html","","<p>Raised when SQL statement cannot be executed by the database (for example,\nit&#39;s often the case for …\n"],["ActiveRecord::TestFixtures","","classes/ActiveRecord/TestFixtures.html","",""],["ActiveRecord::TestFixtures::ClassMethods","","classes/ActiveRecord/TestFixtures/ClassMethods.html","",""],["ActiveRecord::ThrowResult","","classes/ActiveRecord/ThrowResult.html","","<p>Raised when SQL statement is invalid and the application gets a blank\nresult.\n"],["ActiveRecord::Timestamp","","classes/ActiveRecord/Timestamp.html","","<p>Active Record Timestamp\n<p>Active Record automatically timestamps create and update operations if the\ntable …\n"],["ActiveRecord::Transactions","","classes/ActiveRecord/Transactions.html","","<p>See ActiveRecord::Transactions::ClassMethods for documentation.\n"],["ActiveRecord::Transactions::ClassMethods","","classes/ActiveRecord/Transactions/ClassMethods.html","","<p>Active Record Transactions\n<p>Transactions are protective blocks where SQL statements are only permanent\n…\n"],["ActiveRecord::UnknownAttributeError","","classes/ActiveRecord/UnknownAttributeError.html","","<p>Raised when unknown attributes are supplied via mass assignment.\n"],["ActiveRecord::Validations","","classes/ActiveRecord/Validations.html","",""],["ActiveRecord::Validations::AssociatedValidator","","classes/ActiveRecord/Validations/AssociatedValidator.html","",""],["ActiveRecord::Validations::ClassMethods","","classes/ActiveRecord/Validations/ClassMethods.html","",""],["ActiveRecord::Validations::UniquenessValidator","","classes/ActiveRecord/Validations/UniquenessValidator.html","",""],["ActiveRecord::WrappedDatabaseException","","classes/ActiveRecord/WrappedDatabaseException.html","","<p>Parent class for all specific exceptions which wrap database driver\nexceptions provides access to the …\n"],["ActiveSupport","","classes/ActiveSupport.html","","<p>A typical module looks like this\n\n<pre><code>module M\n  def self.included(base)\n    base.send(:extend, ClassMethods) ...\n</code></pre>\n"],["ActiveSupport::Autoload","","classes/ActiveSupport/Autoload.html","",""],["ActiveSupport::BacktraceCleaner","","classes/ActiveSupport/BacktraceCleaner.html","","<p>Many backtraces include too much information that&#39;s not relevant for\nthe context. This makes it hard …\n"],["ActiveSupport::Base64","","classes/ActiveSupport/Base64.html","","<p>Base64 provides utility methods for encoding and de-coding binary data\nusing a base 64 representation. …\n"],["ActiveSupport::BasicObject","","classes/ActiveSupport/BasicObject.html","","<p>A class with no predefined methods that behaves similarly to Builder&#39;s\nBlankSlate. Used for proxy …\n"],["ActiveSupport::Benchmarkable","","classes/ActiveSupport/Benchmarkable.html","",""],["ActiveSupport::BufferedLogger","","classes/ActiveSupport/BufferedLogger.html","","<p>Inspired by the buffered logger idea by Ezra\n"],["ActiveSupport::BufferedLogger::Severity","","classes/ActiveSupport/BufferedLogger/Severity.html","",""],["ActiveSupport::Cache","","classes/ActiveSupport/Cache.html","","<p>See ActiveSupport::Cache::Store for documentation.\n"],["ActiveSupport::Cache::CompressedMemCacheStore","","classes/ActiveSupport/Cache/CompressedMemCacheStore.html","",""],["ActiveSupport::Cache::Entry","","classes/ActiveSupport/Cache/Entry.html","","<p>Entry that is put into caches. It supports expiration time on entries and\ncan compress values to save …\n"],["ActiveSupport::Cache::FileStore","","classes/ActiveSupport/Cache/FileStore.html","","<p>A cache store implementation which stores everything on the filesystem.\n<p>FileStore implements the Strategy::LocalCache …\n"],["ActiveSupport::Cache::MemCacheStore","","classes/ActiveSupport/Cache/MemCacheStore.html","","<p>A cache store implementation which stores data in Memcached:\nwww.danga.com/memcached/\n<p>This is currently …\n"],["ActiveSupport::Cache::MemoryStore","","classes/ActiveSupport/Cache/MemoryStore.html","","<p>A cache store implementation which stores everything into memory in the\nsame process. If you&#39;re running …\n"],["ActiveSupport::Cache::Store","","classes/ActiveSupport/Cache/Store.html","","<p>An abstract cache store class. There are multiple cache store\nimplementations, each having its own additional …\n"],["ActiveSupport::Cache::Strategy","","classes/ActiveSupport/Cache/Strategy.html","",""],["ActiveSupport::Cache::Strategy::LocalCache","","classes/ActiveSupport/Cache/Strategy/LocalCache.html","","<p>Caches that implement LocalCache will be backed by an in memory cache for\nthe duration of a block. Repeated …\n"],["ActiveSupport::Cache::Strategy::LocalCache::LocalStore","","classes/ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html","","<p>Simple memory backed cache. This cache is not thread safe and is intended\nonly for serving as a temporary …\n"],["ActiveSupport::Cache::SynchronizedMemoryStore","","classes/ActiveSupport/Cache/SynchronizedMemoryStore.html","","<p>Like MemoryStore, but thread-safe.\n"],["ActiveSupport::Callbacks","","classes/ActiveSupport/Callbacks.html","","<p>Callbacks are hooks into the life cycle of an object that allow you to\ntrigger logic before or after …\n"],["ActiveSupport::Callbacks::Callback","","classes/ActiveSupport/Callbacks/Callback.html","",""],["ActiveSupport::Callbacks::CallbackChain","","classes/ActiveSupport/Callbacks/CallbackChain.html","","<p>An Array with a compile method\n"],["ActiveSupport::Callbacks::ClassMethods","","classes/ActiveSupport/Callbacks/ClassMethods.html","",""],["ActiveSupport::Concern","","classes/ActiveSupport/Concern.html","",""],["ActiveSupport::Configurable","","classes/ActiveSupport/Configurable.html","",""],["ActiveSupport::Configurable::ClassMethods","","classes/ActiveSupport/Configurable/ClassMethods.html","",""],["ActiveSupport::Dependencies","","classes/ActiveSupport/Dependencies.html","",""],["ActiveSupport::Dependencies::Reference","","classes/ActiveSupport/Dependencies/Reference.html","",""],["ActiveSupport::Dependencies::WatchStack","","classes/ActiveSupport/Dependencies/WatchStack.html","","<p>The WatchStack keeps a stack of the modules being watched as files are\nloaded. If a file in the process …\n"],["ActiveSupport::Deprecation","","classes/ActiveSupport/Deprecation.html","",""],["ActiveSupport::DescendantsTracker","","classes/ActiveSupport/DescendantsTracker.html","","<p>This module provides an internal implementation to track descendants which\nis faster than iterating through …\n"],["ActiveSupport::Duration","","classes/ActiveSupport/Duration.html","","<p>Provides accurate date and time measurements using Date#advance and\nTime#advance, respectively. It mainly …\n"],["ActiveSupport::FileUpdateChecker","","classes/ActiveSupport/FileUpdateChecker.html","","<p>This class is responsible to track files and invoke the given block\nwhenever one of these files are changed. …\n"],["ActiveSupport::Gzip","","classes/ActiveSupport/Gzip.html","","<p>A convenient wrapper for the zlib standard library that allows\ncompression/decompression of strings with …\n"],["ActiveSupport::Gzip::Stream","","classes/ActiveSupport/Gzip/Stream.html","",""],["ActiveSupport::HashWithIndifferentAccess","","classes/ActiveSupport/HashWithIndifferentAccess.html","",""],["ActiveSupport::HashWithIndifferentAccess","","classes/ActiveSupport/HashWithIndifferentAccess.html","",""],["ActiveSupport::Inflector","","classes/ActiveSupport/Inflector.html","","<p>The Inflector transforms words from singular to plural, class names to\ntable names, modularized class …\n"],["ActiveSupport::Inflector::Inflections","","classes/ActiveSupport/Inflector/Inflections.html","","<p>A singleton instance of this class is yielded by Inflector.inflections,\nwhich can then be used to specify …\n"],["ActiveSupport::InheritableOptions","","classes/ActiveSupport/InheritableOptions.html","",""],["ActiveSupport::JSON","","classes/ActiveSupport/JSON.html","",""],["ActiveSupport::JSON::Backends","","classes/ActiveSupport/JSON/Backends.html","",""],["ActiveSupport::JSON::Backends::JSONGem","","classes/ActiveSupport/JSON/Backends/JSONGem.html","",""],["ActiveSupport::JSON::Backends::OkJson","","classes/ActiveSupport/JSON/Backends/OkJson.html","",""],["ActiveSupport::JSON::Backends::OkJson::ParseError","","classes/ActiveSupport/OkJson/Error.html","",""],["ActiveSupport::JSON::Backends::Yajl","","classes/ActiveSupport/JSON/Backends/Yajl.html","",""],["ActiveSupport::JSON::Backends::Yaml","","classes/ActiveSupport/JSON/Backends/Yaml.html","",""],["ActiveSupport::JSON::Encoding","","classes/ActiveSupport/JSON/Encoding.html","",""],["ActiveSupport::JSON::Encoding::CircularReferenceError","","classes/ActiveSupport/JSON/Encoding/CircularReferenceError.html","",""],["ActiveSupport::JSON::Encoding::Encoder","","classes/ActiveSupport/JSON/Encoding/Encoder.html","",""],["ActiveSupport::JSON::Variable","","classes/ActiveSupport/JSON/Variable.html","","<p>A string that returns itself as its JSON-encoded form.\n"],["ActiveSupport::LogSubscriber","","classes/ActiveSupport/LogSubscriber.html","","<p>ActiveSupport::LogSubscriber is an object set to consume\nActiveSupport::Notifications with solely purpose …\n"],["ActiveSupport::LogSubscriber::TestHelper","","classes/ActiveSupport/LogSubscriber/TestHelper.html","","<p>Provides some helpers to deal with testing log subscribers by setting up\nnotifications. Take for instance …\n"],["ActiveSupport::LogSubscriber::TestHelper::MockLogger","","classes/ActiveSupport/LogSubscriber/TestHelper/MockLogger.html","",""],["ActiveSupport::Memoizable","","classes/ActiveSupport/Memoizable.html","",""],["ActiveSupport::Memoizable::InstanceMethods","","classes/ActiveSupport/Memoizable/InstanceMethods.html","",""],["ActiveSupport::MessageEncryptor","","classes/ActiveSupport/MessageEncryptor.html","","<p>MessageEncryptor is a simple way to encrypt values which get stored\nsomewhere you don&#39;t trust.\n<p>The …\n"],["ActiveSupport::MessageEncryptor::InvalidMessage","","classes/ActiveSupport/MessageEncryptor/InvalidMessage.html","",""],["ActiveSupport::MessageVerifier","","classes/ActiveSupport/MessageVerifier.html","","<p>MessageVerifier makes it easy to generate and verify messages which are\nsigned to prevent tampering. …\n"],["ActiveSupport::MessageVerifier::InvalidSignature","","classes/ActiveSupport/MessageVerifier/InvalidSignature.html","",""],["ActiveSupport::Multibyte","","classes/ActiveSupport/Multibyte.html","",""],["ActiveSupport::Multibyte::Chars","","classes/ActiveSupport/Multibyte/Chars.html","","<p>Chars enables you to work transparently with UTF-8 encoding in the Ruby\nString class without having extensive …\n"],["ActiveSupport::Multibyte::EncodingError","","classes/ActiveSupport/Multibyte/EncodingError.html","","<p>Raised when a problem with the encoding was found.\n"],["ActiveSupport::Multibyte::Unicode","","classes/ActiveSupport/Multibyte/Unicode.html","",""],["ActiveSupport::Multibyte::Unicode::Codepoint","","classes/ActiveSupport/Multibyte/Unicode/Codepoint.html","","<p>Holds data about a codepoint in the Unicode database\n"],["ActiveSupport::Multibyte::Unicode::UnicodeDatabase","","classes/ActiveSupport/Multibyte/Unicode/UnicodeDatabase.html","","<p>Holds static data from the Unicode database\n"],["ActiveSupport::Notifications","","classes/ActiveSupport/Notifications.html","","<p>Notifications provides an instrumentation API for Ruby. To instrument an\naction in Ruby you just need …\n"],["ActiveSupport::Notifications::Event","","classes/ActiveSupport/Notifications/Event.html","",""],["ActiveSupport::Notifications::Fanout","","classes/ActiveSupport/Notifications/Fanout.html","","<p>This is a default queue implementation that ships with Notifications. It\njust pushes events to all registered …\n"],["ActiveSupport::Notifications::Instrumenter","","classes/ActiveSupport/Notifications/Instrumenter.html","",""],["ActiveSupport::OkJson","","classes/ActiveSupport/OkJson.html","","<p>Some parts adapted from golang.org/src/pkg/json/decode.go and\ngolang.org/src/pkg/utf8/utf8.go\n"],["ActiveSupport::OkJson::Error","","classes/ActiveSupport/OkJson/Error.html","",""],["ActiveSupport::OkJson::Utf8Error","","classes/ActiveSupport/OkJson/Utf8Error.html","",""],["ActiveSupport::OrderedOptions","","classes/ActiveSupport/OrderedOptions.html","",""],["ActiveSupport::Railtie","","classes/ActiveSupport/Railtie.html","",""],["ActiveSupport::Rescuable","","classes/ActiveSupport/Rescuable.html","","<p>Rescuable module adds support for easier exception handling.\n"],["ActiveSupport::Rescuable::ClassMethods","","classes/ActiveSupport/Rescuable/ClassMethods.html","",""],["ActiveSupport::SafeBuffer","","classes/ActiveSupport/SafeBuffer.html","",""],["ActiveSupport::SafeBuffer::SafeConcatError","","classes/ActiveSupport/SafeBuffer/SafeConcatError.html","",""],["ActiveSupport::SecureRandom","","classes/ActiveSupport/SecureRandom.html","","<p>Secure random number generator interface.\n<p>This library is an interface for secure random number generator …\n"],["ActiveSupport::StringInquirer","","classes/ActiveSupport/StringInquirer.html","","<p>Wrapping a string in this class gives you a prettier way to test for\nequality. The value returned by …\n"],["ActiveSupport::TestCase","","classes/ActiveSupport/TestCase.html","",""],["ActiveSupport::Testing","","classes/ActiveSupport/Testing.html","",""],["ActiveSupport::Testing::Assertions","","classes/ActiveSupport/Testing/Assertions.html","",""],["ActiveSupport::Testing::Declarative","","classes/ActiveSupport/Testing/Declarative.html","",""],["ActiveSupport::Testing::Isolation","","classes/ActiveSupport/Testing/Isolation.html","",""],["ActiveSupport::Testing::Isolation::Forking","","classes/ActiveSupport/Testing/Isolation/Forking.html","",""],["ActiveSupport::Testing::Isolation::MiniTest","","classes/ActiveSupport/Testing/Isolation/MiniTest.html","",""],["ActiveSupport::Testing::Isolation::Subprocess","","classes/ActiveSupport/Testing/Isolation/Subprocess.html","",""],["ActiveSupport::Testing::Isolation::TestUnit","","classes/ActiveSupport/Testing/Isolation/TestUnit.html","",""],["ActiveSupport::Testing::Pending","","classes/ActiveSupport/Testing/Pending.html","",""],["ActiveSupport::Testing::Performance","","classes/ActiveSupport/Testing/Performance.html","",""],["ActiveSupport::Testing::Performance::Benchmarker","","classes/ActiveSupport/Testing/Performance/Benchmarker.html","",""],["ActiveSupport::Testing::Performance::Metrics","","classes/ActiveSupport/Testing/Performance/Metrics.html","",""],["ActiveSupport::Testing::Performance::Metrics::Base","","classes/ActiveSupport/Testing/Performance/Metrics/Base.html","",""],["ActiveSupport::Testing::Performance::Metrics::Base::GC","","classes/ActiveSupport/Testing/Performance/Metrics/Base/GC.html","",""],["ActiveSupport::Testing::Performance::Metrics::CpuTime","","classes/ActiveSupport/Testing/Performance/Metrics/CpuTime.html","",""],["ActiveSupport::Testing::Performance::Metrics::GcRuns","","classes/ActiveSupport/Testing/Performance/Metrics/GcRuns.html","",""],["ActiveSupport::Testing::Performance::Metrics::GcTime","","classes/ActiveSupport/Testing/Performance/Metrics/GcTime.html","",""],["ActiveSupport::Testing::Performance::Metrics::GcTime::GC","","classes/ActiveSupport/Testing/Performance/Metrics/GcTime/GC.html","",""],["ActiveSupport::Testing::Performance::Metrics::Memory","","classes/ActiveSupport/Testing/Performance/Metrics/Memory.html","",""],["ActiveSupport::Testing::Performance::Metrics::Objects","","classes/ActiveSupport/Testing/Performance/Metrics/Objects.html","",""],["ActiveSupport::Testing::Performance::Metrics::ProcessTime","","classes/ActiveSupport/Testing/Performance/Metrics/ProcessTime.html","",""],["ActiveSupport::Testing::Performance::Metrics::Time","","classes/ActiveSupport/Testing/Performance/Metrics/Time.html","",""],["ActiveSupport::Testing::Performance::Metrics::WallTime","","classes/ActiveSupport/Testing/Performance/Metrics/WallTime.html","",""],["ActiveSupport::Testing::Performance::Performer","","classes/ActiveSupport/Testing/Performance/Performer.html","",""],["ActiveSupport::Testing::Performance::Profiler","","classes/ActiveSupport/Testing/Performance/Profiler.html","",""],["ActiveSupport::Testing::ProxyTestResult","","classes/ActiveSupport/Testing/ProxyTestResult.html","",""],["ActiveSupport::Testing::RemoteError","","classes/ActiveSupport/Testing/RemoteError.html","",""],["ActiveSupport::Testing::SetupAndTeardown","","classes/ActiveSupport/Testing/SetupAndTeardown.html","",""],["ActiveSupport::Testing::SetupAndTeardown::ClassMethods","","classes/ActiveSupport/Testing/SetupAndTeardown/ClassMethods.html","",""],["ActiveSupport::Testing::SetupAndTeardown::ForClassicTestUnit","","classes/ActiveSupport/Testing/SetupAndTeardown/ForClassicTestUnit.html","",""],["ActiveSupport::Testing::SetupAndTeardown::ForMiniTest","","classes/ActiveSupport/Testing/SetupAndTeardown/ForMiniTest.html","",""],["ActiveSupport::Testing::SetupAndTeardown::MiniTest","","classes/ActiveSupport/Testing/SetupAndTeardown/MiniTest.html","",""],["ActiveSupport::TimeWithZone","","classes/ActiveSupport/TimeWithZone.html","","<p>A Time-like class that can represent a time in any time zone. Necessary\nbecause standard Ruby Time instances …\n"],["ActiveSupport::TimeZone","","classes/ActiveSupport/TimeZone.html","",""],["ActiveSupport::XmlMini","","classes/ActiveSupport/XmlMini.html","","<p>XmlMini\n<p>To use the much faster libxml parser:\n\n<pre><code>gem &#39;libxml-ruby&#39;, &#39;=0.9.7&#39;\nXmlMini.backend = &#39;LibXML&#39;</code></pre>\n"],["ActiveSupport::XmlMini_LibXMLSAX","","classes/ActiveSupport/XmlMini_LibXMLSAX.html","",""],["ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","","classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html","","<p>Class that will build the hash while the XML document is being parsed using\nSAX events.\n"],["ActiveSupport::XmlMini_Nokogiri","","classes/ActiveSupport/XmlMini_Nokogiri.html","",""],["ActiveSupport::XmlMini_Nokogiri::Nokogiri","","classes/ActiveSupport/XmlMini_Nokogiri/Nokogiri.html","",""],["ActiveSupport::XmlMini_Nokogiri::Nokogiri::XML","","classes/ActiveSupport/XmlMini_Nokogiri/Nokogiri/XML.html","",""],["ActiveSupport::XmlMini_NokogiriSAX","","classes/ActiveSupport/XmlMini_NokogiriSAX.html","",""],["ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html","","<p>Class that will build the hash while the XML document is being parsed using\nSAX events.\n"],["ApplicationController","","classes/ApplicationController.html","",""],["ApplicationHelper","","classes/ApplicationHelper.html","",""],["ArJdbcMySQL","","classes/ArJdbcMySQL.html","","<p>FIXME Remove if ArJdbcMysql will give.\n"],["ArJdbcMySQL::Error","","classes/ArJdbcMySQL/Error.html","",""],["Array","","classes/Array.html","",""],["Benchmark","","classes/Benchmark.html","",""],["BigDecimal","","classes/BigDecimal.html","",""],["BrowsingTest","","classes/BrowsingTest.html","","<p>Profiling results for each test method are written to tmp/performance.\n"],["Class","","classes/Class.html","","<p>Extends the class object with class and instance accessors for class\nattributes, just like the native …\n"],["Commands","","classes/Commands.html","",""],["Commands::Info","","classes/Commands/Info.html","",""],["Commands::Install","","classes/Commands/Install.html","",""],["Commands::Plugin","","classes/Commands/Plugin.html","",""],["Commands::Remove","","classes/Commands/Remove.html","",""],["Date","","classes/Date.html","",""],["DateTime","","classes/DateTime.html","",""],["ERB","","classes/ERB.html","",""],["ERB::Util","","classes/ERB/Util.html","",""],["Encoding","","classes/Encoding.html","",""],["Enumerable","","classes/Enumerable.html","",""],["Erb","","classes/Erb.html","",""],["Erb::Generators","","classes/Erb/Generators.html","",""],["Erb::Generators::ControllerGenerator","","classes/Erb/Generators/ControllerGenerator.html","",""],["Erb::Generators::MailerGenerator","","classes/Erb/Generators/MailerGenerator.html","",""],["Erb::Generators::ScaffoldGenerator","","classes/Erb/Generators/ScaffoldGenerator.html","",""],["FalseClass","","classes/FalseClass.html","",""],["File","","classes/File.html","",""],["Fixnum","","classes/Fixnum.html","",""],["Fixtures","","classes/Fixtures.html","","<p>Fixtures are a way of organizing data that you want to test against; in\nshort, sample data.\n<p>Fixture formats …\n"],["Fixtures::Psych","","classes/Fixtures/Psych.html","",""],["FixturesFileNotFound","","classes/FixturesFileNotFound.html","",""],["Float","","classes/Float.html","",""],["HTML","","classes/HTML.html","",""],["HTML::FullSanitizer","","classes/HTML/FullSanitizer.html","",""],["HTML::LinkSanitizer","","classes/HTML/LinkSanitizer.html","",""],["HTML::Sanitizer","","classes/HTML/Sanitizer.html","",""],["HTML::Selector","","classes/HTML/Selector.html","","<p>Selects HTML elements using CSS 2 selectors.\n<p>The <code>Selector</code> class uses CSS selector expressions to match …\n"],["HTML::Tag","","classes/HTML/Tag.html","",""],["HTML::WhiteListSanitizer","","classes/HTML/WhiteListSanitizer.html","",""],["Hash","","classes/Hash.html","",""],["I18n","","classes/I18n.html","",""],["I18n::ExceptionHandler","","classes/I18n/ExceptionHandler.html","",""],["I18n::Railtie","","classes/I18n/Railtie.html","",""],["Integer","","classes/Integer.html","",""],["Kernel","","classes/Kernel.html","",""],["LibXML","","classes/LibXML.html","",""],["LibXML::XML","","classes/LibXML/XML.html","",""],["LoadError","","classes/LoadError.html","",""],["Logger","","classes/Logger.html","",""],["Logger::SimpleFormatter","","classes/Logger/SimpleFormatter.html","","<p>Simple formatter which only displays the message.\n"],["Mime","","classes/Mime.html","",""],["Mime::Mimes","","classes/Mime/Mimes.html","",""],["Mime::Type","","classes/Mime/Type.html","","<p>Encapsulates the notion of a mime type. Can be used at render time, for\nexample, with:\n\n<pre><code>class PostsController ...\n</code></pre>\n"],["MissingSourceFile","","classes/MissingSourceFile.html","",""],["Module","","classes/Module.html","",""],["NameError","","classes/NameError.html","",""],["NilClass","","classes/NilClass.html","","<p>Extensions to <code>nil</code> which allow for more helpful error messages\nfor people who are new to Rails.\n<p>Ruby raises …\n"],["Numeric","","classes/Numeric.html","",""],["Object","","classes/Object.html","","<p>Most objects are cloneable, but not all. For example you can&#39;t dup\n<code>nil</code>:\n\n<pre><code>nil.dup # =&gt; TypeError: can&#39;t ...\n</code></pre>\n"],["Plugin","","classes/Plugin.html","",""],["Process","","classes/Process.html","",""],["Rails","","classes/Rails.html","",""],["Rails::API","","classes/Rails/API.html","",""],["Rails::API::AppTask","","classes/Rails/API/AppTask.html","",""],["Rails::API::EdgeTask","","classes/Rails/API/EdgeTask.html","",""],["Rails::API::RepoTask","","classes/Rails/API/RepoTask.html","",""],["Rails::API::StableTask","","classes/Rails/API/StableTask.html","",""],["Rails::API::Task","","classes/Rails/API/Task.html","",""],["Rails::ActionMethods","","classes/Rails/ActionMethods.html","",""],["Rails::AppBuilder","","classes/Rails/AppBuilder.html","",""],["Rails::Application","","classes/Rails/Application.html","","<p>In Rails 3.0, a Rails::Application object was introduced which is nothing\nmore than an Engine but with …\n"],["Rails::Application::Bootstrap","","classes/Rails/Application/Bootstrap.html","",""],["Rails::Application::Configurable","","classes/Rails/Application/Configurable.html","",""],["Rails::Application::Configurable::ClassMethods","","classes/Rails/Application/Configurable/ClassMethods.html","",""],["Rails::Application::Configuration","","classes/Rails/Application/Configuration.html","",""],["Rails::Application::Finisher","","classes/Rails/Application/Finisher.html","",""],["Rails::Application::Railties","","classes/Rails/Application/Railties.html","",""],["Rails::BacktraceCleaner","","classes/Rails/BacktraceCleaner.html","",""],["Rails::Configuration","","classes/Rails/Configuration.html","",""],["Rails::Configuration::Deprecated","","classes/Rails/Configuration/Deprecated.html","",""],["Rails::Console","","classes/Rails/Console.html","",""],["Rails::DBConsole","","classes/Rails/DBConsole.html","",""],["Rails::DeprecatedConstant","","classes/Rails/DeprecatedConstant.html","",""],["Rails::Engine","","classes/Rails/Engine.html","","<p>Rails::Engine allows you to wrap a specific Rails application and share it\naccross different applications. …\n"],["Rails::Engine::Configurable","","classes/Rails/Engine/Configurable.html","",""],["Rails::Engine::Configurable::ClassMethods","","classes/Rails/Engine/Configurable/ClassMethods.html","",""],["Rails::Engine::Configuration","","classes/Rails/Engine/Configuration.html","",""],["Rails::Generators","","classes/Rails/Generators.html","",""],["Rails::Generators::Actions","","classes/Rails/Generators/Actions.html","",""],["Rails::Generators::ActiveModel","","classes/Rails/Generators/ActiveModel.html","","<p>ActiveModel is a class to be implemented by each ORM to allow Rails to\ngenerate customized controller …\n"],["Rails::Generators::AppGenerator","","classes/Rails/Generators/AppGenerator.html","",""],["Rails::Generators::Base","","classes/Rails/Generators/Base.html","",""],["Rails::Generators::ControllerGenerator","","classes/Rails/Generators/ControllerGenerator.html","",""],["Rails::Generators::Error","","classes/Rails/Generators/Error.html","",""],["Rails::Generators::GeneratedAttribute","","classes/Rails/Generators/GeneratedAttribute.html","",""],["Rails::Generators::GeneratorGenerator","","classes/Rails/Generators/GeneratorGenerator.html","",""],["Rails::Generators::HelperGenerator","","classes/Rails/Generators/HelperGenerator.html","",""],["Rails::Generators::IntegrationTestGenerator","","classes/Rails/Generators/IntegrationTestGenerator.html","",""],["Rails::Generators::Migration","","classes/Rails/Generators/Migration.html","","<p>Holds common methods for migrations. It assumes that migrations has the\n[0-9]*_name format and can be …\n"],["Rails::Generators::Migration::ClassMethods","","classes/Rails/Generators/Migration/ClassMethods.html","",""],["Rails::Generators::MigrationGenerator","","classes/Rails/Generators/MigrationGenerator.html","",""],["Rails::Generators::ModelGenerator","","classes/Rails/Generators/ModelGenerator.html","",""],["Rails::Generators::NamedBase","","classes/Rails/Generators/NamedBase.html","",""],["Rails::Generators::ObserverGenerator","","classes/Rails/Generators/ObserverGenerator.html","",""],["Rails::Generators::PerformanceTestGenerator","","classes/Rails/Generators/PerformanceTestGenerator.html","",""],["Rails::Generators::PluginGenerator","","classes/Rails/Generators/PluginGenerator.html","",""],["Rails::Generators::ResourceGenerator","","classes/Rails/Generators/ResourceGenerator.html","",""],["Rails::Generators::ResourceHelpers","","classes/Rails/Generators/ResourceHelpers.html","","<p>Deal with controller names on scaffold and add some helpers to deal with\nActiveModel.\n"],["Rails::Generators::ScaffoldControllerGenerator","","classes/Rails/Generators/ScaffoldControllerGenerator.html","",""],["Rails::Generators::ScaffoldGenerator","","classes/Rails/Generators/ScaffoldGenerator.html","",""],["Rails::Generators::SessionMigrationGenerator","","classes/Rails/Generators/SessionMigrationGenerator.html","",""],["Rails::Generators::StylesheetsGenerator","","classes/Rails/Generators/StylesheetsGenerator.html","",""],["Rails::Generators::TestCase","","classes/Rails/Generators/TestCase.html","","<p>This class provides a TestCase for testing generators. To setup, you need\njust to configure the destination …\n"],["Rails::Info","","classes/Rails/Info.html","",""],["Rails::Info::Gem","","classes/Rails/Info/Gem.html","",""],["Rails::InfoController","","classes/Rails/InfoController.html","",""],["Rails::Initializable","","classes/Rails/Initializable.html","",""],["Rails::Initializable::ClassMethods","","classes/Rails/Initializable/ClassMethods.html","",""],["Rails::Initializable::Collection","","classes/Rails/Initializable/Collection.html","",""],["Rails::Initializable::Initializer","","classes/Rails/Initializable/Initializer.html","",""],["Rails::Initializer","","classes/Rails/Initializer.html","",""],["Rails::Paths","","classes/Rails/Paths.html","",""],["Rails::Paths::Path","","classes/Rails/Paths/Path.html","",""],["Rails::Paths::PathParent","","classes/Rails/Paths/PathParent.html","",""],["Rails::Paths::Root","","classes/Rails/Paths/Root.html","",""],["Rails::Plugin","","classes/Rails/Plugin.html","","<p>Rails::Plugin is nothing more than a Rails::Engine, but since it&#39;s\nloaded too late in the boot process, …\n"],["Rails::Rack","","classes/Rails/Rack.html","",""],["Rails::Rack::Debugger","","classes/Rails/Rack/Debugger.html","",""],["Rails::Rack::LogTailer","","classes/Rails/Rack/LogTailer.html","",""],["Rails::Rack::Logger","","classes/Rails/Rack/Logger.html","","<p>Log the request started and flush all loggers after it.\n"],["Rails::Railtie","","classes/Rails/Railtie.html","","<p>Railtie is the core of the Rails Framework and provides several hooks to\nextend Rails and/or modify the …\n"],["Rails::Railtie::Configurable","","classes/Rails/Railtie/Configurable.html","",""],["Rails::Railtie::Configurable::ClassMethods","","classes/Rails/Railtie/Configurable/ClassMethods.html","",""],["Rails::Railtie::Configuration","","classes/Rails/Railtie/Configuration.html","",""],["Rails::ScriptRailsLoader","","classes/Rails/ScriptRailsLoader.html","",""],["Rails::Server","","classes/Rails/Server.html","",""],["Rails::Server::Options","","classes/Rails/Server/Options.html","",""],["Rails::TestUnitRailtie","","classes/Rails/TestUnitRailtie.html","",""],["RailsEnvironment","","classes/RailsEnvironment.html","",""],["Range","","classes/Range.html","",""],["RbConfig","","classes/RbConfig.html","",""],["RecursiveHTTPFetcher","","classes/RecursiveHTTPFetcher.html","",""],["RubyProf","","classes/RubyProf.html","",""],["SourceAnnotationExtractor","","classes/SourceAnnotationExtractor.html","","<p>Implements the logic behind the rake tasks for annotations like\n\n<pre><code>rake notes\nrake notes:optimize</code></pre>\n<p>and friends. …\n"],["SourceAnnotationExtractor::Annotation","","classes/SourceAnnotationExtractor/Annotation.html","",""],["String","","classes/String.html","","<p>String inflections define new methods on the String class to transform\nnames for different purposes. …\n"],["Test","","classes/Test.html","",""],["Test::Unit","","classes/Test/Unit.html","",""],["Test::Unit::Collector","","classes/Test/Unit/Collector.html","",""],["Test::Unit::Collector::ObjectSpace","","classes/Test/Unit/Collector/ObjectSpace.html","",""],["Test::Unit::Util","","classes/Test/Unit/Util.html","",""],["TestUnit","","classes/TestUnit.html","",""],["TestUnit::Generators","","classes/TestUnit/Generators.html","",""],["TestUnit::Generators::ControllerGenerator","","classes/TestUnit/Generators/ControllerGenerator.html","",""],["TestUnit::Generators::HelperGenerator","","classes/TestUnit/Generators/HelperGenerator.html","",""],["TestUnit::Generators::IntegrationGenerator","","classes/TestUnit/Generators/IntegrationGenerator.html","",""],["TestUnit::Generators::MailerGenerator","","classes/TestUnit/Generators/MailerGenerator.html","",""],["TestUnit::Generators::ModelGenerator","","classes/TestUnit/Generators/ModelGenerator.html","",""],["TestUnit::Generators::ObserverGenerator","","classes/TestUnit/Generators/ObserverGenerator.html","",""],["TestUnit::Generators::PerformanceGenerator","","classes/TestUnit/Generators/PerformanceGenerator.html","",""],["TestUnit::Generators::PluginGenerator","","classes/TestUnit/Generators/PluginGenerator.html","",""],["TestUnit::Generators::ScaffoldGenerator","","classes/TestUnit/Generators/ScaffoldGenerator.html","",""],["Time","","classes/Time.html","",""],["TrueClass","","classes/TrueClass.html","",""],["URI","","classes/URI.html","",""],["&","ActiveRecord::SpawnMethods","classes/ActiveRecord/SpawnMethods.html#method-i-26","(r)",""],["+","ActiveModel::MassAssignmentSecurity::PermissionSet","classes/ActiveModel/MassAssignmentSecurity/PermissionSet.html#method-i-2B","(values)",""],["+","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-2B","(other)","<p>Adds another Duration or a Numeric to this Duration. Numeric values are\ntreated as seconds.\n"],["+","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-2B","(other)","<p>Returns a new Chars object containing the <em>other</em> object\nconcatenated to the string.\n<p>Example:\n\n<pre><code>(&#39;Café&#39;.mb_chars ...</code></pre>\n"],["+","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-2B","(other)",""],["+","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-2B","(other)",""],["+","Rails::Initializable::Collection","classes/Rails/Initializable/Collection.html#method-i-2B","(other)",""],["-","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-2D","(other)","<p>Subtracts another Duration or a Numeric from this Duration. Numeric values\nare treated as seconds.\n"],["-","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-2D","(other)",""],["-","Time","classes/Time.html#method-i-2D","(other)",""],["<<","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-3C-3C","(javascript)","<p>Writes raw JavaScript to the page.\n<p>Example:\n\n<pre><code>page &lt;&lt; &quot;alert(&#39;JavaScript with Prototype.&#39;);&quot;</code></pre>\n"],["<<","ActionView::OutputBuffer","classes/ActionView/OutputBuffer.html#method-i-3C-3C","(value)",""],["<<","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-3C-3C","(value)",""],["<<","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-3C-3C","(path)",""],["<<","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-3C-3C","(*)",""],["<=>","ActiveRecord::ConnectionAdapters::SQLiteAdapter::Version","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter/Version.html#method-i-3C-3D-3E","(version_string)",""],["<=>","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-3C-3D-3E","(other)","<p>Returns -1, 0, or 1, depending on whether the Chars object is to be sorted\nbefore, equal or after the …\n"],["<=>","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-3C-3D-3E","(other)","<p>Use the time in UTC for comparisons.\n"],["<=>","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-3C-3D-3E","(zone)","<p>Compare this time zone to the parameter. The two are compared first on\ntheir offsets, and then by name. …\n"],["<=>","DateTime","classes/DateTime.html#method-i-3C-3D-3E","(other)",""],["<=>","Time","classes/Time.html#method-i-3C-3D-3E","(other)",""],["==","ActionDispatch::MiddlewareStack::Middleware","classes/ActionDispatch/MiddlewareStack/Middleware.html#method-i-3D-3D","(middleware)",""],["==","ActionView::FileSystemResolver","classes/ActionView/FileSystemResolver.html#method-i-3D-3D","(resolver)",""],["==","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-3D-3D","(comparison_object)","<p>Returns true if <code>comparison_object</code> is the same exact object, or\n<code>comparison_object</code> is of the same type …\n"],["==","ActiveRecord::Reflection::MacroReflection","classes/ActiveRecord/Reflection/MacroReflection.html#method-i-3D-3D","(other_aggregation)","<p>Returns <code>true</code> if <code>self</code> and\n<code>other_aggregation</code> have the same <code>name</code> attribute,\n<code>active_record</code> attribute, and …\n"],["==","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-3D-3D","(other)",""],["==","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-3D-3D","(other)","<p>Returns true if <code>other</code> is also a Duration instance with the\nsame <code>value</code>, or if <code>other == value</code>.\n"],["==","Mime::Type","classes/Mime/Type.html#method-i-3D-3D","(mime_type)",""],["===","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-3D-3D-3D","(object)","<p>Overwrite the default class equality method to provide support for\nassociation proxies.\n"],["===","ActiveSupport::Multibyte::Unicode::UnicodeDatabase","classes/ActiveSupport/Multibyte/Unicode/UnicodeDatabase.html#method-i-3D-3D-3D","(other)",""],["===","Mime::Type","classes/Mime/Type.html#method-i-3D-3D-3D","(list)",""],["===","Time","classes/Time.html#method-i-3D-3D-3D","(other)","<p>Overriding case equality method so that it returns true for\nActiveSupport::TimeWithZone instances\n"],["=~","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-3D-7E","(other)","<p>Like <code>String#=~</code> only it returns the character offset (in\ncodepoints) instead of the byte offset.\n<p>Example: …\n"],["=~","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-3D-7E","(re)","<p>Compare #name and TZInfo identifier to a supplied regexp, returning true if\na match is found.\n"],["=~","Mime::Type","classes/Mime/Type.html#method-i-3D-7E","(mime_type)",""],[">>","Date","classes/Date.html#method-i-3E-3E","(n)","<p>Backported from 1.9. The one in 1.8 leads to incorrect next_month and\nfriends for dates where the calendar …\n"],["GET","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-GET","()","<p>Override Rack&#39;s GET method to support indifferent access\n"],["POST","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-POST","()","<p>Override Rack&#39;s POST method to support indifferent access\n"],["[]","ActionDispatch::Http::Headers","classes/ActionDispatch/Http/Headers.html#method-i-5B-5D","(header_name)",""],["[]","ActionDispatch::Session::AbstractStore::OptionsHash","classes/ActionDispatch/Session/AbstractStore/OptionsHash.html#method-i-5B-5D","(key)",""],["[]","ActionDispatch::Session::AbstractStore::SessionHash","classes/ActionDispatch/Session/AbstractStore/SessionHash.html#method-i-5B-5D","(key)",""],["[]","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-5B-5D","(id)","<p>Returns a element reference by finding it through <code>id</code> in the\nDOM. This element can then be used for further …\n"],["[]","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-5B-5D","(attribute)","<p>When passed a symbol or a name of a method, returns an array of errors for\nthe method.\n\n<pre><code>p.errors[:name] ...</code></pre>\n"],["[]","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-5B-5D","(attr_name)","<p>Returns the value of the attribute identified by <code>attr_name</code>\nafter it has been typecast (for example, “2004-12-12” …\n"],["[]","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-5B-5D","(name)","<p>Returns a ColumnDefinition for the column with name <code>name</code>.\n"],["[]","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-5B-5D","(*args)",""],["[]","ActiveSupport::OrderedOptions","classes/ActiveSupport/OrderedOptions.html#method-i-5B-5D","(key)",""],["[]","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-5B-5D","(*args)",""],["[]","ActiveSupport::Testing::Performance::Metrics","classes/ActiveSupport/Testing/Performance/Metrics.html#method-c-5B-5D","(name)",""],["[]","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-5B-5D","(arg)","<p>Locate a specific time zone object. If the argument is a string, it is\ninterpreted to mean the name of …\n"],["[]","Mime","classes/Mime.html#method-c-5B-5D","(type)",""],["[]=","ActionDispatch::Session::AbstractStore::SessionHash","classes/ActionDispatch/Session/AbstractStore/SessionHash.html#method-i-5B-5D-3D","(key, value)",""],["[]=","ActionMailer::Base::DeprecatedHeaderProxy","classes/ActionMailer/Base/DeprecatedHeaderProxy.html#method-i-5B-5D-3D","(key, value)",""],["[]=","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-5B-5D-3D","(attribute, error)","<p>Adds to the supplied attribute the supplied error message.\n\n<pre><code>p.errors[:name] = &quot;must be set&quot;\np.errors[:name] ...</code></pre>\n"],["[]=","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-5B-5D-3D","(attr_name, value)","<p>Updates the attribute identified by <code>attr_name</code> with the\nspecified <code>value</code>. (Alias for the protected write_attribute …\n"],["[]=","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-5B-5D-3D","(key, value)","<p>Assigns a new value to the hash:\n\n<pre><code>hash = HashWithIndifferentAccess.new\nhash[:key] = &quot;value&quot;</code></pre>\n"],["[]=","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-5B-5D-3D","(key, value)","<p>Assigns a new value to the hash:\n\n<pre><code>hash = HashWithIndifferentAccess.new\nhash[:key] = &quot;value&quot;</code></pre>\n"],["[]=","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-5B-5D-3D","(*args)","<p>Like <code>String#[]=</code>, except instead of byte offsets you specify\ncharacter offsets.\n<p>Example:\n\n<pre><code>s = &quot;Müller&quot;\ns.mb_chars[2] ...</code></pre>\n"],["[]=","ActiveSupport::OrderedOptions","classes/ActiveSupport/OrderedOptions.html#method-i-5B-5D-3D","(key, value)",""],["__replay__","ActiveSupport::Testing::ProxyTestResult","classes/ActiveSupport/Testing/ProxyTestResult.html#method-i-__replay__","(result)",""],["_all_autoload_paths","Rails::Engine","classes/Rails/Engine.html#method-i-_all_autoload_paths","()",""],["_all_load_paths","Rails::Engine","classes/Rails/Engine.html#method-i-_all_load_paths","()",""],["_assigns","ActionView::TestCase::Behavior","classes/ActionView/TestCase/Behavior.html#method-i-_assigns","()",""],["_compile_filter","ActiveSupport::Callbacks::Callback","classes/ActiveSupport/Callbacks/Callback.html#method-i-_compile_filter","(filter)","<p>Filters support:\n\n<pre><code>Arrays::  Used in conditions. This is used to specify\n          multiple conditions. ...</code></pre>\n"],["_compile_options","ActiveSupport::Callbacks::Callback","classes/ActiveSupport/Callbacks/Callback.html#method-i-_compile_options","(options)","<p>Options support the same options as filters themselves (and support\nsymbols, string, procs, and objects), …\n"],["_compile_per_key_options","ActiveSupport::Callbacks::Callback","classes/ActiveSupport/Callbacks/Callback.html#method-i-_compile_per_key_options","()",""],["_compute_redirect_to_location","ActionController::Redirecting","classes/ActionController/Redirecting.html#method-i-_compute_redirect_to_location","(options)",""],["_dasherize","ActiveSupport::XmlMini","classes/ActiveSupport/XmlMini.html#method-i-_dasherize","(key)",""],["_default_layout","AbstractController::Layouts","classes/AbstractController/Layouts.html#method-i-_default_layout","(require_layout = false)","<p>Returns the default layout for this controller and a given set of details.\nOptionally raises an exception …\n"],["_dump","Time","classes/Time.html#method-i-_dump","(*args)",""],["_dump_without_utc_flag","Time","classes/Time.html#method-i-_dump_without_utc_flag","(*args)",""],["_dump_without_zone","Time","classes/Time.html#method-i-_dump_without_zone","(*args)",""],["_extract_redirect_to_status","ActionController::Redirecting","classes/ActionController/Redirecting.html#method-i-_extract_redirect_to_status","(options, response_status)",""],["_handle_action_missing","AbstractController::Base","classes/AbstractController/Base.html#method-i-_handle_action_missing","()","<p>If the action name was not found, but a method called “action_missing” was\nfound, #method_for_action …\n"],["_handle_method_missing","ActionController::Compatibility","classes/ActionController/Compatibility.html#method-i-_handle_method_missing","()",""],["_implied_layout_name","AbstractController::Layouts::ClassMethods","classes/AbstractController/Layouts/ClassMethods.html#method-i-_implied_layout_name","()","<p>If no layout is supplied, look for a template named the return value of\nthis method.\n<p>Returns\n<p><code>String</code> -  …\n"],["_include_layout?","AbstractController::Layouts","classes/AbstractController/Layouts.html#method-i-_include_layout-3F","(options)",""],["_insert_callbacks","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-_insert_callbacks","(callbacks, block)","<p>Take callback names and an optional callback proc, normalize them, then\ncall the block with each callback. …\n"],["_layout","AbstractController::Layouts","classes/AbstractController/Layouts.html#method-i-_layout","()","<p>This will be overwritten by _write_layout_method\n"],["_layout_for_option","AbstractController::Layouts","classes/AbstractController/Layouts.html#method-i-_layout_for_option","(name)","<p>Determine the layout for a given name and details, taking into account the\nname type.\n<p>Parameters\n<p><code>name</code> - …\n"],["_load","Time","classes/Time.html#method-i-_load","(marshaled_time)",""],["_merge_attributes","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-_merge_attributes","(attr_names)",""],["_mock_session","ActionDispatch::Integration::Session","classes/ActionDispatch/Integration/Session.html#method-i-_mock_session","()",""],["_normalize_args","AbstractController::Rendering","classes/AbstractController/Rendering.html#method-i-_normalize_args","(action=nil, options={})","<p>Normalize options by converting render “foo” to render :action =&gt; “foo”\nand render …\n"],["_normalize_callback_options","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-_normalize_callback_options","(options)","<p>If :only or :except are used, convert the options into the primitive form\n(:per_key) used by ActiveSupport::Callbacks …\n"],["_normalize_legacy_filter","ActiveSupport::Callbacks::Callback","classes/ActiveSupport/Callbacks/Callback.html#method-i-_normalize_legacy_filter","(kind, filter)",""],["_normalize_options","AbstractController::Layouts","classes/AbstractController/Layouts.html#method-i-_normalize_options","(options)",""],["_normalize_options","AbstractController::Rendering","classes/AbstractController/Rendering.html#method-i-_normalize_options","(options)",""],["_normalize_options","ActionController::Compatibility","classes/ActionController/Compatibility.html#method-i-_normalize_options","(options)",""],["_original_to_s","BigDecimal","classes/BigDecimal.html#method-i-_original_to_s","(format = DEFAULT_STRING_FORMAT)",""],["_parse_file","ActiveSupport::XmlMini","classes/ActiveSupport/XmlMini.html#method-i-_parse_file","(file, entity)",""],["_prefix","AbstractController::Rendering","classes/AbstractController/Rendering.html#method-i-_prefix","()","<p>The prefix used in render “foo” shortcuts.\n"],["_process_options","AbstractController::Rendering","classes/AbstractController/Rendering.html#method-i-_process_options","(options)",""],["_read_attribute","ActiveRecord::AttributeMethods::Read","classes/ActiveRecord/AttributeMethods/Read.html#method-i-_read_attribute","(attr_name)",""],["_render_partial","ActionView::TestCase::Behavior::Locals","classes/ActionView/TestCase/Behavior/Locals.html#method-i-_render_partial","(options)",""],["_routes","ActionController::UrlFor","classes/ActionController/UrlFor.html#method-i-_routes","()",""],["_routes","ActionView::TestCase::Behavior","classes/ActionView/TestCase/Behavior.html#method-i-_routes","()",""],["_run_class_setup","ActiveSupport::Testing::Isolation","classes/ActiveSupport/Testing/Isolation.html#method-i-_run_class_setup","()",""],["_save_fragment","ActionController::Caching::Actions","classes/ActionController/Caching/Actions.html#method-i-_save_fragment","(name, options)",""],["_set_detail","ActionView::LookupContext::Details","classes/ActionView/LookupContext/Details.html#method-i-_set_detail","(key, value)",""],["_stash_object_in_method","Class","classes/Class.html#method-i-_stash_object_in_method","(object, method, instance_reader = true)","<p>Take the object being set and store it in a method. This gives us automatic\ninheritance behavior, without …\n"],["_superclass_delegating_accessor","Class","classes/Class.html#method-i-_superclass_delegating_accessor","(name, options = {})",""],["_update_filter","ActiveSupport::Callbacks::Callback","classes/ActiveSupport/Callbacks/Callback.html#method-i-_update_filter","(filter_options, new_options)",""],["_user_defined_ivars","ActionView::TestCase::Behavior","classes/ActionView/TestCase/Behavior.html#method-i-_user_defined_ivars","()",""],["_view","ActionView::TestCase::Behavior","classes/ActionView/TestCase/Behavior.html#method-i-_view","()",""],["_write_layout_method","AbstractController::Layouts::ClassMethods","classes/AbstractController/Layouts/ClassMethods.html#method-i-_write_layout_method","()","<p>Creates a _layout method to be called by _default_layout .\n<p>If a layout is not explicitly mentioned then …\n"],["_write_render_options","ActionController::Renderers::All","classes/ActionController/Renderers/All.html#method-c-_write_render_options","()",""],["_write_render_options","ActionController::Renderers::ClassMethods","classes/ActionController/Renderers/ClassMethods.html#method-i-_write_render_options","()",""],["abbrev","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-abbrev","(s)",""],["abstract!","AbstractController::Base","classes/AbstractController/Base.html#method-i-abstract-21","()","<p>Define a controller as abstract. See internal_methods for more details.\n"],["abstract_class?","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-abstract_class-3F","()","<p>Returns whether this class is an abstract class or not.\n"],["abstract_railtie?","Rails::Railtie","classes/Rails/Railtie.html#method-i-abstract_railtie-3F","()",""],["accept=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-accept-3D","(mime_types)",""],["accepts","ActionDispatch::Http::MimeNegotiation","classes/ActionDispatch/Http/MimeNegotiation.html#method-i-accepts","()","<p>Returns the accepted MIME type for the request.\n"],["accepts_nested_attributes_for","ActiveRecord::NestedAttributes::ClassMethods","classes/ActiveRecord/NestedAttributes/ClassMethods.html#method-i-accepts_nested_attributes_for","(*attr_names)","<p>Defines an attributes writer for the specified association(s). If you are\nusing <code>attr_protected</code> or <code>attr_accessible</code> …\n"],["accessible_attributes","ActiveModel::MassAssignmentSecurity::ClassMethods","classes/ActiveModel/MassAssignmentSecurity/ClassMethods.html#method-i-accessible_attributes","()",""],["action","ActionController::Metal","classes/ActionController/Metal.html#method-c-action","(name, klass = ActionDispatch::Request)","<p>Return a rack endpoint for the given action. Memoize the endpoint, so\nmultiple calls into MyController.action …\n"],["action=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-action-3D","(action_name)",""],["action_has_layout?","AbstractController::Layouts","classes/AbstractController/Layouts.html#method-i-action_has_layout-3F","()",""],["action_has_layout?","AbstractController::Layouts::ClassMethods::LayoutConditions","classes/AbstractController/Layouts/ClassMethods/LayoutConditions.html#method-i-action_has_layout-3F","()","<p>Determines whether the current action has a layout by checking the action\nname against the :only and …\n"],["action_method?","AbstractController::Base","classes/AbstractController/Base.html#method-i-action_method-3F","(name)","<p>Returns true if the name can be considered an action. This can be\noverridden in subclasses to modify …\n"],["action_methods","AbstractController::Base","classes/AbstractController/Base.html#method-i-action_methods","()","<p>A list of method names that should be considered actions. This includes all\npublic instance methods on …\n"],["action_methods","ActionController::HideActions::ClassMethods","classes/ActionController/HideActions/ClassMethods.html#method-i-action_methods","()","<p>Overrides AbstractController::Base#action_methods to remove any methods\nthat are listed as hidden methods. …\n"],["action_methods","ActionController::UrlFor::ClassMethods","classes/ActionController/UrlFor/ClassMethods.html#method-i-action_methods","()",""],["action_options?","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-action_options-3F","(options)",""],["action_path","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-action_path","(name, path = nil)",""],["action_prefix","ActionDispatch::Routing::PolymorphicRoutes","classes/ActionDispatch/Routing/PolymorphicRoutes.html#method-i-action_prefix","(options)",""],["active","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-active","()",""],["active?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-active-3F","()","<p>Checks whether the connection to the database is still active. This\nincludes checking whether the database …\n"],["active?","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-active-3F","()","<p>CONNECTION MANAGEMENT ====================================\n"],["active?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-active-3F","()","<p>Is this connection alive and ready for queries?\n"],["active_authorizer","ActiveModel::MassAssignmentSecurity::ClassMethods","classes/ActiveModel/MassAssignmentSecurity/ClassMethods.html#method-i-active_authorizer","()",""],["acts_like?","Object","classes/Object.html#method-i-acts_like-3F","(duck)","<p>A duck-type assistant method. For example, Active Support extends Date to\ndefine an acts_like_date? method, …\n"],["acts_like_date?","Date","classes/Date.html#method-i-acts_like_date-3F","()","<p>Duck-types as a Date-like class. See Object#acts_like?.\n"],["acts_like_date?","DateTime","classes/DateTime.html#method-i-acts_like_date-3F","()","<p>Duck-types as a Date-like class. See Object#acts_like?.\n"],["acts_like_string?","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-acts_like_string-3F","()","<p>Enable more predictable duck-typing on String-like classes. See\nObject#acts_like?.\n"],["acts_like_string?","String","classes/String.html#method-i-acts_like_string-3F","()","<p>Enable more predictable duck-typing on String-like classes. See\nObject#acts_like?.\n"],["acts_like_time?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-acts_like_time-3F","()","<p>So that <code>self</code> <code>acts_like?(:time)</code>.\n"],["acts_like_time?","DateTime","classes/DateTime.html#method-i-acts_like_time-3F","()","<p>Duck-types as a Time-like class. See Object#acts_like?.\n"],["acts_like_time?","Time","classes/Time.html#method-i-acts_like_time-3F","()","<p>Duck-types as a Time-like class. See Object#acts_like?.\n"],["adapter_name","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-adapter_name","()","<p>Returns the human-readable name of the adapter.  Use mixed case - one can\nalways use downcase if needed. …\n"],["adapter_name","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-adapter_name","()","<p>Returns &#39;PostgreSQL&#39; as adapter name for identification purposes.\n"],["add","ActionController::Renderers","classes/ActionController/Renderers.html#method-c-add","(key, &block)",""],["add","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-add","(attribute, message = nil, options = {})","<p>Adds <code>message</code> to the error messages on <code>attribute</code>,\nwhich will be returned on a call to <code>on(attribute)</code> for …\n"],["add","ActiveSupport::BufferedLogger","classes/ActiveSupport/BufferedLogger.html#method-i-add","(severity, message = nil, progname = nil, &block)",""],["add_association_callbacks","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-add_association_callbacks","(association_name, options)",""],["add_autosave_association_callbacks","ActiveRecord::AutosaveAssociation::ClassMethods","classes/ActiveRecord/AutosaveAssociation/ClassMethods.html#method-i-add_autosave_association_callbacks","(reflection)","<p>Adds validation and save callbacks for the association as specified by the\n<code>reflection</code>.\n<p>For performance …\n"],["add_column","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-add_column","(table_name, column_name, type, options = {})",""],["add_column","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-add_column","(table_name, column_name, type, options = {})","<p>Adds a new column to the named table. See TableDefinition#column for\ndetails of the options you can use. …\n"],["add_column","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_column","(table_name, column_name, type, options = {})","<p>Adds a new column to the named table. See TableDefinition#column for\ndetails of the options you can use. …\n"],["add_column_position!","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-add_column_position-21","(sql, options)",""],["add_confirm_to_attributes!","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-add_confirm_to_attributes-21","(html_options, confirm)",""],["add_counter_cache_callbacks","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-add_counter_cache_callbacks","(reflection)",""],["add_disable_with_to_attributes!","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-add_disable_with_to_attributes-21","(html_options, disable_with)",""],["add_error","ActiveSupport::Testing::ProxyTestResult","classes/ActiveSupport/Testing/ProxyTestResult.html#method-i-add_error","(e)",""],["add_expr_escaped","ActionView::Template::Handlers::Erubis","classes/ActionView/Template/Handlers/Erubis.html#method-i-add_expr_escaped","(src, code)",""],["add_expr_literal","ActionView::Template::Handlers::Erubis","classes/ActionView/Template/Handlers/Erubis.html#method-i-add_expr_literal","(src, code)",""],["add_filter","ActiveSupport::BacktraceCleaner","classes/ActiveSupport/BacktraceCleaner.html#method-i-add_filter","(&block)","<p>Adds a filter from the block provided. Each line in the backtrace will be\nmapped against this filter. …\n"],["add_gem_filters","Rails::BacktraceCleaner","classes/Rails/BacktraceCleaner.html#method-i-add_gem_filters","()",""],["add_index","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_index","(table_name, column_name, options = {})","<p>Adds a new index to the table.  <code>column_name</code> can be a single\nSymbol, or an Array of Symbols.\n<p>The index …\n"],["add_limit_offset!","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-add_limit_offset-21","(sql, options)","<p>Appends <code>LIMIT</code> and <code>OFFSET</code> options to an SQL\nstatement, or some SQL fragment that has the same semantics …\n"],["add_method_to_attributes!","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-add_method_to_attributes-21","(html_options, method)",""],["add_observer","ActiveModel::Observing::ClassMethods","classes/ActiveModel/Observing/ClassMethods.html#method-i-add_observer","(observer)",""],["add_observer!","ActiveRecord::Observer","classes/ActiveRecord/Observer.html#method-i-add_observer-21","(klass)",""],["add_on_blank","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-add_on_blank","(attributes, options = {})","<p>Will add an error message to each of the attributes in\n<code>attributes</code> that is blank (using Object#blank? …\n"],["add_on_empty","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-add_on_empty","(attributes, options = {})","<p>Will add an error message to each of the attributes in\n<code>attributes</code> that is empty.\n"],["add_postamble","ActionView::Template::Handlers::Erubis","classes/ActionView/Template/Handlers/Erubis.html#method-i-add_postamble","(src)",""],["add_preamble","ActionView::Template::Handlers::Erubis","classes/ActionView/Template/Handlers/Erubis.html#method-i-add_preamble","(src)",""],["add_preloaded_record_to_collection","ActiveRecord::AssociationPreload::ClassMethods","classes/ActiveRecord/AssociationPreload/ClassMethods.html#method-i-add_preloaded_record_to_collection","(parent_records, reflection_name, associated_record)",""],["add_preloaded_records_to_collection","ActiveRecord::AssociationPreload::ClassMethods","classes/ActiveRecord/AssociationPreload/ClassMethods.html#method-i-add_preloaded_records_to_collection","(parent_records, reflection_name, associated_record)",""],["add_renderer","ActionController","classes/ActionController.html#method-c-add_renderer","(key, &block)",""],["add_resource_route","Rails::Generators::ResourceGenerator","classes/Rails/Generators/ResourceGenerator.html#method-i-add_resource_route","()",""],["add_routes","Rails::Generators::ControllerGenerator","classes/Rails/Generators/ControllerGenerator.html#method-i-add_routes","()",""],["add_shebang_option!","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-add_shebang_option-21","()","<p>Small macro to add ruby as an option to the generator with proper default\nvalue plus an instance helper …\n"],["add_silencer","ActiveSupport::BacktraceCleaner","classes/ActiveSupport/BacktraceCleaner.html#method-i-add_silencer","(&block)","<p>Adds a silencer from the block provided. If the silencer returns true for a\ngiven line, it&#39;ll be …\n"],["add_source","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-add_source","(source, options={})","<p>Add the given source to Gemfile\n<p>Example\n\n<pre><code>add_source &quot;http://gems.github.com/&quot;</code></pre>\n"],["add_stmt","ActionView::Template::Handlers::Erubis","classes/ActionView/Template/Handlers/Erubis.html#method-i-add_stmt","(src, code)",""],["add_template_helper","AbstractController::Helpers::ClassMethods","classes/AbstractController/Helpers/ClassMethods.html#method-i-add_template_helper","(mod)","<p>Makes all the (instance) methods in the helper module available to\ntemplates rendered through this controller. …\n"],["add_text","ActionView::Template::Handlers::Erubis","classes/ActionView/Template/Handlers/Erubis.html#method-i-add_text","(src, text)",""],["add_timestamps","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_timestamps","(table_name)","<p>Adds timestamps (created_at and updated_at) columns to the named table.\n<p>Examples\n\n<pre><code>add_timestamps(:suppliers)</code></pre>\n"],["add_to_base","ActiveModel::DeprecatedErrorMethods","classes/ActiveModel/DeprecatedErrorMethods.html#method-i-add_to_base","(msg)",""],["add_to_transaction","ActiveRecord::Transactions","classes/ActiveRecord/Transactions.html#method-i-add_to_transaction","()","<p>Add the record to the current transaction so that the :after_rollback and\n:after_commit callbacks can …\n"],["add_touch_callbacks","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-add_touch_callbacks","(reflection, touch_attribute)",""],["add_transaction_record","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-add_transaction_record","(record)","<p>Register a record with the current transaction so that its after_commit and\nafter_rollback callbacks …\n"],["add_whiner","NilClass","classes/NilClass.html#method-c-add_whiner","(klass)",""],["advance","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-advance","(options)",""],["advance","Date","classes/Date.html#method-i-advance","(options)","<p>Provides precise Date calculations for years, months, and days.  The\n<code>options</code> parameter takes a hash with …\n"],["advance","DateTime","classes/DateTime.html#method-i-advance","(options)","<p>Uses Date to provide precise Time calculations for years, months, and days.\nThe <code>options</code> parameter takes …\n"],["advance","Time","classes/Time.html#method-i-advance","(options)","<p>Uses Date to provide precise Time calculations for years, months, and days.\nThe <code>options</code> parameter takes …\n"],["after","ActionDispatch::Callbacks","classes/ActionDispatch/Callbacks.html#method-c-after","(*args, &block)",""],["after","Rails::Initializable::Initializer","classes/Rails/Initializable/Initializer.html#method-i-after","()",""],["after_commit","ActiveRecord::Transactions::ClassMethods","classes/ActiveRecord/Transactions/ClassMethods.html#method-i-after_commit","(*args, &block)",""],["after_dispatch","ActionController::Dispatcher","classes/ActionController/Dispatcher.html#method-i-after_dispatch","(*args, &block)",""],["after_dispatch","Rails::Rack::Logger","classes/Rails/Rack/Logger.html#method-i-after_dispatch","(env)",""],["after_initialize","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-after_initialize","(&block)",""],["after_rollback","ActiveRecord::Transactions::ClassMethods","classes/ActiveRecord/Transactions/ClassMethods.html#method-i-after_rollback","(*args, &block)",""],["after_validation","ActiveModel::Validations::Callbacks::ClassMethods","classes/ActiveModel/Validations/Callbacks/ClassMethods.html#method-i-after_validation","(*args, &block)",""],["aggregate_column","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-aggregate_column","(column_name)",""],["aggregate_mapping","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-aggregate_mapping","(reflection)",""],["ago","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-ago","(time = ::Time.current)","<p>Calculates a new Time or Date that is as far in the past as this Duration\nrepresents.\n"],["ago","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-ago","(other)",""],["ago","Date","classes/Date.html#method-i-ago","(seconds)","<p>Converts Date to a Time (or DateTime if necessary) with the time portion\nset to the beginning of the …\n"],["ago","DateTime","classes/DateTime.html#method-i-ago","(seconds)","<p>Returns a new DateTime representing the time a number of seconds ago Do not\nuse this method in combination …\n"],["ago","Numeric","classes/Numeric.html#method-i-ago","(time = ::Time.current)","<p>Reads best without arguments:  10.minutes.ago\n"],["ago","Time","classes/Time.html#method-i-ago","(seconds)","<p>Returns a new Time representing the time a number of seconds ago, this is\nbasically a wrapper around …\n"],["alert","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-alert","()","<p>Convenience accessor for flash\n"],["alert","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-alert","(message)","<p>Displays an alert dialog with the given <code>message</code>.\n<p>Example:\n\n<pre><code># Generates: alert(&#39;This message is from Rails!&#39;) ...</code></pre>\n"],["alert=","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-alert-3D","(message)","<p>Convenience accessor for flash=\n"],["alias_attribute","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-alias_attribute","(new_name, old_name)",""],["alias_attribute","Module","classes/Module.html#method-i-alias_attribute","(new_name, old_name)","<p>Allows you to make aliases for attributes, which includes getter, setter,\nand query methods.\n<p>Example: …\n"],["alias_method_chain","Module","classes/Module.html#method-i-alias_method_chain","(target, feature)","<p>Encapsulates the common pattern of:\n\n<pre><code>alias_method :foo_without_feature, :foo\nalias_method :foo, :foo_with_feature</code></pre>\n"],["all","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-all","(*args)","<p>A convenience wrapper for <code>find(:all, *args)</code>. You can pass in\nall the same arguments to this method as …\n"],["all","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-all","()","<p>Return an array of all TimeZone objects. There are multiple TimeZone\nobjects per time zone, in many cases, …\n"],["all","Rails::Application::Railties","classes/Rails/Application/Railties.html#method-i-all","(&block)",""],["all","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-c-all","(klass)","<p>GET index\n"],["all","Rails::Plugin","classes/Rails/Plugin.html#method-c-all","(list, paths)",""],["all_application_helpers","ActionController::Helpers::ClassMethods","classes/ActionController/Helpers/ClassMethods.html#method-i-all_application_helpers","()","<p>Extract helper names from files in app/helpers   /*_helper.rb\n"],["all_attributes_exists?","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-all_attributes_exists-3F","(attribute_names)",""],["all_paths","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-all_paths","()",""],["announce","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-announce","(message)",""],["anonymous?","Module","classes/Module.html#method-i-anonymous-3F","()","<p>A module may or may not have a name.\n\n<pre><code>module M; end\nM.name # =&gt; &quot;M&quot;\n\nm = Module.new\nm.name # =&gt; &quot;&quot;\n</code></pre>\n<p>A module …\n"],["any?","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-any-3F","()",""],["api_behavior","ActionController::Responder","classes/ActionController/Responder.html#method-i-api_behavior","(error)","<p>This is the common behavior for “API” requests, like :xml and :json.\n"],["api_dir","Rails::API::AppTask","classes/Rails/API/AppTask.html#method-i-api_dir","()",""],["api_dir","Rails::API::RepoTask","classes/Rails/API/RepoTask.html#method-i-api_dir","()",""],["api_location","ActionController::Responder","classes/ActionController/Responder.html#method-i-api_location","()",""],["api_main","Rails::API::Task","classes/Rails/API/Task.html#method-i-api_main","()",""],["app","ActionDispatch::Integration::Runner","classes/ActionDispatch/Integration/Runner.html#method-i-app","()",""],["app","ActionDispatch::IntegrationTest","classes/ActionDispatch/IntegrationTest.html#method-c-app","()",""],["app","ActionDispatch::IntegrationTest","classes/ActionDispatch/IntegrationTest.html#method-i-app","()",""],["app","Object","classes/Object.html#method-i-app","(create=false)","<p>reference the global “app” instance, created on demand. To recreate the\ninstance, pass a non-false …\n"],["app","Rails::Application","classes/Rails/Application.html#method-i-app","()",""],["app=","ActionDispatch::IntegrationTest","classes/ActionDispatch/IntegrationTest.html#method-c-app-3D","(app)",""],["app_generators","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-app_generators","()","<p>Holds generators configuration:\n\n<pre><code>config.app_generators do |g|\n  g.orm             :datamapper, :migration ...\n</code></pre>\n"],["app_middleware","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-app_middleware","()","<p>This allows you to modify the application&#39;s middlewares from Engines.\n<p>All operations you run on the …\n"],["append=","ActionView::OutputBuffer","classes/ActionView/OutputBuffer.html#method-i-append-3D","(value)",""],["append_conditions","ActiveRecord::AssociationPreload::ClassMethods","classes/ActiveRecord/AssociationPreload/ClassMethods.html#method-i-append_conditions","(reflection, preload_options)",""],["append_features","ActiveSupport::Concern","classes/ActiveSupport/Concern.html#method-i-append_features","(base)",""],["append_if_string=","ActionView::OutputBuffer","classes/ActionView/OutputBuffer.html#method-i-append_if_string-3D","(value)",""],["append_info_to_payload","ActiveRecord::Railties::ControllerRuntime","classes/ActiveRecord/Railties/ControllerRuntime.html#method-i-append_info_to_payload","(payload)",""],["append_view_path","AbstractController::ViewPaths","classes/AbstractController/ViewPaths.html#method-i-append_view_path","(path)",""],["append_view_path","AbstractController::ViewPaths::ClassMethods","classes/AbstractController/ViewPaths/ClassMethods.html#method-i-append_view_path","(path)","<p>Append a path to the list of view paths for this controller.\n<p>Parameters\n<p><code>path</code> - If a String is provided, …\n"],["application","Rails","classes/Rails.html#method-i-application","()",""],["application","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-application","(data=nil, options={}, &block)",""],["application=","Rails","classes/Rails.html#method-i-application-3D","(application)",""],["application_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-application_name","()","<p>Tries to retrieve the application name or simple return application.\n"],["application_trace","ActionDispatch::ShowExceptions","classes/ActionDispatch/ShowExceptions.html#method-i-application_trace","(exception)",""],["apply_common_behavior_for","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-apply_common_behavior_for","(method, resources, options, &block)",""],["apply_finder_options","ActiveRecord::SpawnMethods","classes/ActiveRecord/SpawnMethods.html#method-i-apply_finder_options","(options)",""],["apply_join_dependency","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-apply_join_dependency","(relation, join_dependency)",""],["apply_modules","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-apply_modules","(modules)",""],["arel","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-arel","()",""],["arel_attributes_values","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-arel_attributes_values","(include_primary_key = true, include_readonly_attributes = true, attribute_names = @attributes.keys)","<p>Returns a copy of the attributes hash where all the values have been safely\nquoted for use in an Arel …\n"],["arel_engine","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-arel_engine","()",""],["arel_table","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-arel_table","()",""],["arguments","Rails::Generators::TestCase","classes/Rails/Generators/TestCase.html#method-c-arguments","(array)","<p>Sets default arguments on generator invocation. This can be overwritten\nwhen invoking it.\n\n<pre><code>arguments %w(app_name ...</code></pre>\n"],["arguments_for_call","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-arguments_for_call","(arguments, block = nil)",""],["array_of_strings?","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-array_of_strings-3F","(o)",""],["array_or_string_for_javascript","ActionView::Helpers::ScriptaculousHelper","classes/ActionView/Helpers/ScriptaculousHelper.html#method-i-array_or_string_for_javascript","(option)",""],["array_or_string_for_javascript","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-array_or_string_for_javascript","(option)",""],["arrenc","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-arrenc","(a)",""],["arrparse","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-arrparse","(ts)","<p>Parses an “array” in the sense of RFC 4627. Returns the parsed value and\nany trailing tokens. …\n"],["as_json","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-as_json","(options=nil)","<p>Returns an ActiveSupport::OrderedHash that can be used as the JSON\nrepresentation for this object.\n"],["as_json","ActiveModel::Serializers::JSON","classes/ActiveModel/Serializers/JSON.html#method-i-as_json","(options = nil)","<p>Returns a JSON string representing the model. Some configuration can be\npassed through <code>options</code>.\n<p>The option …\n"],["as_json","ActiveSupport::JSON::Encoding::Encoder","classes/ActiveSupport/JSON/Encoding/Encoder.html#method-i-as_json","(value)","<p>like encode, but only calls as_json, without encoding to string\n"],["as_json","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-as_json","(options = nil)","<p>Coerces time to a string for JSON encoding. The default format is ISO 8601.\nYou can get %Y/%m/%d %H:%M:%S …\n"],["assert_blank","ActiveSupport::Testing::Assertions","classes/ActiveSupport/Testing/Assertions.html#method-i-assert_blank","(object, message=nil)","<p>Test if an expression is blank. Passes if object.blank? is true.\n\n<pre><code>assert_blank [] # =&gt; true\n</code></pre>\n"],["assert_boolean","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-assert_boolean","(result, name)",""],["assert_class_method","Rails::Generators::TestCase","classes/Rails/Generators/TestCase.html#method-i-assert_class_method","(method, content, &block)","<p>Asserts the given class method exists in the given content. This method\ndoes not detect class methods …\n"],["assert_difference","ActiveSupport::Testing::Assertions","classes/ActiveSupport/Testing/Assertions.html#method-i-assert_difference","(expression, difference = 1, message = nil, &block)","<p>Test numeric difference between the return value of an expression as a\nresult of what is evaluated in …\n"],["assert_directory","Rails::Generators::TestCase","classes/Rails/Generators/TestCase.html#method-i-assert_directory","(relative, *contents)",""],["assert_dom_equal","ActionDispatch::Assertions::DomAssertions","classes/ActionDispatch/Assertions/DomAssertions.html#method-i-assert_dom_equal","(expected, actual, message = \"\")","<p>Test two HTML strings for equivalency (e.g., identical up to reordering of\nattributes)\n<p>Examples\n\n<pre><code># assert ...</code></pre>\n"],["assert_dom_not_equal","ActionDispatch::Assertions::DomAssertions","classes/ActionDispatch/Assertions/DomAssertions.html#method-i-assert_dom_not_equal","(expected, actual, message = \"\")","<p>The negated form of <code>assert_dom_equivalent</code>.\n<p>Examples\n\n<pre><code># assert that the referenced method does not generate ...</code></pre>\n"],["assert_field_default_value","Rails::Generators::TestCase","classes/Rails/Generators/TestCase.html#method-i-assert_field_default_value","(attribute_type, value)","<p>Asserts the given attribute type gets a proper default value:\n\n<pre><code>assert_field_type :string, &quot;MyString&quot;</code></pre>\n"],["assert_field_type","Rails::Generators::TestCase","classes/Rails/Generators/TestCase.html#method-i-assert_field_type","(attribute_type, field_type)","<p>Asserts the given attribute type gets translated to a field type properly:\n\n<pre><code>assert_field_type :date, :date_select</code></pre>\n"],["assert_file","Rails::Generators::TestCase","classes/Rails/Generators/TestCase.html#method-i-assert_file","(relative, *contents)","<p>Asserts a given file exists. You need to supply an absolute path or a path\nrelative to the configured …\n"],["assert_generates","ActionDispatch::Assertions::RoutingAssertions","classes/ActionDispatch/Assertions/RoutingAssertions.html#method-i-assert_generates","(expected_path, options, defaults={}, extras = {}, message=nil)","<p>Asserts that the provided options can be used to generate the provided\npath.  This is the inverse of …\n"],["assert_index","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-assert_index","(index, where)",""],["assert_instance_method","Rails::Generators::TestCase","classes/Rails/Generators/TestCase.html#method-i-assert_instance_method","(method, content)","<p>Asserts the given method exists in the given content. When a block is\ngiven, it yields the content of …\n"],["assert_method","Rails::Generators::TestCase","classes/Rails/Generators/TestCase.html#method-i-assert_method","(method, content)",""],["assert_migration","Rails::Generators::TestCase","classes/Rails/Generators/TestCase.html#method-i-assert_migration","(relative, *contents, &block)","<p>Asserts a given file does not exist. You need to supply an absolute path or\na path relative to the configured …\n"],["assert_no_difference","ActiveSupport::Testing::Assertions","classes/ActiveSupport/Testing/Assertions.html#method-i-assert_no_difference","(expression, message = nil, &block)","<p>Assertion that the numeric result of evaluating an expression is not\nchanged before and after invoking …\n"],["assert_no_directory","Rails::Generators::TestCase","classes/Rails/Generators/TestCase.html#method-i-assert_no_directory","(relative)",""],["assert_no_file","Rails::Generators::TestCase","classes/Rails/Generators/TestCase.html#method-i-assert_no_file","(relative)","<p>Asserts a given file does not exist. You need to supply an absolute path or\na path relative to the configured …\n"],["assert_no_migration","Rails::Generators::TestCase","classes/Rails/Generators/TestCase.html#method-i-assert_no_migration","(relative)","<p>Asserts a given migration does not exist. You need to supply an absolute\npath or a path relative to the …\n"],["assert_no_tag","ActionDispatch::Assertions::TagAssertions","classes/ActionDispatch/Assertions/TagAssertions.html#method-i-assert_no_tag","(*opts)","<p>Identical to <code>assert_tag</code>, but asserts that a matching tag does\n<em>not</em> exist. (See <code>assert_tag</code> for a full discussion …\n"],["assert_present","ActiveSupport::Testing::Assertions","classes/ActiveSupport/Testing/Assertions.html#method-i-assert_present","(object, message=nil)","<p>Test if an expression is not blank. Passes if object.present? is true.\n\n<pre><code>assert_present {:data =&gt; &#39;x&#39; } ...\n</code></pre>\n"],["assert_recognizes","ActionDispatch::Assertions::RoutingAssertions","classes/ActionDispatch/Assertions/RoutingAssertions.html#method-i-assert_recognizes","(expected_options, path, extras={}, message=nil)","<p>Asserts that the routing of the given <code>path</code> was handled\ncorrectly and that the parsed options (given in …\n"],["assert_redirected_to","ActionDispatch::Assertions::ResponseAssertions","classes/ActionDispatch/Assertions/ResponseAssertions.html#method-i-assert_redirected_to","(options = {}, message=nil)","<p>Assert that the redirection options passed in match those of the redirect\ncalled in the latest action. …\n"],["assert_response","ActionDispatch::Assertions::ResponseAssertions","classes/ActionDispatch/Assertions/ResponseAssertions.html#method-i-assert_response","(type, message = nil)","<p>Asserts that the response is one of the following types:\n<p><code>:success</code>   - Status code was 200\n<p><code>:redirect</code>  - …\n"],["assert_routing","ActionDispatch::Assertions::RoutingAssertions","classes/ActionDispatch/Assertions/RoutingAssertions.html#method-i-assert_routing","(path, options, defaults={}, extras={}, message=nil)","<p>Asserts that path and options match both ways; in other words, it verifies\nthat <code>path</code> generates <code>options</code> …\n"],["assert_select","ActionDispatch::Assertions::SelectorAssertions","classes/ActionDispatch/Assertions/SelectorAssertions.html#method-i-assert_select","(*args, &block)","<p>An assertion that selects elements and makes one or more equality tests.\n<p>If the first argument is an element, …\n"],["assert_select_email","ActionDispatch::Assertions::SelectorAssertions","classes/ActionDispatch/Assertions/SelectorAssertions.html#method-i-assert_select_email","(&block)","<p>Extracts the body of an email and runs nested assertions on it.\n<p>You must enable deliveries for this assertion …\n"],["assert_select_encoded","ActionDispatch::Assertions::SelectorAssertions","classes/ActionDispatch/Assertions/SelectorAssertions.html#method-i-assert_select_encoded","(element = nil, &block)","<p>Extracts the content of an element, treats it as encoded HTML and runs\nnested assertion on it.\n<p>You typically …\n"],["assert_select_rjs","ActionDispatch::Assertions::SelectorAssertions","classes/ActionDispatch/Assertions/SelectorAssertions.html#method-i-assert_select_rjs","(*args, &block)","<p>Selects content from the RJS response.\n<p>Narrowing down\n<p>With no arguments, asserts that one or more elements …\n"],["assert_tag","ActionDispatch::Assertions::TagAssertions","classes/ActionDispatch/Assertions/TagAssertions.html#method-i-assert_tag","(*opts)","<p>Asserts that there is a tag/node/element in the body of the response that\nmeets all of the given conditions. …\n"],["assert_template","ActionController::TemplateAssertions","classes/ActionController/TemplateAssertions.html#method-i-assert_template","(options = {}, message = nil)","<p>Asserts that the request was rendered with the appropriate template file or\npartials.\n<p>Examples\n\n<pre><code># assert ...</code></pre>\n"],["assert_valid_keys","Hash","classes/Hash.html#method-i-assert_valid_keys","(*valid_keys)","<p>Validate all keys in a hash match *valid keys, raising ArgumentError on a\nmismatch. Note that keys are …\n"],["asset_file_path","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-asset_file_path","(path)",""],["asset_file_path!","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-asset_file_path-21","(path)",""],["assign","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-assign","(variable, value)","<p>Assigns the JavaScript <code>variable</code> the given <code>value</code>.\n<p>Examples:\n\n<pre><code># Generates: my_string = &quot;This is mine!&quot;;\npage.assign ...</code></pre>\n"],["assign_default_content_type_and_charset!","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-assign_default_content_type_and_charset-21","()",""],["assign_multiparameter_attributes","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-assign_multiparameter_attributes","(pairs)","<p>Instantiates objects for all attribute classes that needs more than one\nconstructor parameter. This is …\n"],["assign_shortcuts","ActionController::Compatibility","classes/ActionController/Compatibility.html#method-i-assign_shortcuts","(*)",""],["assigns","ActionDispatch::TestProcess","classes/ActionDispatch/TestProcess.html#method-i-assigns","(key = nil)",""],["assigns","ActionDispatch::TestResponse::DeprecatedHelpers","classes/ActionDispatch/TestResponse/DeprecatedHelpers.html#method-i-assigns","()",""],["associated_records","ActiveRecord::AssociationPreload::ClassMethods","classes/ActiveRecord/AssociationPreload/ClassMethods.html#method-i-associated_records","(ids)","<p>Some databases impose a limit on the number of ids in a list (in Oracle its\n1000) Make several smaller …\n"],["associated_records_to_validate_or_save","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-associated_records_to_validate_or_save","(association, new_record, autosave)","<p>Returns the record for an association collection that should be validated\nor saved. If <code>autosave</code> is <code>false</code> …\n"],["association_accessor_methods","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-association_accessor_methods","(reflection, association_proxy_class)",""],["association_constructor_method","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-association_constructor_method","(constructor, reflection, association_proxy_class)",""],["association_valid?","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-association_valid-3F","(reflection, association)","<p>Returns whether or not the association is valid and applies any errors to\nthe parent, <code>self</code>, if it wasn&#39;t. …\n"],["assume_migrated_upto_version","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-assume_migrated_upto_version","(version, migrations_path = ActiveRecord::Migrator.migrations_path)",""],["at","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-at","(secs)","<p>Method for creating new ActiveSupport::TimeWithZone instance in time zone\nof <code>self</code> from number of seconds …\n"],["at","String","classes/String.html#method-i-at","(position)","<p>Returns the character at the <code>position</code> treating the string as\nan array (where 0 is the first character). …\n"],["at_beginning_of_day","Date","classes/Date.html#method-i-at_beginning_of_day","()",""],["at_beginning_of_day","DateTime","classes/DateTime.html#method-i-at_beginning_of_day","()",""],["at_beginning_of_day","Time","classes/Time.html#method-i-at_beginning_of_day","()",""],["at_beginning_of_month","Date","classes/Date.html#method-i-at_beginning_of_month","()",""],["at_beginning_of_month","Time","classes/Time.html#method-i-at_beginning_of_month","()",""],["at_beginning_of_quarter","Date","classes/Date.html#method-i-at_beginning_of_quarter","()",""],["at_beginning_of_quarter","Time","classes/Time.html#method-i-at_beginning_of_quarter","()",""],["at_beginning_of_week","Date","classes/Date.html#method-i-at_beginning_of_week","()",""],["at_beginning_of_week","Time","classes/Time.html#method-i-at_beginning_of_week","()",""],["at_beginning_of_year","Date","classes/Date.html#method-i-at_beginning_of_year","()",""],["at_beginning_of_year","Time","classes/Time.html#method-i-at_beginning_of_year","()",""],["at_end_of_month","Date","classes/Date.html#method-i-at_end_of_month","()",""],["at_end_of_month","Time","classes/Time.html#method-i-at_end_of_month","()",""],["at_end_of_quarter","Date","classes/Date.html#method-i-at_end_of_quarter","()",""],["at_end_of_quarter","Time","classes/Time.html#method-i-at_end_of_quarter","()",""],["at_end_of_week","Date","classes/Date.html#method-i-at_end_of_week","()",""],["at_end_of_week","Time","classes/Time.html#method-i-at_end_of_week","()",""],["at_end_of_year","Date","classes/Date.html#method-i-at_end_of_year","()",""],["at_end_of_year","Time","classes/Time.html#method-i-at_end_of_year","()",""],["at_midnight","Date","classes/Date.html#method-i-at_midnight","()",""],["at_midnight","DateTime","classes/DateTime.html#method-i-at_midnight","()",""],["at_midnight","Time","classes/Time.html#method-i-at_midnight","()",""],["atom_feed","ActionView::Helpers::AtomFeedHelper","classes/ActionView/Helpers/AtomFeedHelper.html#method-i-atom_feed","(options = {}, &block)","<p>Adds easy defaults to writing Atom feeds with the Builder template engine\n(this does not work on ERb …\n"],["atomic_write","File","classes/File.html#method-c-atomic_write","(file_name, temp_dir = Dir.tmpdir)","<p>Write to a file atomically.  Useful for situations where you don&#39;t want\nother processes or threads …\n"],["attach_to","ActiveSupport::LogSubscriber","classes/ActiveSupport/LogSubscriber.html#method-i-attach_to","(namespace, log_subscriber=new, notifier=ActiveSupport::Notifications)",""],["attachments","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-attachments","()","<p>Allows you to add attachments to an email, like so:\n\n<pre><code>mail.attachments[&#39;filename.jpg&#39;] = File.read(&#39;/path/to/filename.jpg&#39;)</code></pre>\n"],["attr_accessible","ActiveModel::MassAssignmentSecurity::ClassMethods","classes/ActiveModel/MassAssignmentSecurity/ClassMethods.html#method-i-attr_accessible","(*names)","<p>Specifies a white list of model attributes that can be set via\nmass-assignment.\n<p>This is the opposite of …\n"],["attr_accessor_with_default","Module","classes/Module.html#method-i-attr_accessor_with_default","(sym, default = nil, &block)","<p>Declare an attribute accessor with an initial default return value.\n<p>To give attribute <code>:age</code> the initial …\n"],["attr_internal","Module","classes/Module.html#method-i-attr_internal","(*attrs)",""],["attr_internal_accessor","Module","classes/Module.html#method-i-attr_internal_accessor","(*attrs)","<p>Declares an attribute reader and writer backed by an internally-named\ninstance variable.\n"],["attr_internal_ivar_name","Module","classes/Module.html#method-i-attr_internal_ivar_name","(attr)",""],["attr_internal_reader","Module","classes/Module.html#method-i-attr_internal_reader","(*attrs)","<p>Declares an attribute reader backed by an internally-named instance\nvariable.\n"],["attr_internal_writer","Module","classes/Module.html#method-i-attr_internal_writer","(*attrs)","<p>Declares an attribute writer backed by an internally-named instance\nvariable.\n"],["attr_protected","ActiveModel::MassAssignmentSecurity::ClassMethods","classes/ActiveModel/MassAssignmentSecurity/ClassMethods.html#method-i-attr_protected","(*names)","<p>Attributes named in this macro are protected from mass-assignment whenever\nattributes are sanitized before …\n"],["attr_readonly","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-attr_readonly","(*attributes)","<p>Attributes listed as readonly will be used to create a new record but\nupdate operations will ignore these …\n"],["attribute","ActiveRecord::AttributeMethods::Read","classes/ActiveRecord/AttributeMethods/Read.html#method-i-attribute","(attribute_name)",""],["attribute=","ActiveRecord::AttributeMethods::Write","classes/ActiveRecord/AttributeMethods/Write.html#method-i-attribute-3D","(attribute_name, value)","<p>Handle *= for method_missing.\n"],["attribute?","ActiveRecord::AttributeMethods::Query","classes/ActiveRecord/AttributeMethods/Query.html#method-i-attribute-3F","(attribute_name)","<p>Handle *? for method_missing.\n"],["attribute_before_type_cast","ActiveRecord::AttributeMethods::BeforeTypeCast","classes/ActiveRecord/AttributeMethods/BeforeTypeCast.html#method-i-attribute_before_type_cast","(attribute_name)","<p>Handle *_before_type_cast for method_missing.\n"],["attribute_change","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-attribute_change","(attr)","<p>Handle <code>*_change</code> for <code>method_missing</code>.\n"],["attribute_changed?","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-attribute_changed-3F","(attr)","<p>Handle <code>*_changed?</code> for <code>method_missing</code>.\n"],["attribute_for_inspect","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-attribute_for_inspect","(attr_name)","<p>Returns an <code>#inspect</code>-like string for the value of the attribute\n<code>attr_name</code>. String attributes are elided …\n"],["attribute_match","HTML::Selector","classes/HTML/Selector.html#method-i-attribute_match","(equality, value)","<p>Create a regular expression to match an attribute value based on the\nequality operator (=, ^=, |=, etc). …\n"],["attribute_method?","ActiveModel::AttributeMethods","classes/ActiveModel/AttributeMethods.html#method-i-attribute_method-3F","(attr_name)",""],["attribute_method?","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-attribute_method-3F","(attribute)","<p>Check if method is an attribute method or not.\n"],["attribute_method?","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-attribute_method-3F","(attribute)",""],["attribute_method_affix","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-attribute_method_affix","(*affixes)","<p>Declares a method available for all attributes with the given prefix and\nsuffix. Uses <code>method_missing</code> …\n"],["attribute_method_prefix","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-attribute_method_prefix","(*prefixes)","<p>Declares a method available for all attributes with the given prefix. Uses\n<code>method_missing</code> and <code>respond_to?</code> …\n"],["attribute_method_suffix","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-attribute_method_suffix","(*suffixes)","<p>Declares a method available for all attributes with the given suffix. Uses\n<code>method_missing</code> and <code>respond_to?</code> …\n"],["attribute_methods_generated?","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-attribute_methods_generated-3F","()","<p>Returns true if the attribute methods defined have been generated.\n"],["attribute_names","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-attribute_names","()","<p>Returns an array of names for the attributes available on this object\nsorted alphabetically.\n"],["attribute_present?","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-attribute_present-3F","(attribute)","<p>Returns true if the specified <code>attribute</code> has been set by the\nuser or by a database load and is neither …\n"],["attribute_was","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-attribute_was","(attr)","<p>Handle <code>*_was</code> for <code>method_missing</code>.\n"],["attribute_will_change!","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-attribute_will_change-21","(attr)","<p>Handle <code>*_will_change!</code> for <code>method_missing</code>.\n"],["attributes","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-attributes","()","<p>Returns a hash of all the attributes with their names as keys and the\nvalues of the attributes as values. …\n"],["attributes=","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-attributes-3D","(new_attributes, guard_protected_attributes = true)","<p>Allows you to set all the attributes at once by passing in a hash with keys\nmatching the attribute names …\n"],["attributes_before_type_cast","ActiveRecord::AttributeMethods::BeforeTypeCast","classes/ActiveRecord/AttributeMethods/BeforeTypeCast.html#method-i-attributes_before_type_cast","()","<p>Returns a hash of attributes before typecasting and deserialization.\n"],["attributes_from_column_definition","ActiveRecord::Locking::Optimistic","classes/ActiveRecord/Locking/Optimistic.html#method-i-attributes_from_column_definition","()",""],["attributes_from_column_definition","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-attributes_from_column_definition","()","<p>Initializes the attributes array with keys matching the columns from the\nlinked table and the values …\n"],["attributes_protected_by_default","ActiveModel::MassAssignmentSecurity::ClassMethods","classes/ActiveModel/MassAssignmentSecurity/ClassMethods.html#method-i-attributes_protected_by_default","()",""],["attributes_protected_by_default","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-attributes_protected_by_default","()","<p>The primary key and inheritance column can never be set by mass-assignment\nfor security reasons.\n"],["audio_path","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-audio_path","(source)","<p>Computes the path to an audio asset in the public audios directory. Full\npaths from the document root …\n"],["audio_tag","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-audio_tag","(source, options = {})","<p>Returns an html audio tag for the <code>source</code>. The\n<code>source</code> can be full path or file that exists in your public …\n"],["authenticate","ActionController::HttpAuthentication::Basic","classes/ActionController/HttpAuthentication/Basic.html#method-i-authenticate","(request, &login_procedure)",""],["authenticate_or_request_with_http_basic","ActionController::HttpAuthentication::Basic::ControllerMethods","classes/ActionController/HttpAuthentication/Basic/ControllerMethods.html#method-i-authenticate_or_request_with_http_basic","(realm = \"Application\", &login_procedure)",""],["authenticate_with_http_basic","ActionController::HttpAuthentication::Basic::ControllerMethods","classes/ActionController/HttpAuthentication/Basic/ControllerMethods.html#method-i-authenticate_with_http_basic","(&login_procedure)",""],["authentication_request","ActionController::HttpAuthentication::Basic","classes/ActionController/HttpAuthentication/Basic.html#method-i-authentication_request","(controller, realm)",""],["authorization","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-authorization","()","<p>Returns the authorization header regardless of whether it was specified\ndirectly or through one of the …\n"],["auto_discovery_link_tag","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-auto_discovery_link_tag","(type = :rss, url_options = {}, tag_options = {})","<p>Returns a link tag that browsers and news readers can use to auto-detect an\nRSS or ATOM feed. The <code>type</code> …\n"],["auto_flush","ActiveSupport::BufferedLogger","classes/ActiveSupport/BufferedLogger.html#method-i-auto_flush","()",""],["auto_flushing=","ActiveSupport::BufferedLogger","classes/ActiveSupport/BufferedLogger.html#method-i-auto_flushing-3D","(period)","<p>Set the auto-flush period. Set to true to flush after every log message, to\nan integer to flush every …\n"],["auto_link","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-auto_link","(text, *args, &block)","<p>Turns all URLs and e-mail addresses into clickable links. The\n<code>:link</code> option will limit what should be …\n"],["auto_link_email_addresses","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-auto_link_email_addresses","(text, html_options = {}, options = {})","<p>Turns all email addresses into clickable links.  If a block is given, each\nemail is yielded and the result …\n"],["auto_link_urls","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-auto_link_urls","(text, html_options = {}, options = {})","<p>Turns all urls into clickable links.  If a block is given, each url is\nyielded and the result is used …\n"],["auto_linked?","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-auto_linked-3F","(left, right)","<p>Detects already linked context or position in the middle of a tag\n"],["autoload","ActiveSupport::Autoload","classes/ActiveSupport/Autoload.html#method-i-autoload","(const_name, path = @@at_path)",""],["autoload_at","ActiveSupport::Autoload","classes/ActiveSupport/Autoload.html#method-i-autoload_at","(path)",""],["autoload_once","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-autoload_once","()",""],["autoload_once_paths","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-i-autoload_once_paths","()",""],["autoload_paths","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-i-autoload_paths","()",""],["autoload_paths","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-autoload_paths","()",""],["autoload_under","ActiveSupport::Autoload","classes/ActiveSupport/Autoload.html#method-i-autoload_under","(path)",""],["autoloads","ActiveSupport::Autoload","classes/ActiveSupport/Autoload.html#method-i-autoloads","()",""],["available_views","Erb::Generators::ScaffoldGenerator","classes/Erb/Generators/ScaffoldGenerator.html#method-i-available_views","()",""],["average","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-average","(column_name, options = {})","<p>Calculates the average value on a given column. Returns <code>nil</code> if\nthere&#39;s no row. See <code>calculate</code> for …\n"],["backend","ActiveSupport::JSON","classes/ActiveSupport/JSON.html#method-i-backend","()",""],["backend=","ActiveSupport::JSON","classes/ActiveSupport/JSON.html#method-i-backend-3D","(name)",""],["backend=","ActiveSupport::XmlMini","classes/ActiveSupport/XmlMini.html#method-i-backend-3D","(name)",""],["backtrace_cleaner","Rails","classes/Rails.html#method-i-backtrace_cleaner","()",""],["bang?","ActiveRecord::DynamicFinderMatch","classes/ActiveRecord/DynamicFinderMatch.html#method-i-bang-3F","()",""],["banner","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-banner","()","<p>Use Rails default banner.\n"],["base64","ActiveSupport::SecureRandom","classes/ActiveSupport/SecureRandom.html#method-c-base64","(n=nil)","<p>SecureRandom.base64 generates a random base64 string.\n<p>The argument n specifies the length of the random …\n"],["base_class","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-base_class","()","<p>Returns the base AR subclass that this class descends from. If A extends\nAR::Base, A.base_class will …\n"],["base_name","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-base_name","()","<p>Sets the base_name taking into account the current class namespace.\n"],["base_root","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-base_root","()","<p>Returns the base root for a common set of generators. This is used to\ndynamically guess the default source …\n"],["becomes","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-becomes","(klass)","<p>Returns an instance of the specified <code>klass</code> with the attributes\nof the current record. This is mostly …\n"],["before","ActionDispatch::Callbacks","classes/ActionDispatch/Callbacks.html#method-c-before","(*args, &block)",""],["before","Rails::Initializable::Initializer","classes/Rails/Initializable/Initializer.html#method-i-before","()",""],["before_configuration","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-before_configuration","(&block)",""],["before_dispatch","ActionController::Dispatcher","classes/ActionController/Dispatcher.html#method-i-before_dispatch","(*args, &block)",""],["before_dispatch","Rails::Rack::Logger","classes/Rails/Rack/Logger.html#method-i-before_dispatch","(env)",""],["before_eager_load","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-before_eager_load","(&block)",""],["before_filters","ActionController::Testing::ClassMethods","classes/ActionController/Testing/ClassMethods.html#method-i-before_filters","()",""],["before_initialize","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-before_initialize","(&block)",""],["before_save_collection_association","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-before_save_collection_association","()","<p>Is used as a before_save callback to check while saving a collection\nassociation whether or not the parent …\n"],["before_validation","ActiveModel::Validations::Callbacks::ClassMethods","classes/ActiveModel/Validations/Callbacks/ClassMethods.html#method-i-before_validation","(*args, &block)",""],["begin_db_transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-begin_db_transaction","()","<p>Begins the transaction (and turns off auto-committing).\n"],["begin_db_transaction","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-begin_db_transaction","()","<p>Begins a transaction.\n"],["beginning_of_day","Date","classes/Date.html#method-i-beginning_of_day","()","<p>Converts Date to a Time (or DateTime if necessary) with the time portion\nset to the beginning of the …\n"],["beginning_of_day","DateTime","classes/DateTime.html#method-i-beginning_of_day","()","<p>Returns a new DateTime representing the start of the day (0:00)\n"],["beginning_of_day","Time","classes/Time.html#method-i-beginning_of_day","()","<p>Returns a new Time representing the start of the day (0:00)\n"],["beginning_of_month","Date","classes/Date.html#method-i-beginning_of_month","()","<p>Returns a new ; DateTime objects will have time set to 0:00DateTime\nrepresenting the start of the month …\n"],["beginning_of_month","Time","classes/Time.html#method-i-beginning_of_month","()","<p>Returns a new Time representing the start of the month (1st of the month,\n0:00)\n"],["beginning_of_quarter","Date","classes/Date.html#method-i-beginning_of_quarter","()","<p>Returns a new Date/DateTime representing the start of the quarter (1st of\njanuary, april, july, october; …\n"],["beginning_of_quarter","Time","classes/Time.html#method-i-beginning_of_quarter","()","<p>Returns  a new Time representing the start of the quarter (1st of january,\napril, july, october, 0:00) …\n"],["beginning_of_week","Date","classes/Date.html#method-i-beginning_of_week","()","<p>Returns a new Date/DateTime representing the “start” of this week (i.e,\nMonday; DateTime objects …\n"],["beginning_of_week","Time","classes/Time.html#method-i-beginning_of_week","()","<p>Returns a new Time representing the “start” of this week (Monday, 0:00)\n"],["beginning_of_year","Date","classes/Date.html#method-i-beginning_of_year","()","<p>Returns a new Date/DateTime representing the start of the year (1st of\njanuary; DateTime objects will …\n"],["beginning_of_year","Time","classes/Time.html#method-i-beginning_of_year","()","<p>Returns  a new Time representing the start of the year (1st of january,\n0:00)\n"],["behavior","ActiveSupport::Deprecation","classes/ActiveSupport/Deprecation.html#method-i-behavior","()",""],["behavior=","ActiveSupport::Deprecation","classes/ActiveSupport/Deprecation.html#method-i-behavior-3D","(behavior)",""],["belongs_to","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-belongs_to","(association_id, options = {})","<p>Specifies a one-to-one association with another class. This method should\nonly be used if this class …\n"],["belongs_to","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-belongs_to","(*args)",""],["belongs_to","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-belongs_to","(*args)",""],["benchmark","ActiveSupport::Benchmarkable","classes/ActiveSupport/Benchmarkable.html#method-i-benchmark","(message = \"Benchmarking\", options = {})","<p>Allows you to measure the execution time of a block in a template and\nrecords the result to the log. …\n"],["benchmark","ActiveSupport::Testing::Performance::Metrics::Base","classes/ActiveSupport/Testing/Performance/Metrics/Base.html#method-i-benchmark","()",""],["best_install_method","RailsEnvironment","classes/RailsEnvironment.html#method-i-best_install_method","()",""],["between?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-between-3F","(min, max)",""],["binary_content","ActionDispatch::TestResponse::DeprecatedHelpers","classes/ActionDispatch/TestResponse/DeprecatedHelpers.html#method-i-binary_content","()","<p>Returns binary content (downloadable file), converted to a String\n"],["binary_to_string","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-i-binary_to_string","(value)","<p>Used to convert from BLOBs to Strings\n"],["bind","Rails::Initializable::Initializer","classes/Rails/Initializable/Initializer.html#method-i-bind","(context)",""],["blank?","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-blank-3F","()",""],["blank?","Object","classes/Object.html#method-i-blank-3F","()","<p>An object is blank if it&#39;s false, empty, or a whitespace string. For\nexample, “”, “ …\n"],["block_to_function","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-block_to_function","(block)",""],["body","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-body","()","<p>The request body is an IO input stream. If the RAW_POST_DATA environment\nvariable is already set, wrap …\n"],["body","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-body","()",""],["body=","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-body-3D","(body)",""],["body_parts","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-body_parts","()",""],["breakpoint","Kernel","classes/Kernel.html#method-i-breakpoint","()",""],["buffer","ActiveSupport::BufferedLogger","classes/ActiveSupport/BufferedLogger.html#method-i-buffer","()",""],["build","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-build","(app = nil, &block)",""],["build","ActionDispatch::MiddlewareStack::Middleware","classes/ActionDispatch/MiddlewareStack/Middleware.html#method-i-build","(app)",""],["build","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-build","(*args, &block)",""],["build","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-c-build","(klass, params=nil)","<p>GET new POST create\n"],["build_arel","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-build_arel","()",""],["build_callbacks","ActionView::Helpers::PrototypeHelper","classes/ActionView/Helpers/PrototypeHelper.html#method-i-build_callbacks","(options)",""],["build_conditions","ActiveRecord::Associations::ThroughAssociationScope","classes/ActiveRecord/Associations/ThroughAssociationScope.html#method-i-build_conditions","()",""],["build_from_hash","ActiveRecord::PredicateBuilder","classes/ActiveRecord/PredicateBuilder.html#method-i-build_from_hash","(attributes, default_table, allow_table_name = true)",""],["build_joins","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-build_joins","(relation, joins)",""],["build_mem_cache","ActiveSupport::Cache::MemCacheStore","classes/ActiveSupport/Cache/MemCacheStore.html#method-c-build_mem_cache","(*addresses)",""],["build_method_name","ActionView::Template","classes/ActionView/Template.html#method-i-build_method_name","(locals)",""],["build_middleware_stack","Rails::Application","classes/Rails/Application.html#method-i-build_middleware_stack","()",""],["build_named_route_call","ActionDispatch::Routing::PolymorphicRoutes","classes/ActionDispatch/Routing/PolymorphicRoutes.html#method-i-build_named_route_call","(records, inflection, options = {})",""],["build_path","ActionView::PathResolver","classes/ActionView/PathResolver.html#method-i-build_path","(name, prefix, partial, details)",""],["build_request_uri","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-build_request_uri","(action, parameters)",""],["build_select","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-build_select","(arel, selects)",""],["build_sti_condition","ActiveRecord::Associations::ThroughAssociationScope","classes/ActiveRecord/Associations/ThroughAssociationScope.html#method-i-build_sti_condition","()",""],["build_through_conditions","ActiveRecord::Associations::ThroughAssociationScope","classes/ActiveRecord/Associations/ThroughAssociationScope.html#method-i-build_through_conditions","()",""],["build_where","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-build_where","(opts, other = [])",""],["builtin_controller","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-builtin_controller","()",""],["button_to","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-button_to","(name, options = {}, html_options = {})","<p>Generates a form containing a single button that submits to the URL created\nby the set of <code>options</code>. This …\n"],["button_to_function","ActionView::Helpers::JavaScriptHelper","classes/ActionView/Helpers/JavaScriptHelper.html#method-i-button_to_function","(name, *args, &block)","<p>Returns a button with the given <code>name</code> text that&#39;ll trigger\na JavaScript <code>function</code> using the onclick …\n"],["bypass_local_cache","ActiveSupport::Cache::Strategy::LocalCache","classes/ActiveSupport/Cache/Strategy/LocalCache.html#method-i-bypass_local_cache","()",""],["byte","Numeric","classes/Numeric.html#method-i-byte","()",""],["bytes","Numeric","classes/Numeric.html#method-i-bytes","()","<p>Enables the use of byte calculations and declarations, like 45.bytes +\n2.6.megabytes\n"],["cache","ActionController::Caching","classes/ActionController/Caching.html#method-i-cache","(key, options = {}, &block)","<p>Convenience accessor\n"],["cache","ActionView::Helpers::CacheHelper","classes/ActionView/Helpers/CacheHelper.html#method-i-cache","(name = {}, options = nil, &block)","<p>This helper to exposes a method for caching of view fragments. See\nActionController::Caching::Fragments …\n"],["cache","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-cache","()","<p>Enable the query cache within the block.\n"],["cache","ActiveRecord::QueryCache::ClassMethods","classes/ActiveRecord/QueryCache/ClassMethods.html#method-i-cache","(&block)","<p>Enable the query cache within the block if Active Record is configured.\n"],["cache","Rails","classes/Rails.html#method-i-cache","()",""],["cache_attribute?","ActiveRecord::AttributeMethods::Read::ClassMethods","classes/ActiveRecord/AttributeMethods/Read/ClassMethods.html#method-i-cache_attribute-3F","(attr_name)","<p>Returns <code>true</code> if the provided attribute is being cached.\n"],["cache_attributes","ActiveRecord::AttributeMethods::Read::ClassMethods","classes/ActiveRecord/AttributeMethods/Read/ClassMethods.html#method-i-cache_attributes","(*attribute_names)","<p><code>cache_attributes</code> allows you to declare which converted\nattribute values should be cached. Usually caching …\n"],["cache_configured?","ActionController::Caching::ConfigMethods","classes/ActionController/Caching/ConfigMethods.html#method-i-cache_configured-3F","()",""],["cache_fixtures","Fixtures","classes/Fixtures.html#method-c-cache_fixtures","(connection, fixtures_map)",""],["cache_for_connection","Fixtures","classes/Fixtures.html#method-c-cache_for_connection","(connection)",""],["cache_key","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-cache_key","()","<p>Returns a cache key that can be used to identify this record.\n<p>Examples\n\n<pre><code>Product.new.cache_key     # =&gt; &quot;products/new&quot; ...\n</code></pre>\n"],["cache_page","ActionController::Caching::Pages","classes/ActionController/Caching/Pages.html#method-i-cache_page","(content = nil, options = nil)","<p>Manually cache the <code>content</code> in the key determined by\n<code>options</code>. If no content is provided, the contents …\n"],["cache_page","ActionController::Caching::Pages::ClassMethods","classes/ActionController/Caching/Pages/ClassMethods.html#method-i-cache_page","(content, path, extension = nil)","<p>Manually cache the <code>content</code> in the key determined by\n<code>path</code>. Example:\n\n<pre><code>cache_page &quot;I&#39;m the cached content&quot;, ...</code></pre>\n"],["cache_sql","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-cache_sql","(sql)",""],["cache_store","ActionController::Caching::ConfigMethods","classes/ActionController/Caching/ConfigMethods.html#method-i-cache_store","()",""],["cache_store=","ActionController::Caching::ConfigMethods","classes/ActionController/Caching/ConfigMethods.html#method-i-cache_store-3D","(store)",""],["cached","ActionView::Resolver","classes/ActionView/Resolver.html#method-i-cached","(key, prefix, name, partial)",""],["cached_attributes","ActiveRecord::AttributeMethods::Read::ClassMethods","classes/ActiveRecord/AttributeMethods/Read/ClassMethods.html#method-i-cached_attributes","()","<p>Returns the attributes which are cached. By default time related columns\nwith datatype <code>:datetime, :timestamp,</code> …\n"],["cached_fixtures","Fixtures","classes/Fixtures.html#method-c-cached_fixtures","(connection, keys_to_fetch = nil)",""],["caches_action","ActionController::Caching::Actions::ClassMethods","classes/ActionController/Caching/Actions/ClassMethods.html#method-i-caches_action","(*actions)","<p>Declares that <code>actions</code> should be cached. See\nActionController::Caching::Actions for details.\n"],["caches_page","ActionController::Caching::Pages::ClassMethods","classes/ActionController/Caching/Pages/ClassMethods.html#method-i-caches_page","(*actions)","<p>Caches the <code>actions</code> using the page-caching approach that&#39;ll\nstore the cache in a path within the  …\n"],["caching?","ActionView::Resolver","classes/ActionView/Resolver.html#method-i-caching-3F","()",""],["caching_allowed","ActionController::Caching::Pages","classes/ActionController/Caching/Pages.html#method-i-caching_allowed","()",""],["caching_allowed?","ActionController::Caching","classes/ActionController/Caching.html#method-i-caching_allowed-3F","()",""],["calculate","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-calculate","(operation, column_name, options = {})","<p>This calculates aggregate values in the given column.  Methods for count,\nsum, average, minimum, and …\n"],["call","ActionController::Metal","classes/ActionController/Metal.html#method-c-call","(env)",""],["call","ActionController::Middleware::ActionMiddleware","classes/ActionController/Middleware/ActionMiddleware.html#method-i-call","(env)",""],["call","ActionController::Responder","classes/ActionController/Responder.html#method-c-call","(*args)","<p>Initializes a new responder an invoke the proper format. If the format is\nnot defined, call to_format. …\n"],["call","ActionDispatch::BestStandardsSupport","classes/ActionDispatch/BestStandardsSupport.html#method-i-call","(env)",""],["call","ActionDispatch::Callbacks","classes/ActionDispatch/Callbacks.html#method-i-call","(env)",""],["call","ActionDispatch::Cookies","classes/ActionDispatch/Cookies.html#method-i-call","(env)",""],["call","ActionDispatch::Flash","classes/ActionDispatch/Flash.html#method-i-call","(env)",""],["call","ActionDispatch::Head","classes/ActionDispatch/Head.html#method-i-call","(env)",""],["call","ActionDispatch::ParamsParser","classes/ActionDispatch/ParamsParser.html#method-i-call","(env)",""],["call","ActionDispatch::RemoteIp","classes/ActionDispatch/RemoteIp.html#method-i-call","(env)",""],["call","ActionDispatch::Rescue","classes/ActionDispatch/Rescue.html#method-i-call","(env)",""],["call","ActionDispatch::Session::AbstractStore","classes/ActionDispatch/Session/AbstractStore.html#method-i-call","(env)",""],["call","ActionDispatch::ShowExceptions","classes/ActionDispatch/ShowExceptions.html#method-i-call","(env)",""],["call","ActionDispatch::Static","classes/ActionDispatch/Static.html#method-i-call","(env)",""],["call","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-call","(function, *arguments, &block)","<p>Calls the JavaScript <code>function</code>, optionally with the given\n<code>arguments</code>.\n<p>If a block is given, the block will …\n"],["call","ActionView::Template::ActionView::Template::Template::Handler","classes/ActionView/Template/ActionView/Template/Template/Handler.html#method-c-call","(template)",""],["call","ActionView::Template::Handlers::Compilable::ClassMethods","classes/ActionView/Template/Handlers/Compilable/ClassMethods.html#method-i-call","(template)",""],["call","ActiveRecord::QueryCache","classes/ActiveRecord/QueryCache.html#method-i-call","(env)",""],["call","ActiveSupport::LogSubscriber","classes/ActiveSupport/LogSubscriber.html#method-i-call","(message, *args)",""],["call","I18n::ExceptionHandler","classes/I18n/ExceptionHandler.html#method-i-call","(exception, locale, key, options)",""],["call","Logger::SimpleFormatter","classes/Logger/SimpleFormatter.html#method-i-call","(severity, timestamp, progname, msg)","<p>This method is invoked when a log event occurs\n"],["call","Rails::Application","classes/Rails/Application.html#method-i-call","(env)",""],["call","Rails::Rack::Debugger","classes/Rails/Rack/Debugger.html#method-i-call","(env)",""],["call","Rails::Rack::LogTailer","classes/Rails/Rack/LogTailer.html#method-i-call","(env)",""],["call","Rails::Rack::Logger","classes/Rails/Rack/Logger.html#method-i-call","(env)",""],["callback","ActiveSupport::Callbacks","classes/ActiveSupport/Callbacks.html#method-i-callback","(kind)",""],["camelcase","String","classes/String.html#method-i-camelcase","(first_letter = :upper)",""],["camelize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-camelize","(lower_case_and_underscored_word, first_letter_in_uppercase = true)","<p>By default, <code>camelize</code> converts strings to UpperCamelCase. If\nthe argument to <code>camelize</code> is set to <code>:lower</code> …\n"],["camelize","String","classes/String.html#method-i-camelize","(first_letter = :upper)","<p>By default, <code>camelize</code> converts strings to UpperCamelCase. If\nthe argument to camelize is set to <code>:lower</code> …\n"],["canonical_action?","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-canonical_action-3F","(action, flag)",""],["capify!","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-capify-21","()","<p>Just run the capify command in root\n<p>Example\n\n<pre><code>capify!</code></pre>\n"],["capitalize","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-capitalize","()","<p>Converts the first character to uppercase and the remainder to lowercase.\n<p>Example:\n\n<pre><code>&#39;über&#39;.mb_chars.capitalize.to_s ...</code></pre>\n"],["capture","ActionView::Helpers::CaptureHelper","classes/ActionView/Helpers/CaptureHelper.html#method-i-capture","(*args)","<p>The capture method allows you to extract part of a template into a\nvariable. You can then use this variable …\n"],["capture","Rails::Generators::TestCase","classes/Rails/Generators/TestCase.html#method-i-capture","(stream)","<p>Captures the given stream and returns it:\n\n<pre><code>stream = capture(:stdout){ puts &quot;Cool&quot; }\nstream # =&gt; &quot;Cool\\n&quot;\n</code></pre>\n"],["case_sensitive_equality_operator","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-case_sensitive_equality_operator","()",""],["case_sensitive_equality_operator","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-case_sensitive_equality_operator","()",""],["cattr_accessor","Class","classes/Class.html#method-i-cattr_accessor","(*syms, &blk)",""],["cattr_reader","Class","classes/Class.html#method-i-cattr_reader","(*syms)",""],["cattr_writer","Class","classes/Class.html#method-i-cattr_writer","(*syms)",""],["cdata_block","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-cdata_block","(string)",""],["cdata_section","ActionView::Helpers::TagHelper","classes/ActionView/Helpers/TagHelper.html#method-i-cdata_section","(content)","<p>Returns a CDATA section with the given <code>content</code>.  CDATA\nsections are used to escape blocks of text containing …\n"],["center","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-center","(integer, padstr=' ')","<p>Works just like <code>String#center</code>, only integer specifies\ncharacters instead of bytes.\n<p>Example:\n\n<pre><code>&quot;¾ cup&quot;.mb_chars.center(8).to_s ...</code></pre>\n"],["change","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-change","(column_name, type, options = {})","<p>Changes the column&#39;s definition according to the new options. See\nTableDefinition#column for details …\n"],["change","Date","classes/Date.html#method-i-change","(options)","<p>Returns a new Date where one or more of the elements have been changed\naccording to the <code>options</code> parameter. …\n"],["change","DateTime","classes/DateTime.html#method-i-change","(options)","<p>Returns a new DateTime where one or more of the elements have been changed\naccording to the <code>options</code> parameter. …\n"],["change","Time","classes/Time.html#method-i-change","(options)","<p>Returns a new Time where one or more of the elements have been changed\naccording to the <code>options</code> parameter. …\n"],["change_column","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-change_column","(table_name, column_name, type, options = {})","<p>Changes the column of a table.\n"],["change_column","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_column","(table_name, column_name, type, options = {})","<p>Changes the column&#39;s definition according to the new options. See\nTableDefinition#column for details …\n"],["change_column_default","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-change_column_default","(table_name, column_name, default)","<p>Changes the default value of a table column.\n"],["change_column_default","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_column_default","(table_name, column_name, default)","<p>Sets a new default value for a column.  If you want to set the default\nvalue to <code>NULL</code>, you are out of …\n"],["change_column_null","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-change_column_null","(table_name, column_name, null, default = nil)",""],["change_column_null","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-change_column_null","(table_name, column_name, null, default = nil)",""],["change_column_null","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-change_column_null","(table_name, column_name, null, default = nil)",""],["change_default","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-change_default","(column_name, default)","<p>Sets a new default value for a column. See\nSchemaStatements#change_column_default\n<p>Examples\n\n<pre><code>t.change_default(:qualification, ...</code></pre>\n"],["change_table","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_table","(table_name)","<p>A block for changing columns in <code>table</code>.\n<p>Example\n\n<pre><code># change_table() yields a Table instance\nchange_table(:suppliers) ...</code></pre>\n"],["changed","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-changed","()","<p>List of attributes with unsaved changes.\n\n<pre><code>person.changed # =&gt; []\nperson.name = &#39;bob&#39;\nperson.changed # =&gt; ...\n</code></pre>\n"],["changed?","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-changed-3F","()","<p>Do any attributes have unsaved changes?\n\n<pre><code>person.changed? # =&gt; false\nperson.name = &#39;bob&#39;\nperson.changed? ...\n</code></pre>\n"],["changed_attributes","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-changed_attributes","()","<p>Map of change <code>attr =&gt; original value</code>.\n"],["changed_for_autosave?","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-changed_for_autosave-3F","()","<p>Returns whether or not this record has been changed in any way (including\nwhether any of its nested autosave …\n"],["changes","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-changes","()","<p>Map of changed attrs =&gt; [original value, new value].\n\n<pre><code>person.changes # =&gt; {}\nperson.name = &#39;bob&#39;\nperson.changes ...\n</code></pre>\n"],["characters","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-characters","(string)",""],["charset","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-charset","()","<p>Returns the database character set.\n"],["check_box","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-check_box","(method, options = {}, checked_value = \"1\", unchecked_value = \"0\")",""],["check_box","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-check_box","(object_name, method, options = {}, checked_value = \"1\", unchecked_value = \"0\")","<p>Returns a checkbox tag tailored for accessing a specified attribute\n(identified by <code>method</code>) on an object …\n"],["check_box_checked?","ActionView::Helpers::InstanceTagMethods::ClassMethods","classes/ActionView/Helpers/InstanceTagMethods/ClassMethods.html#method-i-check_box_checked-3F","(value, checked_value)",""],["check_box_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-check_box_tag","(name, value = \"1\", checked = false, options = {})","<p>Creates a check box form input tag.\n<p>Options\n<p><code>:disabled</code> - If set to true, the user will not be able to use …\n"],["check_class_collision","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-c-check_class_collision","(options={})","<p>Add a class collisions name to be checked on class initialization. You can\nsupply a hash with a :prefix …\n"],["check_for_circular_references","ActiveSupport::JSON::Encoding::Encoder","classes/ActiveSupport/JSON/Encoding/Encoder.html#method-i-check_for_circular_references","(value)",""],["check_validity!","ActiveModel::EachValidator","classes/ActiveModel/EachValidator.html#method-i-check_validity-21","()","<p>Hook method that gets called by the initializer allowing verification that\nthe arguments supplied are …\n"],["check_validity!","ActiveModel::Validations::ExclusionValidator","classes/ActiveModel/Validations/ExclusionValidator.html#method-i-check_validity-21","()",""],["check_validity!","ActiveModel::Validations::FormatValidator","classes/ActiveModel/Validations/FormatValidator.html#method-i-check_validity-21","()",""],["check_validity!","ActiveModel::Validations::InclusionValidator","classes/ActiveModel/Validations/InclusionValidator.html#method-i-check_validity-21","()",""],["check_validity!","ActiveModel::Validations::LengthValidator","classes/ActiveModel/Validations/LengthValidator.html#method-i-check_validity-21","()",""],["check_validity!","ActiveModel::Validations::NumericalityValidator","classes/ActiveModel/Validations/NumericalityValidator.html#method-i-check_validity-21","()",""],["checkin","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-checkin","(conn)","<p>Check-in a database connection back into the pool, indicating that you no\nlonger need this connection. …\n"],["checkout","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-checkout","()","<p>Check-out a database connection from the pool, indicating that you want to\nuse it. You should call #checkin …\n"],["checkout_and_verify","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-checkout_and_verify","(c)",""],["checkout_existing_connection","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-checkout_existing_connection","()",""],["checkout_new_connection","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-checkout_new_connection","()",""],["civil_from_format","DateTime","classes/DateTime.html#method-c-civil_from_format","(utc_or_local, year, month=1, day=1, hour=0, min=0, sec=0)",""],["class_attribute","Class","classes/Class.html#method-i-class_attribute","(*attrs)","<p>Declare a class-level attribute whose value is inheritable by subclasses.\nSubclasses can change their …\n"],["class_eval","Kernel","classes/Kernel.html#method-i-class_eval","(*args, &block)","<p>class_eval on an object acts like singleton_class.class_eval.\n"],["class_name","ActiveRecord::Reflection::MacroReflection","classes/ActiveRecord/Reflection/MacroReflection.html#method-i-class_name","()","<p>Returns the class name for the macro.\n<p><code>composed_of :balance, :class_name =&gt; &#39;Money&#39;</code>\nreturns …\n"],["class_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-class_name","()",""],["class_of_active_record_descendant","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-class_of_active_record_descendant","(klass)","<p>Returns the class descending directly from ActiveRecord::Base or an\nabstract class, if any, in the inheritance …\n"],["classify","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-classify","(table_name)","<p>Create a class name from a plural table name like Rails does for table\nnames to models. Note that this …\n"],["classify","String","classes/String.html#method-i-classify","()","<p>Create a class name from a plural table name like Rails does for table\nnames to models. Note that this …\n"],["clean","ActiveSupport::BacktraceCleaner","classes/ActiveSupport/BacktraceCleaner.html#method-i-clean","(backtrace, kind = :silent)","<p>Returns the backtrace after all filters and silencers has been run against\nit. Filters run first, then …\n"],["clean_backtrace","ActionDispatch::ShowExceptions","classes/ActionDispatch/ShowExceptions.html#method-i-clean_backtrace","(exception, *args)",""],["cleanup","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-i-cleanup","(options = nil)",""],["cleanup","ActiveSupport::Cache::MemoryStore","classes/ActiveSupport/Cache/MemoryStore.html#method-i-cleanup","(options = nil)",""],["cleanup","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-cleanup","(options = nil)","<p>Cleanup the cache by removing expired entries.\n<p>Options are passed to the underlying cache implementation. …\n"],["cleanup_view_runtime","ActiveRecord::Railties::ControllerRuntime","classes/ActiveRecord/Railties/ControllerRuntime.html#method-i-cleanup_view_runtime","()",""],["clear","ActionDispatch::Session::AbstractStore::SessionHash","classes/ActionDispatch/Session/AbstractStore/SessionHash.html#method-i-clear","()",""],["clear","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-i-clear","(options = nil)",""],["clear","ActiveSupport::Cache::MemCacheStore","classes/ActiveSupport/Cache/MemCacheStore.html#method-i-clear","(options = nil)","<p>Clear the entire cache on all memcached servers. This method should be used\nwith care when shared cache …\n"],["clear","ActiveSupport::Cache::MemoryStore","classes/ActiveSupport/Cache/MemoryStore.html#method-i-clear","(options = nil)",""],["clear","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-clear","(options = nil)","<p>Clear the entire cache. Be careful with this method since it could affect\nother processes if shared cache …\n"],["clear","ActiveSupport::Cache::Strategy::LocalCache::LocalStore","classes/ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-i-clear","(options = nil)",""],["clear","ActiveSupport::DescendantsTracker","classes/ActiveSupport/DescendantsTracker.html#method-c-clear","()",""],["clear","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-i-clear","(scope = :all)","<p>Clears the loaded inflections within a given scope (default is\n<code>:all</code>). Give the scope as a symbol of the …\n"],["clear!","ActiveSupport::Dependencies::Reference","classes/ActiveSupport/Dependencies/Reference.html#method-c-clear-21","()",""],["clear_action_methods!","AbstractController::Base","classes/AbstractController/Base.html#method-i-clear_action_methods-21","()","<p>action_methods are cached and there is sometimes need to refresh them.\nclear_action_methods! allows you …\n"],["clear_active_connections!","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-clear_active_connections-21","()","<p>Returns any connections in use by the current thread back to the pool, and\nalso returns connections to …\n"],["clear_all_connections!","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-clear_all_connections-21","()",""],["clear_buffer","ActiveSupport::BufferedLogger","classes/ActiveSupport/BufferedLogger.html#method-i-clear_buffer","()",""],["clear_cache","ActionView::Resolver","classes/ActionView/Resolver.html#method-i-clear_cache","()",""],["clear_helpers","AbstractController::Helpers::ClassMethods","classes/AbstractController/Helpers/ClassMethods.html#method-i-clear_helpers","()","<p>Clears up all existing helpers in this class, only keeping the helper with\nthe same name as this class. …\n"],["clear_query_cache","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-clear_query_cache","()","<p>Clears the query cache.\n<p>One reason you may wish to call this method explicitly is between queries\nthat …\n"],["clear_reloadable_connections!","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-clear_reloadable_connections-21","()","<p>Clears the cache which maps classes\n"],["clear_reloadable_connections!","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-clear_reloadable_connections-21","()","<p>Clears the cache which maps classes\n"],["clear_respond_to","ActionController::MimeResponds::ClassMethods","classes/ActionController/MimeResponds/ClassMethods.html#method-i-clear_respond_to","()","<p>Clear all mime types in <code>respond_to</code>.\n"],["clear_stale_cached_connections!","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-clear_stale_cached_connections-21","()","<p>Return any checked-out connections back to the pool by threads that are no\nlonger alive.\n"],["clear_transaction_record_state","ActiveRecord::Transactions","classes/ActiveRecord/Transactions.html#method-i-clear_transaction_record_state","()","<p>Clear the new record state and id of a record.\n"],["client_error?","ActionDispatch::TestResponse","classes/ActionDispatch/TestResponse.html#method-i-client_error-3F","()","<p>Was there a client client?\n"],["client_min_messages","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-client_min_messages","()","<p>Returns the current client message level.\n"],["client_min_messages=","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-client_min_messages-3D","(level)","<p>Set the client message level.\n"],["clone","ActiveSupport::Callbacks::Callback","classes/ActiveSupport/Callbacks/Callback.html#method-i-clone","(chain, klass)",""],["clone_attribute_value","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-clone_attribute_value","(reader_method, attribute_name)",""],["clone_attributes","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-clone_attributes","(reader_method = :read_attribute, attributes = {})",""],["clone_empty","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-clone_empty","()",""],["clone_with_time_zone_conversion_attribute?","ActiveRecord::AttributeMethods::Dirty","classes/ActiveRecord/AttributeMethods/Dirty.html#method-i-clone_with_time_zone_conversion_attribute-3F","(attr, old)",""],["close","ActiveSupport::BufferedLogger","classes/ActiveSupport/BufferedLogger.html#method-i-close","()",""],["close","ActiveSupport::Gzip::Stream","classes/ActiveSupport/Gzip/Stream.html#method-i-close","()",""],["code","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-code","()","<p>Returns a String to ensure compatibility with Net::HTTPResponse\n"],["collapse_wheres","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-collapse_wheres","(arel, wheres)",""],["collation","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-collation","()","<p>Returns the database collation strategy.\n"],["collect_asset_files","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-collect_asset_files","(*path)",""],["collection","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-collection","()","<p>To add a route to the collection:\n\n<pre><code>resources :photos do\n  collection do\n    get &#39;search&#39;\n  end\nend</code></pre>\n<p>This …\n"],["collection","ActionView::Partials::PartialRenderer","classes/ActionView/Partials/PartialRenderer.html#method-i-collection","()",""],["collection_accessor_methods","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-collection_accessor_methods","(reflection, association_proxy_class, writer = true)",""],["collection_from_object","ActionView::Partials::PartialRenderer","classes/ActionView/Partials/PartialRenderer.html#method-i-collection_from_object","()",""],["collection_reader_method","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-collection_reader_method","(reflection, association_proxy_class)",""],["collection_select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-collection_select","(method, collection, value_method, text_method, options = {}, html_options = {})",""],["collection_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-collection_select","(object, method, collection, value_method, text_method, options = {}, html_options = {})","<p>Returns <code>&lt;select&gt;</code> and <code>&lt;option&gt;</code> tags\nfor the collection of existing return values of <code>method</code> …\n"],["collection_with_template","ActionView::Partials::PartialRenderer","classes/ActionView/Partials/PartialRenderer.html#method-i-collection_with_template","(template = @template)",""],["collection_without_template","ActionView::Partials::PartialRenderer","classes/ActionView/Partials/PartialRenderer.html#method-i-collection_without_template","(collection_paths = @collection_paths)",""],["color","ActiveSupport::LogSubscriber","classes/ActiveSupport/LogSubscriber.html#method-i-color","(text, color, bold=false)","<p>Set color by using a string or one of the defined constants. If a third\noption is set to true, it also …\n"],["colorize_logging","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-colorize_logging","(*args)",""],["colorize_logging","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-colorize_logging","()",""],["colorize_logging=","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-colorize_logging-3D","(val)",""],["column","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-column","(column_name, type, options = {})","<p>Adds a new column to the named table. See TableDefinition#column for\ndetails of the options you can use. …\n"],["column","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-column","(name, type, options = {})","<p>Instantiates a new column for the table. The <code>type</code> parameter is\nnormally one of the migrations native …\n"],["column_alias_for","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-column_alias_for","(*keys)","<p>Converts the given keys to the value that the database adapter returns as a\nusable column name:\n\n<pre><code>column_alias_for(&quot;users.id&quot;) ...</code></pre>\n"],["column_aliases","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-column_aliases","(join_dependency)",""],["column_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-column_exists-3F","(table_name, column_name, type = nil, options = {})","<p>Checks to see if a column exists in a given table.\n<p>Examples\n\n<pre><code># Check a column exists\ncolumn_exists?(:suppliers, ...</code></pre>\n"],["column_exists?","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-column_exists-3F","(column_name, type = nil, options = nil)","<p>Checks to see if a column exists. See SchemaStatements#column_exists?\n"],["column_for","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-column_for","(field)",""],["column_for","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-column_for","(table_name, column_name)",""],["column_for_attribute","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-column_for_attribute","(name)","<p>Returns the column object for the named attribute.\n"],["column_name_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-column_name_length","()","<p>the maximum length of a column name\n"],["column_names","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-column_names","()","<p>Returns an array of column names as strings.\n"],["column_names","Fixtures","classes/Fixtures.html#method-i-column_names","()",""],["columns","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-columns","()","<p>Returns an array of column objects for the table associated with this\nclass.\n"],["columns","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-columns","(table_name, name = nil)","<p>Returns the list of all column definitions for a table.\n"],["columns","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-columns","(table_name, name = nil)","<p>Returns an array of Column objects for the table specified by\n<code>table_name</code>. See the concrete implementation …\n"],["columns_hash","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-columns_hash","()","<p>Returns a hash of column objects for the table associated with this class.\n"],["columns_per_multicolumn_index","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-columns_per_multicolumn_index","()","<p>the maximum number of columns in a multicolumn index\n"],["columns_per_table","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-columns_per_table","()","<p>the maximum number of columns per table\n"],["comma_pair_list","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-comma_pair_list","(hash)","<p>Returns a comma-separated pair list, like “key1 = val1, key2 = val2”.\n"],["commit_db_transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-commit_db_transaction","()","<p>Commits the transaction (and turns on auto-committing).\n"],["commit_db_transaction","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-commit_db_transaction","()","<p>Commits a transaction.\n"],["commit_transaction_records","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-commit_transaction_records","()","<p>Send a commit message to all records after they have been committed.\n"],["comparable_time","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-comparable_time","()",""],["compare_with_coercion","DateTime","classes/DateTime.html#method-i-compare_with_coercion","(other)","<p>Layers additional behavior on DateTime#&lt;=&gt; so that Time and\nActiveSupport::TimeWithZone instances …\n"],["compare_with_coercion","Time","classes/Time.html#method-i-compare_with_coercion","(other)","<p>Layers additional behavior on Time#&lt;=&gt; so that DateTime and\nActiveSupport::TimeWithZone instances …\n"],["compare_without_coercion","DateTime","classes/DateTime.html#method-i-compare_without_coercion","(other)",""],["compare_without_coercion","Time","classes/Time.html#method-i-compare_without_coercion","(other)",""],["compile","ActionView::Template","classes/ActionView/Template.html#method-i-compile","(locals, view, mod)","<p>Among other things, this method is responsible for properly setting the\nencoding of the source. Until …\n"],["compile","ActionView::Template::Handlers::Builder","classes/ActionView/Template/Handlers/Builder.html#method-i-compile","(template)",""],["compile","ActionView::Template::Handlers::Compilable","classes/ActionView/Template/Handlers/Compilable.html#method-i-compile","(template)",""],["compile","ActionView::Template::Handlers::ERB","classes/ActionView/Template/Handlers/ERB.html#method-i-compile","(template)",""],["compile","ActionView::Template::Handlers::RJS","classes/ActionView/Template/Handlers/RJS.html#method-i-compile","(template)",""],["compile","ActiveSupport::Callbacks::CallbackChain","classes/ActiveSupport/Callbacks/CallbackChain.html#method-i-compile","(key=nil, object=nil)",""],["compile_filter","ActionDispatch::Http::ParameterFilter","classes/ActionDispatch/Http/ParameterFilter.html#method-i-compile_filter","()",""],["compiled_filter","ActionDispatch::Http::ParameterFilter","classes/ActionDispatch/Http/ParameterFilter.html#method-i-compiled_filter","()",""],["component_root_dir","Rails::API::AppTask","classes/Rails/API/AppTask.html#method-i-component_root_dir","(gem_name)",""],["component_root_dir","Rails::API::RepoTask","classes/Rails/API/RepoTask.html#method-i-component_root_dir","(component)",""],["compose","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-compose","()","<p>Performs composition on all the characters.\n<p>Example:\n\n<pre><code>&#39;é&#39;.length                       # =&gt; 3\n&#39;é&#39;.mb_chars.compose.to_s.length ...\n</code></pre>\n"],["compose_codepoints","ActiveSupport::Multibyte::Unicode","classes/ActiveSupport/Multibyte/Unicode.html#method-i-compose_codepoints","(codepoints)","<p>Compose decomposed characters to the composed form.\n"],["composed_of","ActiveRecord::Aggregations::ClassMethods","classes/ActiveRecord/Aggregations/ClassMethods.html#method-i-composed_of","(part_id, options = {})","<p>Adds reader and writer methods for manipulating a value object:\n<code>composed_of :address</code> adds <code>address</code> and …\n"],["compress","ActiveSupport::Gzip","classes/ActiveSupport/Gzip.html#method-c-compress","(source)","<p>Compresses a string using gzip.\n"],["compressed?","ActiveSupport::Cache::Entry","classes/ActiveSupport/Cache/Entry.html#method-i-compressed-3F","()",""],["compute_asset_host","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-compute_asset_host","(source)","<p>Pick an asset host for this source. Returns <code>nil</code> if no host is\nset, the host if no wildcard is set, the …\n"],["compute_javascript_paths","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-compute_javascript_paths","(*args)",""],["compute_public_path","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-compute_public_path","(source, dir, ext = nil, include_host = true)","<p>Add the the extension <code>ext</code> if not present. Return full URLs\notherwise untouched. Prefix with <code>/dir/</code> if …\n"],["compute_stylesheet_paths","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-compute_stylesheet_paths","(*args)",""],["compute_table_name","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-compute_table_name","()","<p>Computes and returns a table name according to default conventions.\n"],["compute_type","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-compute_type","(type_name)","<p>Returns the class type of the record using the current module as a prefix.\nSo descendants of MyApp::Business::Account …\n"],["concat","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-concat","(string)","<p>The preferred method of outputting text in your views is to use the &lt;%=\n“text” %&gt; eRuby …\n"],["concat","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-concat","(value)",""],["concat","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-concat","(paths)",""],["concat","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-concat","(*)",""],["conditions","ActiveRecord::Associations::ThroughAssociationScope","classes/ActiveRecord/Associations/ThroughAssociationScope.html#method-i-conditions","()",""],["config","ActionView::TestCase::Behavior","classes/ActionView/TestCase/Behavior.html#method-i-config","()",""],["config","ActiveSupport::Configurable","classes/ActiveSupport/Configurable.html#method-i-config","()",""],["config","ActiveSupport::Configurable::ClassMethods","classes/ActiveSupport/Configurable/ClassMethods.html#method-i-config","()",""],["config","Rails::Application::Configurable","classes/Rails/Application/Configurable.html#method-i-config","()",""],["config","Rails::Engine::Configurable","classes/Rails/Engine/Configurable.html#method-i-config","()",""],["config","Rails::Engine::Configurable::ClassMethods","classes/Rails/Engine/Configurable/ClassMethods.html#method-i-config","()",""],["config","Rails::Plugin","classes/Rails/Plugin.html#method-i-config","()",""],["config","Rails::Railtie::Configurable","classes/Rails/Railtie/Configurable.html#method-i-config","()",""],["config","Rails::Railtie::Configurable::ClassMethods","classes/Rails/Railtie/Configurable/ClassMethods.html#method-i-config","()",""],["config_accessor","ActiveSupport::Configurable::ClassMethods","classes/ActiveSupport/Configurable/ClassMethods.html#method-i-config_accessor","(*names)","<p>Allows you to add shortcut so that you don&#39;t have to refer to attribute\nthrough config. Also look …\n"],["configuration","Rails","classes/Rails.html#method-i-configuration","()","<p>The Configuration instance used to configure the Rails environment\n"],["configurations","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-configurations","","<p>Contains the database configuration - as is typically stored in\nconfig/database.yml - as a Hash.\n<p>For example, …\n"],["configure","ActiveSupport::Configurable::ClassMethods","classes/ActiveSupport/Configurable/ClassMethods.html#method-i-configure","()",""],["configure","Rails::Application","classes/Rails/Application.html#method-i-configure","(&block)",""],["configure_connection","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-configure_connection","()",""],["configure_connection","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-configure_connection","()","<p>Configures the encoding, verbosity, schema search path, and time zone of\nthe connection. This is called …\n"],["configure_dependency_for_belongs_to","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-configure_dependency_for_belongs_to","(reflection)",""],["configure_dependency_for_has_many","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-configure_dependency_for_has_many","(reflection, extra_conditions = nil)","<p>Creates before_destroy callback methods that nullify, delete or destroy\nhas_many associated objects, …\n"],["configure_dependency_for_has_one","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-configure_dependency_for_has_one","(reflection)","<p>Creates before_destroy callback methods that nullify, delete or destroy\nhas_one associated objects, according …\n"],["configure_destroy_hook_for_has_and_belongs_to_many","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-configure_destroy_hook_for_has_and_belongs_to_many","(reflection)",""],["configure_rdoc_files","Rails::API::Task","classes/Rails/API/Task.html#method-i-configure_rdoc_files","()",""],["connect","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-connect","()",""],["connect","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-connect","()","<p>Connects to a PostgreSQL server and sets up the adapter depending on the\nconnected server&#39;s characteristics. …\n"],["connected?","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-connected-3F","()","<p>Returns true if Active Record is connected.\n"],["connected?","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-connected-3F","(klass)","<p>Returns true if a connection that&#39;s accessible to this class has\nalready been opened.\n"],["connected?","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-connected-3F","()","<p>Returns true if a connection has already been opened.\n"],["connection","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-connection","()","<p>Returns the connection currently associated with the class. This can also\nbe used to “borrow” …\n"],["connection","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-connection","()","<p>Retrieve the connection associated with the current thread, or call\n#checkout to obtain one if necessary. …\n"],["connection","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-connection","()",""],["connection","ActiveRecord::SessionStore::SqlBypass","classes/ActiveRecord/SessionStore/SqlBypass.html#method-i-connection","()",""],["connection","ActiveRecord::SessionStore::SqlBypass","classes/ActiveRecord/SessionStore/SqlBypass.html#method-c-connection","","<p>Use the ActiveRecord::Base.connection by default.\n"],["connection_handler","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-connection_handler","","<p>The connection handler\n"],["connection_pool","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-connection_pool","()",""],["consider_all_requests_local?","Rails::InfoController","classes/Rails/InfoController.html#method-i-consider_all_requests_local-3F","()",""],["console","Rails::Railtie","classes/Rails/Railtie.html#method-i-console","(&blk)",""],["constantize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-constantize","(camel_cased_word)","<p>Tries to find a constant with the name specified in the argument string:\n\n<pre><code>&quot;Module&quot;.constantize     # =&gt; ...\n</code></pre>\n"],["constantize","String","classes/String.html#method-i-constantize","()","<p><code>constantize</code> tries to find a declared constant with the name\nspecified in the string. It raises a NameError …\n"],["constraints","ActionDispatch::Routing::Mapper::Scoping","classes/ActionDispatch/Routing/Mapper/Scoping.html#method-i-constraints","(constraints = {})","<p>Parameter Restriction\n<p>Allows you to constrain the nested routes based on a set of rules. For\ninstance, …\n"],["construct_attributes_from_arguments","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-construct_attributes_from_arguments","(attribute_names, arguments)",""],["construct_conditions","ActiveRecord::Associations::ThroughAssociationScope","classes/ActiveRecord/Associations/ThroughAssociationScope.html#method-i-construct_conditions","()","<p>Build SQL conditions from attributes, qualified by table name.\n"],["construct_finder_arel","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-construct_finder_arel","(options = {}, scope = nil)",""],["construct_from","ActiveRecord::Associations::ThroughAssociationScope","classes/ActiveRecord/Associations/ThroughAssociationScope.html#method-i-construct_from","()",""],["construct_id_map","ActiveRecord::AssociationPreload::ClassMethods","classes/ActiveRecord/AssociationPreload/ClassMethods.html#method-i-construct_id_map","(records, primary_key=nil)","<p>Given a collection of Active Record objects, constructs a Hash which maps\nthe objects&#39; IDs to the …\n"],["construct_join_attributes","ActiveRecord::Associations::ThroughAssociationScope","classes/ActiveRecord/Associations/ThroughAssociationScope.html#method-i-construct_join_attributes","(associate)","<p>Construct attributes for :through pointing to owner and associate.\n"],["construct_join_dependency_for_association_find","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-construct_join_dependency_for_association_find","()",""],["construct_joins","ActiveRecord::Associations::ThroughAssociationScope","classes/ActiveRecord/Associations/ThroughAssociationScope.html#method-i-construct_joins","(custom_joins = nil)",""],["construct_limited_ids_condition","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-construct_limited_ids_condition","(relation)",""],["construct_owner_attributes","ActiveRecord::Associations::ThroughAssociationScope","classes/ActiveRecord/Associations/ThroughAssociationScope.html#method-i-construct_owner_attributes","(reflection)","<p>Construct attributes for associate pointing to owner.\n"],["construct_quoted_owner_attributes","ActiveRecord::Associations::ThroughAssociationScope","classes/ActiveRecord/Associations/ThroughAssociationScope.html#method-i-construct_quoted_owner_attributes","(reflection)","<p>Associate attributes pointing to owner, quoted.\n"],["construct_relation_for_association_calculations","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-construct_relation_for_association_calculations","()",""],["construct_relation_for_association_find","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-construct_relation_for_association_find","(join_dependency)",""],["construct_scope","ActiveRecord::Associations::ThroughAssociationScope","classes/ActiveRecord/Associations/ThroughAssociationScope.html#method-i-construct_scope","()",""],["construct_select","ActiveRecord::Associations::ThroughAssociationScope","classes/ActiveRecord/Associations/ThroughAssociationScope.html#method-i-construct_select","(custom_select = nil)",""],["consumes?","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-c-consumes-3F","(string)","<p>Returns <code>true</code> when the proxy class can handle the string.\nReturns <code>false</code> otherwise.\n"],["contains_bad_protocols?","HTML::WhiteListSanitizer","classes/HTML/WhiteListSanitizer.html#method-i-contains_bad_protocols-3F","(attr_name, value)",""],["content_columns","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-content_columns","()","<p>Returns an array of column objects where the primary id, all columns ending\nin “_id” or “_count”, …\n"],["content_for","ActionView::Helpers::CaptureHelper","classes/ActionView/Helpers/CaptureHelper.html#method-i-content_for","(name, content = nil, &block)","<p>Calling content_for stores a block of markup in an identifier for later\nuse. You can make subsequent …\n"],["content_for?","ActionView::Helpers::CaptureHelper","classes/ActionView/Helpers/CaptureHelper.html#method-i-content_for-3F","(name)","<p>content_for? simply checks whether any content has been captured yet using\ncontent_for Useful to render …\n"],["content_length","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-content_length","()","<p>Returns the content length of the request as an integer.\n"],["content_mime_type","ActionDispatch::Http::MimeNegotiation","classes/ActionDispatch/Http/MimeNegotiation.html#method-i-content_mime_type","()","<p>The MIME type of the HTTP request, such as Mime::XML.\n<p>For backward compatibility, the post format is extracted …\n"],["content_tag","ActionView::Helpers::TagHelper","classes/ActionView/Helpers/TagHelper.html#method-i-content_tag","(name, content_or_options_with_block = nil, options = nil, escape = true, &block)","<p>Returns an HTML block tag of type <code>name</code> surrounding the\n<code>content</code>. Add HTML attributes by passing an attributes …\n"],["content_tag_for","ActionView::Helpers::RecordTagHelper","classes/ActionView/Helpers/RecordTagHelper.html#method-i-content_tag_for","(tag_name, record, *args, &block)","<p>content_tag_for creates an HTML element with id and class parameters that\nrelate to the specified Active …\n"],["content_tag_string","ActionView::Helpers::TagHelper","classes/ActionView/Helpers/TagHelper.html#method-i-content_tag_string","(name, content, options, escape = true)",""],["content_type","ActionController::Metal","classes/ActionController/Metal.html#method-i-content_type","()",""],["content_type","ActionDispatch::Http::MimeNegotiation","classes/ActionDispatch/Http/MimeNegotiation.html#method-i-content_type","()",""],["content_type=","ActionController::Metal","classes/ActionController/Metal.html#method-i-content_type-3D","(type)","<p>Basic implementations for content_type=, location=, and headers are\nprovided to reduce the dependency …\n"],["content_type_from_legacy_post_data_format_header","ActionDispatch::ParamsParser","classes/ActionDispatch/ParamsParser.html#method-i-content_type_from_legacy_post_data_format_header","(env)",""],["controller","ActionDispatch::Routing::Mapper::Scoping","classes/ActionDispatch/Routing/Mapper/Scoping.html#method-i-controller","(controller, options={})","<p>Scopes routes to a specific controller\n<p>Example:\n\n<pre><code>controller &quot;food&quot; do\n  match &quot;bacon&quot;, :action =&gt; &quot;bacon&quot; ...\n</code></pre>\n"],["controller","Object","classes/Object.html#method-i-controller","()",""],["controller_class","ActionController::TestCase::Behavior::ClassMethods","classes/ActionController/TestCase/Behavior/ClassMethods.html#method-i-controller_class","()",""],["controller_class=","ActionController::TestCase::Behavior::ClassMethods","classes/ActionController/TestCase/Behavior/ClassMethods.html#method-i-controller_class-3D","(new_class)",""],["controller_class_name","Rails::Generators::ResourceHelpers","classes/Rails/Generators/ResourceHelpers.html#method-i-controller_class_name","()",""],["controller_class_path","Rails::Generators::ResourceHelpers","classes/Rails/Generators/ResourceHelpers.html#method-i-controller_class_path","()",""],["controller_constraints","ActionDispatch::Routing::RouteSet","classes/ActionDispatch/Routing/RouteSet.html#method-i-controller_constraints","()",""],["controller_file_name","Rails::Generators::ResourceHelpers","classes/Rails/Generators/ResourceHelpers.html#method-i-controller_file_name","()",""],["controller_file_path","Rails::Generators::ResourceHelpers","classes/Rails/Generators/ResourceHelpers.html#method-i-controller_file_path","()",""],["controller_i18n_scope","Rails::Generators::ResourceHelpers","classes/Rails/Generators/ResourceHelpers.html#method-i-controller_i18n_scope","()",""],["controller_name","ActionController::Metal","classes/ActionController/Metal.html#method-c-controller_name","()","<p>Returns the last part of the controller&#39;s name, underscored, without\nthe ending “Controller”. …\n"],["controller_name","ActionController::Metal","classes/ActionController/Metal.html#method-i-controller_name","()","<p>Delegates to the class&#39; #controller_name\n"],["controller_path","AbstractController::Base","classes/AbstractController/Base.html#method-i-controller_path","()","<p>Returns the full controller name, underscored, without the ending\nController. For instance, MyApp::MyPostsController …\n"],["controller_path","ActionView::Base","classes/ActionView/Base.html#method-i-controller_path","()",""],["controller_path=","ActionView::TestCase::TestController","classes/ActionView/TestCase/TestController.html#method-i-controller_path-3D","(path)",""],["controller_paths","Rails::Configuration::Deprecated","classes/Rails/Configuration/Deprecated.html#method-i-controller_paths","()",""],["controller_paths=","Rails::Configuration::Deprecated","classes/Rails/Configuration/Deprecated.html#method-i-controller_paths-3D","(value)",""],["convert_boolean_attributes!","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-convert_boolean_attributes-21","(html_options, bool_attrs)","<p>Processes the <code>html_options</code> hash, converting the boolean\nattributes from true/false form into the form …\n"],["convert_dates_from","ActiveSupport::JSON::Backends::JSONGem","classes/ActiveSupport/JSON/Backends/JSONGem.html#method-i-convert_dates_from","(data)",""],["convert_dates_from","ActiveSupport::JSON::Backends::OkJson","classes/ActiveSupport/JSON/Backends/OkJson.html#method-i-convert_dates_from","(data)",""],["convert_dates_from","ActiveSupport::JSON::Backends::Yajl","classes/ActiveSupport/JSON/Backends/Yajl.html#method-i-convert_dates_from","(data)",""],["convert_key","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-convert_key","(key)",""],["convert_key","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-convert_key","(key)",""],["convert_number_column_value","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-convert_number_column_value","(value)",""],["convert_options_to_data_attributes","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-convert_options_to_data_attributes","(options, html_options)",""],["convert_to_model","ActionView::Context","classes/ActionView/Context.html#method-i-convert_to_model","(object)",""],["convert_value","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-convert_value","(value)",""],["convert_value","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-convert_value","(value)",""],["cookie_jar","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-cookie_jar","()",""],["cookie_secret","Rails::Configuration::Deprecated","classes/Rails/Configuration/Deprecated.html#method-i-cookie_secret","()",""],["cookie_secret=","Rails::Configuration::Deprecated","classes/Rails/Configuration/Deprecated.html#method-i-cookie_secret-3D","(value)",""],["cookies","ActionController::Cookies","classes/ActionController/Cookies.html#method-i-cookies","()",""],["cookies","ActionDispatch::Integration::Session","classes/ActionDispatch/Integration/Session.html#method-i-cookies","()","<p>A map of the cookies returned by the last response, and which will be sent\nwith the next request.\n"],["cookies","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-cookies","()","<p>Returns the response cookies, converted to a Hash of (name =&gt; value)\npairs\n\n<pre><code>assert_equal &#39;AuthorOfNewPage&#39;, ...</code></pre>\n"],["cookies","ActionDispatch::TestProcess","classes/ActionDispatch/TestProcess.html#method-i-cookies","()",""],["cookies","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-cookies","()",""],["copy_stylesheets_file","Rails::Generators::StylesheetsGenerator","classes/Rails/Generators/StylesheetsGenerator.html#method-i-copy_stylesheets_file","()",""],["copy_view_files","Erb::Generators::ControllerGenerator","classes/Erb/Generators/ControllerGenerator.html#method-i-copy_view_files","()",""],["copy_view_files","Erb::Generators::ScaffoldGenerator","classes/Erb/Generators/ScaffoldGenerator.html#method-i-copy_view_files","()",""],["count","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-count","()","<p>Returns the number of error messages.\n\n<pre><code>p.errors.add(:name, &quot;can&#39;t be blank&quot;)\np.errors.count # =&gt; 1\np.errors.add(:name, ...\n</code></pre>\n"],["count","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-count","(column_name = nil, options = {})","<p>Count operates using three different approaches.\n<p>Count all: By not passing any parameters to count, it …\n"],["count_by_sql","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-count_by_sql","(sql)","<p>Returns the result of an SQL statement that should only include a COUNT(*)\nin the SELECT part. The use …\n"],["count_observers","ActiveModel::Observing::ClassMethods","classes/ActiveModel/Observing/ClassMethods.html#method-i-count_observers","()",""],["counter_name","ActionView::Template","classes/ActionView/Template.html#method-i-counter_name","()",""],["create","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-create","(attributes = nil, &block)","<p>Creates an object (or multiple objects) and saves it to the database, if\nvalidations pass. The resulting …\n"],["create","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-create","(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)",""],["create","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-create","()","<p>Creates a record with values matching those of the instance attributes and\nreturns its id.\n"],["create","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-create","(*args, &block)",""],["create","ActiveSupport::Cache::Entry","classes/ActiveSupport/Cache/Entry.html#method-i-create","(raw_value, created_at, options = {})","<p>Create an entry with internal attributes set. This method is intended to be\nused by implementations that …\n"],["create","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-c-create","(name, utc_offset = nil, tzinfo = nil)",""],["create!","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-create-21","(*args, &block)",""],["create!","ActiveRecord::Validations::ClassMethods","classes/ActiveRecord/Validations/ClassMethods.html#method-i-create-21","(attributes = nil, &block)","<p>Creates an object just like Base.create but calls save! instead of save so\nan exception is raised if …\n"],["create_belongs_to_reflection","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-create_belongs_to_reflection","(association_id, options)",""],["create_controller_files","Rails::Generators::ControllerGenerator","classes/Rails/Generators/ControllerGenerator.html#method-i-create_controller_files","()",""],["create_controller_files","Rails::Generators::ScaffoldControllerGenerator","classes/Rails/Generators/ScaffoldControllerGenerator.html#method-i-create_controller_files","()",""],["create_database","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-create_database","(name, options = {})","<p>Create a new MySQL database with optional <code>:charset</code> and\n<code>:collation</code>. Charset defaults to utf8.\n<p>Example: …\n"],["create_database","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-create_database","(name, options = {})","<p>Create a new PostgreSQL database.  Options include <code>:owner</code>,\n<code>:template</code>, <code>:encoding</code>, <code>:tablespace</code>,\nand <code>:connection_limit</code> …\n"],["create_extension_modules","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-create_extension_modules","(association_id, block_extension, extensions)",""],["create_fixture_file","TestUnit::Generators::ModelGenerator","classes/TestUnit/Generators/ModelGenerator.html#method-i-create_fixture_file","()",""],["create_fixtures","Fixtures","classes/Fixtures.html#method-c-create_fixtures","(fixtures_directory, table_names, class_names = {})",""],["create_fixtures","Object","classes/Object.html#method-i-create_fixtures","(*table_names, &block)",""],["create_generated_attribute","Rails::Generators::TestCase","classes/Rails/Generators/TestCase.html#method-i-create_generated_attribute","(attribute_type, name = 'test')","<p>Create a Rails::Generators::GeneratedAttribute by supplying the attribute\ntype and, optionally, the attribute …\n"],["create_generator_files","Rails::Generators::GeneratorGenerator","classes/Rails/Generators/GeneratorGenerator.html#method-i-create_generator_files","()",""],["create_has_and_belongs_to_many_reflection","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-create_has_and_belongs_to_many_reflection","(association_id, options, &extension)",""],["create_has_many_reflection","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-create_has_many_reflection","(association_id, options, &extension)",""],["create_has_one_reflection","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-create_has_one_reflection","(association_id, options)",""],["create_has_one_through_reflection","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-create_has_one_through_reflection","(association_id, options)",""],["create_helper_files","Rails::Generators::HelperGenerator","classes/Rails/Generators/HelperGenerator.html#method-i-create_helper_files","()",""],["create_helper_files","TestUnit::Generators::HelperGenerator","classes/TestUnit/Generators/HelperGenerator.html#method-i-create_helper_files","()",""],["create_lib_files","Rails::Generators::PluginGenerator","classes/Rails/Generators/PluginGenerator.html#method-i-create_lib_files","()",""],["create_or_update","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-create_or_update","()",""],["create_reflection","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-create_reflection","(macro, name, options, active_record)",""],["create_root_files","Rails::Generators::PluginGenerator","classes/Rails/Generators/PluginGenerator.html#method-i-create_root_files","()",""],["create_root_folder","Erb::Generators::ScaffoldGenerator","classes/Erb/Generators/ScaffoldGenerator.html#method-i-create_root_folder","()",""],["create_savepoint","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-create_savepoint","()",""],["create_savepoint","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-create_savepoint","()",""],["create_savepoint","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-create_savepoint","()",""],["create_table","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-create_table","(table_name, options = {})","<p>Creates a new table with the name <code>table_name</code>.\n<code>table_name</code> may either be a String or a Symbol.\n<p>There are …\n"],["create_tasks_files","Rails::Generators::PluginGenerator","classes/Rails/Generators/PluginGenerator.html#method-i-create_tasks_files","()",""],["create_test_file","TestUnit::Generators::ModelGenerator","classes/TestUnit/Generators/ModelGenerator.html#method-i-create_test_file","()",""],["create_test_files","TestUnit::Generators::ControllerGenerator","classes/TestUnit/Generators/ControllerGenerator.html#method-i-create_test_files","()",""],["create_test_files","TestUnit::Generators::IntegrationGenerator","classes/TestUnit/Generators/IntegrationGenerator.html#method-i-create_test_files","()",""],["create_test_files","TestUnit::Generators::MailerGenerator","classes/TestUnit/Generators/MailerGenerator.html#method-i-create_test_files","()",""],["create_test_files","TestUnit::Generators::ObserverGenerator","classes/TestUnit/Generators/ObserverGenerator.html#method-i-create_test_files","()",""],["create_test_files","TestUnit::Generators::PerformanceGenerator","classes/TestUnit/Generators/PerformanceGenerator.html#method-i-create_test_files","()",""],["create_test_files","TestUnit::Generators::PluginGenerator","classes/TestUnit/Generators/PluginGenerator.html#method-i-create_test_files","()",""],["create_test_files","TestUnit::Generators::ScaffoldGenerator","classes/TestUnit/Generators/ScaffoldGenerator.html#method-i-create_test_files","()",""],["create_time_zone_conversion_attribute?","ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods","classes/ActiveRecord/AttributeMethods/TimeZoneConversion/ClassMethods.html#method-i-create_time_zone_conversion_attribute-3F","(name, column)",""],["create_with","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-create_with","(value)",""],["creator?","ActiveRecord::DynamicFinderMatch","classes/ActiveRecord/DynamicFinderMatch.html#method-i-creator-3F","()",""],["csrf_meta_tag","ActionView::Helpers::CsrfHelper","classes/ActionView/Helpers/CsrfHelper.html#method-i-csrf_meta_tag","()","<p>Returns a meta tag with the cross-site request forgery protection token for\nforms to use. Place this …\n"],["css_select","ActionDispatch::Assertions::SelectorAssertions","classes/ActionDispatch/Assertions/SelectorAssertions.html#method-i-css_select","(*args)","<p>Select and return all matching elements.\n<p>If called with a single argument, uses that argument as a selector …\n"],["csv_file_path","Fixtures","classes/Fixtures.html#method-i-csv_file_path","()",""],["current","Date","classes/Date.html#method-i-current","()","<p>Returns Time.zone.today when <code>Time.zone</code> or\n<code>config.time_zone</code> are set, otherwise just returns Date.today …\n"],["current","DateTime","classes/DateTime.html#method-i-current","()","<p>Returns <code>Time.zone.now.to_datetime</code> when <code>Time.zone</code>\nor <code>config.time_zone</code> are set, otherwise returns\n<code>Time.now.to_datetime</code> …\n"],["current","Time","classes/Time.html#method-i-current","()","<p>Returns <code>Time.zone.now</code> when <code>Time.zone</code> or\n<code>config.time_zone</code> are set, otherwise just returns\n<code>Time.now</code>.\n"],["current_cycle","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-current_cycle","(name = \"default\")","<p>Returns the current cycle string after a cycle has been started. Useful for\ncomplex table highlighting …\n"],["current_database","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-current_database","()",""],["current_database","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-current_database","()","<p>Returns the current database name.\n"],["current_hash","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-current_hash","()",""],["current_hash","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-current_hash","()",""],["current_page?","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-current_page-3F","(options)","<p>True if the current request URI was generated by the given\n<code>options</code>.\n<p>Examples\n<p>Let&#39;s say we&#39;re in …\n"],["current_savepoint_name","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-current_savepoint_name","()",""],["current_session_id","ActionDispatch::Session::AbstractStore","classes/ActionDispatch/Session/AbstractStore.html#method-i-current_session_id","(env)",""],["custom_join_sql","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-custom_join_sql","(*joins)",""],["cycle","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-cycle","(first_value, *values)","<p>Creates a Cycle object whose <em>to_s</em> method cycles through elements\nof an array every time it is called. …\n"],["daemon","Process","classes/Process.html#method-c-daemon","(nochdir = nil, noclose = nil)",""],["dasherize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-dasherize","(underscored_word)","<p>Replaces underscores with dashes in the string.\n<p>Example:\n\n<pre><code>&quot;puni_puni&quot; # =&gt; &quot;puni-puni&quot;\n</code></pre>\n"],["dasherize","String","classes/String.html#method-i-dasherize","()","<p>Replaces underscores with dashes in the string.\n\n<pre><code>&quot;puni_puni&quot; # =&gt; &quot;puni-puni&quot;\n</code></pre>\n"],["data","ActiveRecord::SessionStore::Session","classes/ActiveRecord/SessionStore/Session.html#method-i-data","()","<p>Lazy-unmarshal session state.\n"],["data","ActiveRecord::SessionStore::SqlBypass","classes/ActiveRecord/SessionStore/SqlBypass.html#method-i-data","()","<p>Lazy-unmarshal session state.\n"],["data_column","ActiveRecord::SessionStore::SqlBypass","classes/ActiveRecord/SessionStore/SqlBypass.html#method-c-data_column","","<p>The data field defaults to &#39;data&#39;.\n"],["data_column_name","ActiveRecord::SessionStore::Session","classes/ActiveRecord/SessionStore/Session.html#method-c-data_column_name","","<p>Customizable data column name.  Defaults to &#39;data&#39;.\n"],["data_column_name","ActiveRecord::SessionStore::SqlBypass","classes/ActiveRecord/SessionStore/SqlBypass.html#method-c-data_column_name","",""],["data_column_size_limit","ActiveRecord::SessionStore::Session","classes/ActiveRecord/SessionStore/Session.html#method-i-data_column_size_limit","()",""],["database","ActiveSupport::Multibyte::Unicode","classes/ActiveSupport/Multibyte/Unicode.html#method-i-database","()",""],["database_configuration","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-database_configuration","()","<p>Loads and returns the contents of the #database_configuration_file. The\ncontents of the file are processed …\n"],["database_configuration_file","Rails::Configuration::Deprecated","classes/Rails/Configuration/Deprecated.html#method-i-database_configuration_file","()",""],["database_configuration_file=","Rails::Configuration::Deprecated","classes/Rails/Configuration/Deprecated.html#method-i-database_configuration_file-3D","(value)",""],["date_select","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-date_select","(object_name, method, options = {}, html_options = {})","<p>Returns a set of select tags (one for year, month, and day) pre-selected\nfor accessing a specified date-based …\n"],["date_select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-date_select","(method, options = {}, html_options = {})",""],["datetime_select","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-datetime_select","(object_name, method, options = {}, html_options = {})","<p>Returns a set of select tags (one for year, month, day, hour, and minute)\npre-selected for accessing …\n"],["datetime_select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-datetime_select","(method, options = {}, html_options = {})",""],["day","Numeric","classes/Numeric.html#method-i-day","()",""],["days","Numeric","classes/Numeric.html#method-i-days","()",""],["days_in_month","Time","classes/Time.html#method-i-days_in_month","(month, year = now.year)","<p>Return the number of days in the given month. If no year is specified, it\nwill use the current year. …\n"],["debug","ActionView::Helpers::DebugHelper","classes/ActionView/Helpers/DebugHelper.html#method-i-debug","(object)","<p>Returns a YAML representation of <code>object</code> wrapped with\n&lt;pre&gt; and &lt;/pre&gt;. If the object cannot …\n"],["debug_protected_attribute_removal","ActiveModel::MassAssignmentSecurity::Sanitizer","classes/ActiveModel/MassAssignmentSecurity/Sanitizer.html#method-i-debug_protected_attribute_removal","(attributes, sanitized_attributes)",""],["debug_rjs=","ActionView::Base","classes/ActionView/Base.html#method-c-debug_rjs-3D","(new_value)",""],["debugger","Kernel","classes/Kernel.html#method-i-debugger","()","<p>Starts a debugging session if ruby-debug has been loaded (call rails server\n–debugger to do load it). …\n"],["decode","ActiveSupport::JSON::Backends::JSONGem","classes/ActiveSupport/JSON/Backends/JSONGem.html#method-i-decode","(json)","<p>Parses a JSON string or IO and convert it into an object\n"],["decode","ActiveSupport::JSON::Backends::OkJson","classes/ActiveSupport/JSON/Backends/OkJson.html#method-i-decode","(json)","<p>Parses a JSON string or IO and convert it into an object\n"],["decode","ActiveSupport::JSON::Backends::Yajl","classes/ActiveSupport/JSON/Backends/Yajl.html#method-i-decode","(json)","<p>Parses a JSON string or IO and convert it into an object\n"],["decode","ActiveSupport::JSON::Backends::Yaml","classes/ActiveSupport/JSON/Backends/Yaml.html#method-i-decode","(json)",""],["decode","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-decode","(s)","<p>Decodes a json document in string s and returns the corresponding ruby\nvalue. String s must be valid …\n"],["decode64","ActiveSupport::Base64","classes/ActiveSupport/Base64.html#method-c-decode64","(data)","<p>Decodes a base 64 encoded string to its original representation.\n\n<pre><code>ActiveSupport::Base64.decode64(&quot;T3JpZ2luYWwgdW5lbmNvZGVkIHN0cmluZw==&quot;) ...</code></pre>\n"],["decode_credentials","ActionController::HttpAuthentication::Basic","classes/ActionController/HttpAuthentication/Basic.html#method-i-decode_credentials","(request)",""],["decompose","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-decompose","()","<p>Performs canonical decomposition on all the characters.\n<p>Example:\n\n<pre><code>&#39;é&#39;.length                         # =&gt; ...\n</code></pre>\n"],["decompose_codepoints","ActiveSupport::Multibyte::Unicode","classes/ActiveSupport/Multibyte/Unicode.html#method-i-decompose_codepoints","(type, codepoints)","<p>Decompose composed characters to the decomposed form.\n"],["decompress","ActiveSupport::Gzip","classes/ActiveSupport/Gzip.html#method-c-decompress","(source)","<p>Decompresses a gzipped string.\n"],["decrement","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-decrement","(attribute, by = 1)","<p>Initializes <code>attribute</code> to zero if <code>nil</code> and\nsubtracts the value passed as <code>by</code> (default is 1). The decrement\n…\n"],["decrement","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-i-decrement","(name, amount = 1, options = nil)",""],["decrement","ActiveSupport::Cache::MemoryStore","classes/ActiveSupport/Cache/MemoryStore.html#method-i-decrement","(name, amount = 1, options = nil)","<p>Decrement an integer value in the cache.\n"],["decrement","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-decrement","(name, amount = 1, options = nil)","<p>Increment an integer value in the cache.\n<p>Options are passed to the underlying cache implementation.\n<p>All …\n"],["decrement!","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-decrement-21","(attribute, by = 1)","<p>Wrapper around <code>decrement</code> that saves the record. This method\ndiffers from its non-bang version in that …\n"],["decrement_counter","ActiveRecord::CounterCache","classes/ActiveRecord/CounterCache.html#method-i-decrement_counter","(counter_name, id)","<p>Decrement a number field by one, usually representing a count.\n<p>This works the same as increment_counter …\n"],["decrement_open_transactions","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-decrement_open_transactions","()",""],["decrypt","ActiveSupport::MessageEncryptor","classes/ActiveSupport/MessageEncryptor.html#method-i-decrypt","(encrypted_message)",""],["decrypt_and_verify","ActiveSupport::MessageEncryptor","classes/ActiveSupport/MessageEncryptor.html#method-i-decrypt_and_verify","(value)",""],["deep_merge","Hash","classes/Hash.html#method-i-deep_merge","(other_hash)","<p>Returns a new hash with <code>self</code> and <code>other_hash</code>\nmerged recursively.\n"],["deep_merge!","Hash","classes/Hash.html#method-i-deep_merge-21","(other_hash)","<p>Returns a new hash with <code>self</code> and <code>other_hash</code>\nmerged recursively. Modifies the receiver in place.\n"],["deep_munge","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-deep_munge","(hash)","<p>Remove nils from the params hash\n"],["default","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-default","(value = nil)",""],["default","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-default","(key = nil)",""],["default","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-default","(key = nil)",""],["default","Rails::Generators::GeneratedAttribute","classes/Rails/Generators/GeneratedAttribute.html#method-i-default","()",""],["default","RailsEnvironment","classes/RailsEnvironment.html#method-c-default","()",""],["default=","RailsEnvironment","classes/RailsEnvironment.html#method-c-default-3D","(rails_env)",""],["default_action","ActionController::Responder","classes/ActionController/Responder.html#method-i-default_action","()","<p>By default, render the <code>:edit</code> action for HTML requests with\nfailure, unless the verb is POST.\n"],["default_aliases_for_option","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-default_aliases_for_option","(name, options)","<p>Return default aliases for the option name given doing a lookup in\nRails::Generators.aliases.\n"],["default_for_option","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-default_for_option","(config, name, options, default)","<p>Return default for the option name given doing a lookup in config.\n"],["default_format","ActionView::Template::Handlers::RJS","classes/ActionView/Template/Handlers/RJS.html#method-i-default_format","()",""],["default_helper_module!","AbstractController::Helpers::ClassMethods","classes/AbstractController/Helpers/ClassMethods.html#method-i-default_helper_module-21","()",""],["default_inspect","Date","classes/Date.html#method-i-default_inspect","()",""],["default_inspect","DateTime","classes/DateTime.html#method-i-default_inspect","()",""],["default_middleware_stack","Rails::Application","classes/Rails/Application.html#method-i-default_middleware_stack","()",""],["default_options","Rails::Server","classes/Rails/Server.html#method-i-default_options","()",""],["default_primary_key_type","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-default_primary_key_type","()",""],["default_render","ActionController::ImplicitRender","classes/ActionController/ImplicitRender.html#method-i-default_render","()",""],["default_render","ActionController::Responder","classes/ActionController/Responder.html#method-i-default_render","()","<p>If a given response block was given, use it, otherwise call render on\ncontroller.\n"],["default_scope","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-default_scope","(options = {})","<p>Sets the default options for the model. The format of the\n<code>options</code> argument is the same as in find.\n\n<pre><code>class ...\n</code></pre>\n"],["default_sequence_name","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-default_sequence_name","(table, column)",""],["default_source_root","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-default_source_root","()","<p>Returns the default source root for a given generator. This is used\ninternally by rails to set its generators …\n"],["default_timezone","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-default_timezone","","<p>Determines whether to use Time.local (using :local) or Time.utc (using\n:utc) when pulling dates and times …\n"],["default_url_options","ActionDispatch::Integration::Session","classes/ActionDispatch/Integration/Session.html#method-i-default_url_options","()",""],["default_url_options","ActionDispatch::Routing::Mapper::Base","classes/ActionDispatch/Routing/Mapper/Base.html#method-i-default_url_options","(options)",""],["default_url_options","ActionMailer::Base::DeprecatedUrlOptions","classes/ActionMailer/Base/DeprecatedUrlOptions.html#method-i-default_url_options","()",""],["default_url_options=","ActionDispatch::Routing::Mapper::Base","classes/ActionDispatch/Routing/Mapper/Base.html#method-i-default_url_options-3D","(options)",""],["default_url_options=","ActionMailer::Base::DeprecatedUrlOptions","classes/ActionMailer/Base/DeprecatedUrlOptions.html#method-i-default_url_options-3D","(val)",""],["default_value_for_option","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-default_value_for_option","(name, options)","<p>Return the default value for the option name given doing a lookup in\nRails::Generators.options.\n"],["defaults","ActionDispatch::Routing::Mapper::Scoping","classes/ActionDispatch/Routing/Mapper/Scoping.html#method-i-defaults","(defaults = {})","<p>Allows you to set default parameters for a route, such as this: defaults\n:id =&gt; &#39;home&#39; do …\n"],["define","ActiveRecord::Schema","classes/ActiveRecord/Schema.html#method-c-define","(info={}, &block)","<p>Eval the given block. All methods available to the current connection\nadapter are available within the …\n"],["define_attr_method","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-define_attr_method","(name, value=nil, &block)","<p>Defines an “attribute” method (like <code>inheritance_column</code> or\n<code>table_name</code>). A new (class) method …\n"],["define_attribute_methods","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-define_attribute_methods","(attr_names)","<p>Declares a the attributes that should be prefixed and suffixed by\nActiveModel::AttributeMethods.\n<p>To use, …\n"],["define_attribute_methods","ActiveRecord::AttributeMethods::ClassMethods","classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-define_attribute_methods","()","<p>Generates all the attribute related methods for columns in the database\naccessors, mutators and query …\n"],["define_callbacks","ActiveRecord::Observer","classes/ActiveRecord/Observer.html#method-i-define_callbacks","(klass)",""],["define_callbacks","ActiveSupport::Callbacks::ClassMethods","classes/ActiveSupport/Callbacks/ClassMethods.html#method-i-define_callbacks","(*callbacks)","<p>Defines callbacks types:\n\n<pre><code>define_callbacks :validate</code></pre>\n<p>This macro accepts the following options:\n"],["define_method_attribute","ActiveRecord::AttributeMethods::Read::ClassMethods","classes/ActiveRecord/AttributeMethods/Read/ClassMethods.html#method-i-define_method_attribute","(attr_name)",""],["define_method_attribute","ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods","classes/ActiveRecord/AttributeMethods/TimeZoneConversion/ClassMethods.html#method-i-define_method_attribute","(attr_name)","<p>Defined for all <code>datetime</code> and <code>timestamp</code> attributes\nwhen <code>time_zone_aware_attributes</code> are enabled. This enhanced …\n"],["define_method_attribute=","ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods","classes/ActiveRecord/AttributeMethods/TimeZoneConversion/ClassMethods.html#method-i-define_method_attribute-3D","(attr_name)","<p>Defined for all <code>datetime</code> and <code>timestamp</code> attributes\nwhen <code>time_zone_aware_attributes</code> are enabled. This enhanced …\n"],["define_method_attribute=","ActiveRecord::AttributeMethods::Write::ClassMethods","classes/ActiveRecord/AttributeMethods/Write/ClassMethods.html#method-i-define_method_attribute-3D","(attr_name)",""],["define_model_callbacks","ActiveModel::Callbacks","classes/ActiveModel/Callbacks.html#method-i-define_model_callbacks","(*callbacks)","<p>define_model_callbacks accepts the same options define_callbacks does, in\ncase you want to overwrite …\n"],["define_non_cyclic_method","ActiveRecord::AutosaveAssociation::ClassMethods","classes/ActiveRecord/AutosaveAssociation/ClassMethods.html#method-i-define_non_cyclic_method","(name, reflection, &block)",""],["define_read_method","ActiveRecord::AttributeMethods::Read::ClassMethods","classes/ActiveRecord/AttributeMethods/Read/ClassMethods.html#method-i-define_read_method","(method_name, attr_name, column)","<p>Define an attribute reader method.  Cope with nil column. method_name is\nthe same as attr_name except …\n"],["define_read_method_for_serialized_attribute","ActiveRecord::AttributeMethods::Read::ClassMethods","classes/ActiveRecord/AttributeMethods/Read/ClassMethods.html#method-i-define_read_method_for_serialized_attribute","(attr_name)","<p>Define read method for serialized attribute.\n"],["defined_activerecord_methods","ActiveRecord::AttributeMethods::ClassMethods","classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-defined_activerecord_methods","()",""],["delay","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-delay","(seconds = 1)","<p>Executes the content of the block after a delay of <code>seconds</code>.\nExample:\n\n<pre><code># Generates:\n#     setTimeout(function() ...</code></pre>\n"],["delegate","Module","classes/Module.html#method-i-delegate","(*methods)","<p>Provides a delegate class method to easily expose contained objects&#39;\nmethods as your own. Pass one …\n"],["delete","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-delete","(action, parameters = nil, session = nil, flash = nil)","<p>Executes a request simulating DELETE HTTP method and set/volley the\nresponse\n"],["delete","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-delete","(path, parameters = nil, headers = nil)","<p>Performs a DELETE request with the given parameters. See get() for more\ndetails.\n"],["delete","ActionDispatch::Routing::Mapper::HttpHelpers","classes/ActionDispatch/Routing/Mapper/HttpHelpers.html#method-i-delete","(*args, &block)","<p>Define a route that only recognizes HTTP PUT. For supported arguments, see\n<code>match</code>.\n<p>Example:\n<p>delete &#39;broccoli&#39;, …\n"],["delete","ActionDispatch::Session::AbstractStore::SessionHash","classes/ActionDispatch/Session/AbstractStore/SessionHash.html#method-i-delete","(key)",""],["delete","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-delete","(sql, name = nil)","<p>Executes the delete statement and returns the number of rows affected.\n"],["delete","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-delete","()","<p>Deletes the record in the database and freezes this instance to reflect\nthat no changes should be made …\n"],["delete","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-delete","(id_or_array)","<p>Deletes the row with a primary key matching the <code>id</code> argument,\nusing a SQL <code>DELETE</code> statement, and returns …\n"],["delete","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-delete","(name, options = nil)","<p>Deletes an entry in the cache. Returns <code>true</code> if an entry is\ndeleted.\n<p>Options are passed to the underlying …\n"],["delete","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-delete","(key)","<p>Removes a specified key from the hash.\n"],["delete","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-delete","(key)","<p>Removes a specified key from the hash.\n"],["delete?","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-delete-3F","()","<p>Is this a DELETE request? Equivalent to <code>request.request_method ==\n:delete</code>.\n"],["delete_all","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-delete_all","(conditions = nil)","<p>Deletes the records matching <code>conditions</code> without instantiating\nthe records first, and hence not calling …\n"],["delete_all_has_many_dependencies","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-delete_all_has_many_dependencies","(record, reflection_name, association_class, dependent_conditions)",""],["delete_empty_directories","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-i-delete_empty_directories","(dir)","<p>Delete empty directories in the cache.\n"],["delete_entry","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-i-delete_entry","(key, options)",""],["delete_entry","ActiveSupport::Cache::Strategy::LocalCache::LocalStore","classes/ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-i-delete_entry","(key, options)",""],["delete_existing_fixtures","Fixtures","classes/Fixtures.html#method-i-delete_existing_fixtures","()",""],["delete_matched","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-i-delete_matched","(matcher, options = nil)",""],["delete_matched","ActiveSupport::Cache::MemoryStore","classes/ActiveSupport/Cache/MemoryStore.html#method-i-delete_matched","(matcher, options = nil)",""],["delete_matched","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-delete_matched","(matcher, options = nil)","<p>Delete all entries with keys matching the pattern.\n<p>Options are passed to the underlying cache implementation. …\n"],["delete_nil_values!","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-delete_nil_values-21","()",""],["delete_sql","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-delete_sql","(sql, name = nil)","<p>Executes the delete statement and returns the number of rows affected.\n"],["delete_via_redirect","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-delete_via_redirect","(path, parameters = nil, headers = nil)","<p>Performs a DELETE request, following any subsequent redirect. See\n<code>request_via_redirect</code> for more information. …\n"],["demodulize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-demodulize","(class_name_in_module)","<p>Removes the module part from the expression in the string.\n<p>Examples:\n\n<pre><code>&quot;ActiveRecord::CoreExtensions::String::Inflections&quot;.demodulize ...</code></pre>\n"],["demodulize","String","classes/String.html#method-i-demodulize","()","<p>Removes the module part from the constant expression in the string.\n\n<pre><code>&quot;ActiveRecord::CoreExtensions::String::Inflections&quot;.demodulize ...</code></pre>\n"],["deny?","ActiveModel::MassAssignmentSecurity::BlackList","classes/ActiveModel/MassAssignmentSecurity/BlackList.html#method-i-deny-3F","(key)",""],["deny?","ActiveModel::MassAssignmentSecurity::WhiteList","classes/ActiveModel/MassAssignmentSecurity/WhiteList.html#method-i-deny-3F","(key)",""],["deprecate","Module","classes/Module.html#method-i-deprecate","(*method_names)","<p>Declare that a method has been deprecated.\n\n<pre><code>deprecate :foo\ndeprecate :bar =&gt; &#39;message&#39;\ndeprecate :foo, ...\n</code></pre>\n"],["deprecate_methods","ActiveSupport::Deprecation","classes/ActiveSupport/Deprecation.html#method-i-deprecate_methods","(target_module, *method_names)","<p>Declare that a method has been deprecated.\n"],["deprecated_method_warning","ActiveSupport::Deprecation","classes/ActiveSupport/Deprecation.html#method-i-deprecated_method_warning","(method_name, message = nil)",""],["deprecated_url_options","ActionMailer::Base::DeprecatedUrlOptions","classes/ActionMailer/Base/DeprecatedUrlOptions.html#method-i-deprecated_url_options","()",""],["deprecation_caller_message","ActiveSupport::Deprecation","classes/ActiveSupport/Deprecation.html#method-i-deprecation_caller_message","(callstack)",""],["deprecation_message","ActiveSupport::Deprecation","classes/ActiveSupport/Deprecation.html#method-i-deprecation_message","(callstack, message = nil)",""],["derive_class_name","ActiveRecord::Reflection::MacroReflection","classes/ActiveRecord/Reflection/MacroReflection.html#method-i-derive_class_name","()",""],["desc","Rails::API::Task","classes/Rails/API/Task.html#method-i-desc","(description)","<p>Hack, ignore the desc calls performed by the original initializer.\n"],["desc","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-desc","(description=nil)","<p>Tries to get the description from a USAGE file one folder above the source\nroot otherwise uses a default …\n"],["descendants","ActiveSupport::DescendantsTracker","classes/ActiveSupport/DescendantsTracker.html#method-c-descendants","(klass)",""],["descendants","ActiveSupport::DescendantsTracker","classes/ActiveSupport/DescendantsTracker.html#method-i-descendants","()",""],["descends_from_active_record?","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-descends_from_active_record-3F","()","<p>True if this isn&#39;t a concrete subclass needing a STI type condition.\n"],["describe","ActiveSupport::Testing::Declarative","classes/ActiveSupport/Testing/Declarative.html#method-c-describe","(text)",""],["deserialize_entry","ActiveSupport::Cache::MemCacheStore","classes/ActiveSupport/Cache/MemCacheStore.html#method-i-deserialize_entry","(raw_value)",""],["destination","Rails::Generators::TestCase","classes/Rails/Generators/TestCase.html#method-c-destination","(path)","<p>Sets the destination of generator files:\n\n<pre><code>destination File.expand_path(&quot;../tmp&quot;, File.dirname(__FILE__))</code></pre>\n"],["destroy","ActionDispatch::Session::AbstractStore","classes/ActionDispatch/Session/AbstractStore.html#method-i-destroy","(env)",""],["destroy","ActionDispatch::Session::AbstractStore::SessionHash","classes/ActionDispatch/Session/AbstractStore/SessionHash.html#method-i-destroy","()",""],["destroy","ActionDispatch::Session::CookieStore","classes/ActionDispatch/Session/CookieStore.html#method-i-destroy","(env)",""],["destroy","ActionDispatch::Session::MemCacheStore","classes/ActionDispatch/Session/MemCacheStore.html#method-i-destroy","(env)",""],["destroy","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-destroy","()","<p>Deletes the record in the database and freezes this instance to reflect\nthat no changes should be made …\n"],["destroy","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-destroy","(id)","<p>Destroy an object (or multiple objects) that has the given id, the object\nis instantiated first, therefore …\n"],["destroy","ActiveRecord::SessionStore","classes/ActiveRecord/SessionStore.html#method-i-destroy","(env)",""],["destroy","ActiveRecord::SessionStore::SqlBypass","classes/ActiveRecord/SessionStore/SqlBypass.html#method-i-destroy","()",""],["destroy","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-i-destroy","()","<p>DELETE destroy\n"],["destroy_all","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-destroy_all","(conditions = nil)","<p>Destroys the records matching <code>conditions</code> by instantiating each\nrecord and calling its <code>destroy</code> method. …\n"],["destroy_associations","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-destroy_associations","()","<p>A hook to be overriden by association modules.\n"],["destroyed?","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-destroyed-3F","()","<p>Returns true if this object has been destroyed, otherwise returns false.\n"],["details_for_lookup","AbstractController::ViewPaths","classes/AbstractController/ViewPaths.html#method-i-details_for_lookup","()",""],["determine_default_controller_class","ActionController::TestCase::Behavior::ClassMethods","classes/ActionController/TestCase/Behavior/ClassMethods.html#method-i-determine_default_controller_class","(name)",""],["determine_default_helper_class","ActionView::TestCase::Behavior::ClassMethods","classes/ActionView/TestCase/Behavior/ClassMethods.html#method-i-determine_default_helper_class","(name)",""],["determine_install_method","Commands::Install","classes/Commands/Install.html#method-i-determine_install_method","()",""],["determine_source","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-determine_source","(source, collection)",""],["diff","Hash","classes/Hash.html#method-i-diff","(h2)","<p>Returns a hash that represents the difference between two hashes.\n<p>Examples:\n\n<pre><code>{1 =&gt; 2}.diff(1 =&gt; 2)      ...\n</code></pre>\n"],["direct_descendants","ActiveSupport::DescendantsTracker","classes/ActiveSupport/DescendantsTracker.html#method-i-direct_descendants","()",""],["direct_descendants","ActiveSupport::DescendantsTracker","classes/ActiveSupport/DescendantsTracker.html#method-c-direct_descendants","(klass)",""],["directory_exist?","ActionDispatch::Static","classes/ActionDispatch/Static.html#method-i-directory_exist-3F","(path)",""],["dirname","ActiveSupport::Multibyte::Unicode::UnicodeDatabase","classes/ActiveSupport/Multibyte/Unicode/UnicodeDatabase.html#method-c-dirname","()","<p>Returns the directory in which the data files are stored\n"],["dirties_query_cache","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-dirties_query_cache","(base, *method_names)",""],["disable_referential_integrity","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-disable_referential_integrity","()","<p>Override to turn off referential integrity while executing\n<code>&amp;block</code>.\n"],["discard","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-discard","(k = nil)","<p>Marks the entire flash or a single flash entry to be discarded by the end\nof the current action:\n\n<pre><code>flash.discard ...</code></pre>\n"],["disconnect!","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-disconnect-21","()","<p>Disconnects all connections in the pool, and clears the pool.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-disconnect-21","()",""],["disconnect!","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-disconnect-21","()","<p>Close the connection.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-disconnect-21","()",""],["dispatch","ActionController::Metal","classes/ActionController/Metal.html#method-i-dispatch","(name, request)","<p>:api: private\n"],["dispatch","ActionController::RackDelegation","classes/ActionController/RackDelegation.html#method-i-dispatch","(action, request, response = ActionDispatch::Response.new)",""],["display","ActionController::Responder","classes/ActionController/Responder.html#method-i-display","(resource, given_options={})","<p>Display is just a shortcut to render a resource with the current format.\n\n<pre><code>display @user, :status =&gt; :ok\n</code></pre>\n"],["display","SourceAnnotationExtractor","classes/SourceAnnotationExtractor.html#method-i-display","(results, options={})","<p>Prints the mapping from filenames to annotations in <code>results</code>\nordered by filename. The <code>options</code> hash is …\n"],["distance_of_time_in_words","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-distance_of_time_in_words","(from_time, to_time = 0, include_seconds = false, options = {})","<p>Reports the approximate distance in time between two Time or Date objects\nor integers as seconds. Set …\n"],["distance_of_time_in_words_to_now","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-distance_of_time_in_words_to_now","(from_time, include_seconds = false)",""],["distinct","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-distinct","(columns, order_by)","<p>SELECT DISTINCT clause for a given set of columns and a given ORDER BY\nclause. Both PostgreSQL and Oracle …\n"],["div_for","ActionView::Helpers::RecordTagHelper","classes/ActionView/Helpers/RecordTagHelper.html#method-i-div_for","(record, *args, &block)","<p>Produces a wrapper DIV element with id and class parameters that relate to\nthe specified Active Record …\n"],["dom_class","ActionController::RecordIdentifier","classes/ActionController/RecordIdentifier.html#method-i-dom_class","(record_or_class, prefix = nil)","<p>The DOM class convention is to use the singular form of an object or class.\nExamples:\n\n<pre><code>dom_class(post) ...</code></pre>\n"],["dom_id","ActionController::RecordIdentifier","classes/ActionController/RecordIdentifier.html#method-i-dom_id","(record, prefix = nil)","<p>The DOM id convention is to use the singular form of an object or class\nwith the id following an underscore. …\n"],["domain","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-domain","(tld_length = 1)","<p>Returns the domain part of a host, such as “rubyonrails.org” in\n“www.rubyonrails.org”. …\n"],["downcase","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-downcase","()","<p>Convert characters in the string to lowercase.\n<p>Example:\n\n<pre><code>&#39;VĚDA A VÝZKUM&#39;.mb_chars.downcase.to_s # =&gt; &quot;věda ...\n</code></pre>\n"],["download","RecursiveHTTPFetcher","classes/RecursiveHTTPFetcher.html#method-i-download","(link)",""],["draggable","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-draggable","(id, options = {})","<p>Creates a script.aculo.us draggable element. See\nActionView::Helpers::ScriptaculousHelper for more information. …\n"],["draggable_element","ActionView::Helpers::ScriptaculousHelper","classes/ActionView/Helpers/ScriptaculousHelper.html#method-i-draggable_element","(element_id, options = {})","<p>Makes the element with the DOM ID specified by <code>element_id</code>\ndraggable.\n<p>Example:\n\n<pre><code>&lt;%= draggable_element(&quot;my_image&quot;, ...</code></pre>\n"],["drop_receiving","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-drop_receiving","(id, options = {})","<p>Creates a script.aculo.us drop receiving element. See\nActionView::Helpers::ScriptaculousHelper for more …\n"],["drop_receiving_element","ActionView::Helpers::ScriptaculousHelper","classes/ActionView/Helpers/ScriptaculousHelper.html#method-i-drop_receiving_element","(element_id, options = {})","<p>Makes the element with the DOM ID specified by <code>element_id</code>\nreceive dropped draggable elements (created …\n"],["drop_table","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-drop_table","(table_name, options = {})",""],["drop_table","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-drop_table","(table_name, options = {})","<p>Drops a table from the database.\n"],["dst?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-dst-3F","()",""],["dup","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-dup","()","<p>Returns duplicated record with unfreezed attributes.\n"],["dup","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-dup","()","<p>Returns an exact copy of the hash.\n"],["dup","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-dup","()","<p>Returns an exact copy of the hash.\n"],["duplicable?","Object","classes/Object.html#method-i-duplicable-3F","()","<p>Can you safely .dup this object? False for nil, false, true, symbols,\nnumbers, class and module objects; …\n"],["duration_of_variable_length?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-duration_of_variable_length-3F","(obj)",""],["each","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-each","(&callback)",""],["each","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-each","()","<p>Iterates through each error key, value pair in the error messages hash.\nYields the attribute and the …\n"],["each","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-each","()",""],["each_full","ActiveModel::DeprecatedErrorMethods","classes/ActiveModel/DeprecatedErrorMethods.html#method-i-each_full","()",""],["each_with_object","Enumerable","classes/Enumerable.html#method-i-each_with_object","(memo, &block)","<p>Iterates over a collection, passing the current element\n<strong>and</strong> the <code>memo</code> to the block. Handy for building\n…\n"],["eager_autoload","ActiveSupport::Autoload","classes/ActiveSupport/Autoload.html#method-i-eager_autoload","()",""],["eager_autoload!","ActiveSupport::Autoload","classes/ActiveSupport/Autoload.html#method-c-eager_autoload-21","()",""],["eager_load","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-eager_load","(*args)",""],["eager_load","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-eager_load","()",""],["eager_load!","Rails::Engine","classes/Rails/Engine.html#method-i-eager_load-21","()",""],["eager_load!","Rails::Railtie","classes/Rails/Railtie.html#method-i-eager_load-21","()",""],["eager_load_paths","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-i-eager_load_paths","()",""],["eager_loading?","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-eager_loading-3F","()",""],["eat","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-eat","(typ, ts)",""],["email_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-email_field","(object_name, method, options = {})","<p>Returns a text_field of type “email”.\n"],["email_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-email_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type “email”.\n<p>Options\n<p>Accepts the same options as text_field_tag.\n"],["emitted_hidden_id?","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-emitted_hidden_id-3F","()",""],["empty?","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-empty-3F","()","<p>Returns true if there are any errors, false if not.\n"],["empty?","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-empty-3F","()","<p>Returns true if there are no records.\n"],["empty_insert_statement_value","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-empty_insert_statement_value","()",""],["empty_insert_statement_value","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-empty_insert_statement_value","()",""],["empty_json_resource","ActionController::Responder","classes/ActionController/Responder.html#method-i-empty_json_resource","()","<p>Return a valid empty JSON resource\n"],["empty_resource","ActionController::Responder","classes/ActionController/Responder.html#method-i-empty_resource","()","<p>Delegate to proper empty resource method\n"],["emulate_booleans","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-c-emulate_booleans","","<p>By default, the MysqlAdapter will consider all columns of type\n<code>tinyint(1)</code> as boolean. If you wish to …\n"],["enable_warnings","Kernel","classes/Kernel.html#method-i-enable_warnings","()","<p>Sets $VERBOSE to true for the duration of the block and back to its\noriginal value afterwards.\n"],["enabled?","ActionDispatch::Http::ParameterFilter","classes/ActionDispatch/Http/ParameterFilter.html#method-i-enabled-3F","()",""],["encode","ActiveSupport::JSON","classes/ActiveSupport/JSON.html#method-c-encode","(value, options = nil)","<p>Dumps object in JSON (JavaScript Object Notation). See www.json.org for\nmore info.\n"],["encode","ActiveSupport::JSON::Encoding::Encoder","classes/ActiveSupport/JSON/Encoding/Encoder.html#method-i-encode","(value, use_options = true)",""],["encode","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-encode","(x)","<p>Encodes x into a json text. It may contain only Array, Hash, String,\nNumeric, true, false, nil. (Note, …\n"],["encode64","ActiveSupport::Base64","classes/ActiveSupport/Base64.html#method-c-encode64","(data)","<p>Encodes a string to its base 64 representation. Each 60 characters of\noutput is separated by a newline …\n"],["encode64s","ActiveSupport::Base64","classes/ActiveSupport/Base64.html#method-c-encode64s","(value)","<p>Encodes the value as base64 without the newline breaks. This makes the\nbase64 encoding readily usable …\n"],["encode_credentials","ActionController::HttpAuthentication::Basic","classes/ActionController/HttpAuthentication/Basic.html#method-i-encode_credentials","(user_name, password)",""],["encode_filename","ActionDispatch::Http::UploadedFile","classes/ActionDispatch/Http/UploadedFile.html#method-i-encode_filename","(filename)",""],["encode_params","ActionDispatch::Http::Parameters","classes/ActionDispatch/Http/Parameters.html#method-i-encode_params","(params)","<p>TODO: Validate that the characters are UTF-8. If they aren&#39;t,\nyou&#39;ll get a weird error down the …\n"],["encode_with","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-encode_with","(coder)",""],["encode_with","BigDecimal","classes/BigDecimal.html#method-i-encode_with","(coder)",""],["encoding","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-encoding","()","<p>Returns the current database encoding format.\n"],["encoding=","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-encoding-3D","(value)",""],["encoding_aware?","String","classes/String.html#method-i-encoding_aware-3F","()",""],["encrypt","ActiveSupport::MessageEncryptor","classes/ActiveSupport/MessageEncryptor.html#method-i-encrypt","(value)",""],["encrypt_and_sign","ActiveSupport::MessageEncryptor","classes/ActiveSupport/MessageEncryptor.html#method-i-encrypt_and_sign","(value)",""],["end","ActiveSupport::Callbacks::Callback","classes/ActiveSupport/Callbacks/Callback.html#method-i-end","(key=nil, object=nil)","<p>This will supply contents for around and after filters, but not before\nfilters (for the backward pass). …\n"],["end_document","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-end_document","()",""],["end_element","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-end_element","(name)",""],["end_of_day","Date","classes/Date.html#method-i-end_of_day","()","<p>Converts Date to a Time (or DateTime if necessary) with the time portion\nset to the end of the day (23:59:59) …\n"],["end_of_day","DateTime","classes/DateTime.html#method-i-end_of_day","()","<p>Returns a new DateTime representing the end of the day (23:59:59)\n"],["end_of_day","Time","classes/Time.html#method-i-end_of_day","()","<p>Returns a new Time representing the end of the day, 23:59:59.999999\n(.999999999 in ruby1.9)\n"],["end_of_month","Date","classes/Date.html#method-i-end_of_month","()","<p>Returns a new Date/DateTime representing the end of the month (last day of\nthe month; DateTime objects …\n"],["end_of_month","Time","classes/Time.html#method-i-end_of_month","()","<p>Returns a new Time representing the end of the month (end of the last day\nof the month)\n"],["end_of_quarter","Date","classes/Date.html#method-i-end_of_quarter","()","<p>Returns a new Date/DateTime representing the end of the quarter (last day\nof march, june, september, …\n"],["end_of_quarter","Time","classes/Time.html#method-i-end_of_quarter","()","<p>Returns a new Time representing the end of the quarter (end of the last day\nof march, june, september, …\n"],["end_of_week","Date","classes/Date.html#method-i-end_of_week","()","<p>Returns a new Date/DateTime representing the end of this week (Sunday,\nDateTime objects will have time …\n"],["end_of_week","Time","classes/Time.html#method-i-end_of_week","()","<p>Returns a new Time representing the end of this week, (end of Sunday)\n"],["end_of_year","Date","classes/Date.html#method-i-end_of_year","()","<p>Returns a new Time representing the end of the year (31st of december;\nDateTime objects will have time …\n"],["end_of_year","Time","classes/Time.html#method-i-end_of_year","()","<p>Returns a new Time representing the end of the year (end of the 31st of\ndecember)\n"],["engines","Rails::Application::Railties","classes/Rails/Application/Railties.html#method-i-engines","()",""],["ensure_cache_path","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-i-ensure_cache_path","(path)","<p>Make sure a file path&#39;s directories exist.\n"],["ensure_javascript_sources!","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-ensure_javascript_sources-21","(sources)",""],["ensure_proper_type","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-ensure_proper_type","()","<p>Sets the attribute used for single table inheritance to this class name if\nthis is not the ActiveRecord::Base …\n"],["ensure_session_key!","ActionDispatch::Session::AbstractStore","classes/ActionDispatch/Session/AbstractStore.html#method-i-ensure_session_key-21","()",""],["ensure_stylesheet_sources!","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-ensure_stylesheet_sources-21","(sources)",""],["entry","ActionView::Helpers::AtomFeedHelper::AtomFeedBuilder","classes/ActionView/Helpers/AtomFeedHelper/AtomFeedBuilder.html#method-i-entry","(record, options = {})","<p>Creates an entry tag for a specific record and prefills the id using class\nand id.\n<p>Options:\n<p><code>:published</code> …\n"],["enumerate","SourceAnnotationExtractor","classes/SourceAnnotationExtractor.html#method-c-enumerate","(tag, options={})","<p>Prints all annotations with tag <code>tag</code> under the root directories\n<code>app</code>, <code>lib</code>, and <code>test</code> (recursively).\nOnly …\n"],["env","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-env","()",""],["env","Rails","classes/Rails.html#method-i-env","()",""],["env=","Rails","classes/Rails.html#method-i-env-3D","(environment)",""],["env_defaults","Rails::Application","classes/Rails/Application.html#method-i-env_defaults","()",""],["env_filter","ActionDispatch::Http::FilterParameters","classes/ActionDispatch/Http/FilterParameters.html#method-i-env_filter","()",""],["env_name","ActionDispatch::Http::Headers","classes/ActionDispatch/Http/Headers.html#method-i-env_name","(header_name)","<p>Converts a HTTP header name to an environment variable name.\n"],["environment","ActiveSupport::Testing::Performance::Benchmarker","classes/ActiveSupport/Testing/Performance/Benchmarker.html#method-i-environment","()",""],["environment","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-environment","(data=nil, options={}, &block)","<p>Adds a line inside the Application class for config/application.rb.\n<p>If options :env is specified, the …\n"],["environment=","Commands::Plugin","classes/Commands/Plugin.html#method-i-environment-3D","(value)",""],["eql?","ActionView::FileSystemResolver","classes/ActionView/FileSystemResolver.html#method-i-eql-3F","(resolver)",""],["eql?","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-eql-3F","(comparison_object)","<p>Delegates to ==\n"],["eql?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-eql-3F","(other)",""],["erb_render","Fixtures","classes/Fixtures.html#method-i-erb_render","(fixture_content)",""],["erb_trim_mode","ActionView::Template::Handlers::ERB","classes/ActionView/Template/Handlers/ERB.html#method-c-erb_trim_mode","","<p>Specify trim mode for the ERB compiler. Defaults to &#39;-&#39;. See ERb\ndocumentation for suitable values. …\n"],["error","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-error","(error_message)",""],["error?","ActionDispatch::TestResponse","classes/ActionDispatch/TestResponse.html#method-i-error-3F","()","<p>Was there a server-side error?\n"],["error_message","ActionView::Helpers::ActiveModelInstanceTag","classes/ActionView/Helpers/ActiveModelInstanceTag.html#method-i-error_message","()",""],["error_wrapping","ActionView::Helpers::ActiveModelInstanceTag","classes/ActionView/Helpers/ActiveModelInstanceTag.html#method-i-error_wrapping","(html_tag)",""],["errors","ActiveModel::Validations","classes/ActiveModel/Validations.html#method-i-errors","()","<p>Returns the Errors object that holds all information about attribute error\nmessages.\n"],["errors","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-i-errors","()","<p>POST create PUT update\n"],["escape","ActiveSupport::JSON::Encoding::Encoder","classes/ActiveSupport/JSON/Encoding/Encoder.html#method-i-escape","(string)",""],["escape_bytea","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-escape_bytea","(value)","<p>Escapes binary strings for bytea input to the database.\n"],["escape_entry","ActionView::PathResolver","classes/ActionView/PathResolver.html#method-i-escape_entry","(entry)",""],["escape_javascript","ActionView::Helpers::JavaScriptHelper","classes/ActionView/Helpers/JavaScriptHelper.html#method-i-escape_javascript","(javascript)","<p>Escape carrier returns and single and double quotes for JavaScript\nsegments.\n"],["escape_key","ActiveSupport::Cache::MemCacheStore","classes/ActiveSupport/Cache/MemCacheStore.html#method-i-escape_key","(key)",""],["escape_once","ActionView::Helpers::TagHelper","classes/ActionView/Helpers/TagHelper.html#method-i-escape_once","(html)","<p>Returns an escaped version of <code>html</code> without affecting existing\nescaped entities.\n<p>Examples\n\n<pre><code>escape_once(&quot;1 ...</code></pre>\n"],["establish_connection","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-establish_connection","(spec = nil)","<p>Establishes the connection to the database. Accepts a hash as input where\nthe <code>:adapter</code> key must be specified …\n"],["establish_connection","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-establish_connection","(name, spec)",""],["etag","ActionDispatch::Http::Cache::Response","classes/ActionDispatch/Http/Cache/Response.html#method-i-etag","()",""],["etag=","ActionDispatch::Http::Cache::Response","classes/ActionDispatch/Http/Cache/Response.html#method-i-etag-3D","(etag)",""],["etag?","ActionDispatch::Http::Cache::Response","classes/ActionDispatch/Http/Cache/Response.html#method-i-etag-3F","()",""],["etag_matches?","ActionDispatch::Http::Cache::Request","classes/ActionDispatch/Http/Cache/Request.html#method-i-etag_matches-3F","(etag)",""],["exabyte","Numeric","classes/Numeric.html#method-i-exabyte","()",""],["exabytes","Numeric","classes/Numeric.html#method-i-exabytes","()",""],["except","ActiveRecord::SpawnMethods","classes/ActiveRecord/SpawnMethods.html#method-i-except","(*skips)",""],["except","Hash","classes/Hash.html#method-i-except","(*keys)","<p>Return a hash that includes everything but the given keys. This is useful\nfor limiting a set of parameters …\n"],["except!","Hash","classes/Hash.html#method-i-except-21","(*keys)","<p>Replaces the hash without the given keys.\n"],["excerpt","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-excerpt","(text, phrase, *args)","<p>Extracts an excerpt from <code>text</code> that matches the first instance\nof <code>phrase</code>. The <code>:radius</code> option expands the …\n"],["exclude?","Enumerable","classes/Enumerable.html#method-i-exclude-3F","(object)","<p>The negative of the Enumerable#include?. Returns true if the collection\ndoes not include the object. …\n"],["exclude?","String","classes/String.html#method-i-exclude-3F","(string)","<p>The inverse of String#include?. Returns true if the string does not include\nthe other string.\n"],["exec_script_rails!","Rails::ScriptRailsLoader","classes/Rails/ScriptRailsLoader.html#method-c-exec_script_rails-21","()",""],["execute","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-execute","(sql, name = nil, skip_logging = false)","<p>Executes the SQL statement in the context of this connection.\n"],["execute","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-execute","(sql, name = nil)","<p>Executes an SQL statement, returning a PGresult object on success or\nraising a PGError exception otherwise. …\n"],["execute_callstack_for_multiparameter_attributes","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-execute_callstack_for_multiparameter_attributes","(callstack)",""],["execute_hook","ActiveSupport","classes/ActiveSupport.html#method-c-execute_hook","(base, options, block)",""],["execute_if_updated","ActiveSupport::FileUpdateChecker","classes/ActiveSupport/FileUpdateChecker.html#method-i-execute_if_updated","()",""],["exist?","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-exist-3F","(name, options = nil)","<p>Return true if the cache contains an entry for the given key.\n<p>Options are passed to the underlying cache …\n"],["exists?","ActionDispatch::Session::AbstractStore","classes/ActionDispatch/Session/AbstractStore.html#method-i-exists-3F","(env)",""],["exists?","ActionDispatch::Session::AbstractStore::SessionHash","classes/ActionDispatch/Session/AbstractStore/SessionHash.html#method-i-exists-3F","()",""],["exists?","ActionView::LookupContext::ViewPaths","classes/ActionView/LookupContext/ViewPaths.html#method-i-exists-3F","(name, prefix = nil, partial = false)",""],["exists?","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-exists-3F","(id = false)","<p>Returns true if a record exists in the table that matches the\n<code>id</code> or conditions given, or false otherwise. …\n"],["expand_attribute_names_for_aggregates","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-expand_attribute_names_for_aggregates","(attribute_names)","<p>Similar in purpose to <code>expand_hash_conditions_for_aggregates</code>.\n"],["expand_cache_key","ActiveSupport::Cache","classes/ActiveSupport/Cache.html#method-c-expand_cache_key","(key, namespace = nil)",""],["expand_hash_conditions_for_aggregates","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-expand_hash_conditions_for_aggregates","(attrs)","<p>Accepts a hash of SQL conditions and replaces those attributes that\ncorrespond to a <code>composed_of</code> relationship …\n"],["expand_javascript_sources","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-expand_javascript_sources","(sources, recursive = false)",""],["expand_stylesheet_sources","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-expand_stylesheet_sources","(sources, recursive)",""],["expire_action","ActionController::Caching::Actions","classes/ActionController/Caching/Actions.html#method-i-expire_action","(options = {})",""],["expire_fragment","ActionController::Caching::Fragments","classes/ActionController/Caching/Fragments.html#method-i-expire_fragment","(key, options = nil)","<p>Removes fragments from the cache.\n<p><code>key</code> can take one of three forms:\n<p>String - This would normally take the …\n"],["expire_page","ActionController::Caching::Pages","classes/ActionController/Caching/Pages.html#method-i-expire_page","(options = {})","<p>Expires the page that was cached with the <code>options</code> as a key.\nExample:\n\n<pre><code>expire_page :controller =&gt; &quot;lists&quot;, ...\n</code></pre>\n"],["expire_page","ActionController::Caching::Pages::ClassMethods","classes/ActionController/Caching/Pages/ClassMethods.html#method-i-expire_page","(path)","<p>Expires the page that was cached with the <code>path</code> as a key.\nExample:\n\n<pre><code>expire_page &quot;/lists/show&quot;</code></pre>\n"],["expired?","ActiveSupport::Cache::Entry","classes/ActiveSupport/Cache/Entry.html#method-i-expired-3F","()","<p>Check if the entry is expired. The <code>expires_in</code> parameter can\noverride the value set when the entry was …\n"],["expires_at","ActiveSupport::Cache::Entry","classes/ActiveSupport/Cache/Entry.html#method-i-expires_at","()","<p>Seconds since the epoch when the entry will expire.\n"],["expires_at=","ActiveSupport::Cache::Entry","classes/ActiveSupport/Cache/Entry.html#method-i-expires_at-3D","(time)","<p>Set a new time when the entry will expire.\n"],["expires_in","ActionController::ConditionalGet","classes/ActionController/ConditionalGet.html#method-i-expires_in","(seconds, options = {})","<p>Sets a HTTP 1.1 Cache-Control header. Defaults to issuing a “private”\ninstruction, so that …\n"],["expires_now","ActionController::ConditionalGet","classes/ActionController/ConditionalGet.html#method-i-expires_now","()","<p>Sets a HTTP 1.1 Cache-Control header of “no-cache” so no caching should\noccur by the browser …\n"],["extended","ActiveModel::Callbacks","classes/ActiveModel/Callbacks.html#method-c-extended","(base)",""],["extended","ActiveSupport::Concern","classes/ActiveSupport/Concern.html#method-c-extended","(base)",""],["extended","ActiveSupport::Testing::Declarative","classes/ActiveSupport/Testing/Declarative.html#method-c-extended","(klass)",""],["extending","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-extending","(*modules, &block)",""],["externals","RailsEnvironment","classes/RailsEnvironment.html#method-i-externals","()",""],["externals=","RailsEnvironment","classes/RailsEnvironment.html#method-i-externals-3D","(items)",""],["extify","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-extify","(name)","<p>Add an extension to the given name based on the platform.\n"],["extra_tags_for_form","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-extra_tags_for_form","(html_options)",""],["extract!","Hash","classes/Hash.html#method-i-extract-21","(*keys)",""],["extract_annotations_from","SourceAnnotationExtractor","classes/SourceAnnotationExtractor.html#method-i-extract_annotations_from","(file, pattern)","<p>If <code>file</code> is the filename of a file that contains annotations\nthis method returns a hash with a single …\n"],["extract_callstack","ActiveSupport::Deprecation","classes/ActiveSupport/Deprecation.html#method-i-extract_callstack","(callstack)",""],["extract_callstack_for_multiparameter_attributes","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-extract_callstack_for_multiparameter_attributes","(pairs)",""],["extract_default","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-i-extract_default","(default)",""],["extract_handler_and_format","ActionView::PathResolver","classes/ActionView/PathResolver.html#method-i-extract_handler_and_format","(path, default_formats)","<p>Extract handler and formats from path. If a format cannot be a found\nneither from the path, or the handler, …\n"],["extract_limit","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-i-extract_limit","(sql_type)",""],["extract_limit","ActiveRecord::ConnectionAdapters::PostgreSQLColumn","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn.html#method-i-extract_limit","(sql_type)",""],["extract_options!","Array","classes/Array.html#method-i-extract_options-21","()","<p>Extracts options from a set of arguments. Removes and returns the last\nelement in the array if it&#39;s …\n"],["extract_pg_identifier_from_name","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-extract_pg_identifier_from_name","(name)",""],["extract_precision","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-i-extract_precision","(sql_type)",""],["extract_precision","ActiveRecord::ConnectionAdapters::PostgreSQLColumn","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn.html#method-i-extract_precision","(sql_type)","<p>Extracts the precision from PostgreSQL-specific data types.\n"],["extract_record","ActionDispatch::Routing::PolymorphicRoutes","classes/ActionDispatch/Routing/PolymorphicRoutes.html#method-i-extract_record","(record_or_hash_or_array)",""],["extract_scale","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-i-extract_scale","(sql_type)",""],["extract_scale","ActiveRecord::ConnectionAdapters::PostgreSQLColumn","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn.html#method-i-extract_scale","(sql_type)","<p>Extracts the scale from PostgreSQL-specific data types.\n"],["extract_selected_and_disabled","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-extract_selected_and_disabled","(selected)",""],["extract_session_id","ActionDispatch::Session::AbstractStore","classes/ActionDispatch/Session/AbstractStore.html#method-i-extract_session_id","(env)",""],["extract_session_id","ActionDispatch::Session::CookieStore","classes/ActionDispatch/Session/CookieStore.html#method-i-extract_session_id","(env)",""],["extract_value_from_default","ActiveRecord::ConnectionAdapters::PostgreSQLColumn","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn.html#method-c-extract_value_from_default","(default)","<p>Extracts the value from a PostgreSQL column default definition.\n"],["extract_values_from_collection","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-extract_values_from_collection","(collection, value_method, selected)",""],["extractable_options?","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-extractable_options-3F","()",""],["extractable_options?","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-extractable_options-3F","()",""],["extractable_options?","Hash","classes/Hash.html#method-i-extractable_options-3F","()","<p>By default, only instances of Hash itself are extractable. Subclasses of\nHash may implement this method …\n"],["fallback_string_to_date","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-i-fallback_string_to_date","(string)",""],["fallback_string_to_time","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-i-fallback_string_to_time","(string)",""],["fallbacks","Rails::Generators","classes/Rails/Generators.html#method-c-fallbacks","()","<p>Hold configured generators fallbacks. If a plugin developer wants a\ngenerator group to fallback to another …\n"],["falsetok","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-falsetok","(s)",""],["fast_string_to_date","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-i-fast_string_to_date","(string)",""],["fast_string_to_time","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-i-fast_string_to_time","(string)","<p>Doesn&#39;t handle time zones.\n"],["favicon_link_tag","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-favicon_link_tag","(source='/favicon.ico', options={})","<p>Web browsers cache favicons. If you just throw a <code>favicon.ico</code>\ninto the document root of your application …\n"],["fetch","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-fetch","(name, options = nil)","<p>Fetches data from the cache, using the given key. If there is data in the\ncache with the given key, then …\n"],["fetch","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-fetch","(key, *extras)","<p>Fetches the value for the specified key, same as doing hash\n"],["fetch","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-fetch","(key, *extras)","<p>Fetches the value for the specified key, same as doing hash\n"],["fetch","RecursiveHTTPFetcher","classes/RecursiveHTTPFetcher.html#method-i-fetch","(links = @urls_to_fetch)",""],["fetch_dir","RecursiveHTTPFetcher","classes/RecursiveHTTPFetcher.html#method-i-fetch_dir","(url)",""],["field_changed?","ActiveRecord::AttributeMethods::Dirty","classes/ActiveRecord/AttributeMethods/Dirty.html#method-i-field_changed-3F","(attr, old, value)",""],["field_set_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-field_set_tag","(legend = nil, options = nil, &block)","<p>Creates a field set for grouping HTML form elements.\n<p><code>legend</code> will become the fieldset&#39;s title (optional …\n"],["field_type","Rails::Generators::GeneratedAttribute","classes/Rails/Generators/GeneratedAttribute.html#method-i-field_type","()",""],["fields_for","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-fields_for","(record_or_name_or_array, *args, &block)",""],["fields_for","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-fields_for","(record_or_name_or_array, *args, &block)","<p>Creates a scope around a specific model object like form_for, but\ndoesn&#39;t create the form tags themselves. …\n"],["fields_for_nested_model","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-fields_for_nested_model","(name, object, options, block)",""],["fields_for_with_nested_attributes","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-fields_for_with_nested_attributes","(association_name, args, block)",""],["fifth","Array","classes/Array.html#method-i-fifth","()","<p>Equal to <code>self[4]</code>.\n"],["file_exist?","ActionDispatch::Static","classes/ActionDispatch/Static.html#method-i-file_exist-3F","(path)",""],["file_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-file_field","(object_name, method, options = {})","<p>Returns an file upload input tag tailored for accessing a specified\nattribute (identified by <code>method</code>) …\n"],["file_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-file_field_tag","(name, options = {})","<p>Creates a file upload field.  If you are using file uploads then you will\nalso need to set the multipart …\n"],["file_path","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-file_path","()",""],["file_path_key","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-i-file_path_key","(path)","<p>Translate a file path into a key.\n"],["filename","ActiveSupport::Multibyte::Unicode::UnicodeDatabase","classes/ActiveSupport/Multibyte/Unicode/UnicodeDatabase.html#method-c-filename","()","<p>Returns the filename for the data file for this version\n"],["filter","ActionDispatch::Http::ParameterFilter","classes/ActionDispatch/Http/ParameterFilter.html#method-i-filter","(params)",""],["filter","ActiveSupport::BacktraceCleaner","classes/ActiveSupport/BacktraceCleaner.html#method-i-filter","(backtrace)",""],["filter_by","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-filter_by","(constraint)",""],["filtered_env","ActionDispatch::Http::FilterParameters","classes/ActionDispatch/Http/FilterParameters.html#method-i-filtered_env","()","<p>Return a hash of request.env with all sensitive data replaced.\n"],["filtered_options","ActiveModel::Validations::NumericalityValidator","classes/ActiveModel/Validations/NumericalityValidator.html#method-i-filtered_options","(value)",""],["filtered_parameters","ActionDispatch::Http::FilterParameters","classes/ActionDispatch/Http/FilterParameters.html#method-i-filtered_parameters","()","<p>Return a hash of parameters with all sensitive data replaced.\n"],["filtered_path","ActionDispatch::Http::FilterParameters","classes/ActionDispatch/Http/FilterParameters.html#method-i-filtered_path","()","<p>Reconstructed a path with all sensitive GET parameters replaced.\n"],["filtered_query_string","ActionDispatch::Http::FilterParameters","classes/ActionDispatch/Http/FilterParameters.html#method-i-filtered_query_string","()",""],["find","ActionView::LookupContext::ViewPaths","classes/ActionView/LookupContext/ViewPaths.html#method-i-find","(name, prefix = nil, partial = false)",""],["find","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find","(*args)","<p>Find operates with four different retrieval approaches:\n<p>Find by id - This can either be a specific id …\n"],["find","Plugin","classes/Plugin.html#method-c-find","(name)",""],["find","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-c-find","(klass, params=nil)","<p>GET show GET edit PUT update DELETE destroy\n"],["find","RailsEnvironment","classes/RailsEnvironment.html#method-c-find","(dir=nil)",""],["find","SourceAnnotationExtractor","classes/SourceAnnotationExtractor.html#method-i-find","(dirs=%w(app lib test))","<p>Returns a hash that maps filenames under <code>dirs</code> (recursively) to\narrays with their annotations. Only files …\n"],["find_all","ActionView::LookupContext::ViewPaths","classes/ActionView/LookupContext/ViewPaths.html#method-i-find_all","(name, prefix = nil, partial = false)",""],["find_all","ActionView::Resolver","classes/ActionView/Resolver.html#method-i-find_all","(name, prefix=nil, partial=false, details={}, key=nil)","<p>Normalizes the arguments and passes it on to find_template.\n"],["find_all_tag","ActionDispatch::Assertions::TagAssertions","classes/ActionDispatch/Assertions/TagAssertions.html#method-i-find_all_tag","(conditions)",""],["find_associated_records","ActiveRecord::AssociationPreload::ClassMethods","classes/ActiveRecord/AssociationPreload/ClassMethods.html#method-i-find_associated_records","(ids, reflection, preload_options)",""],["find_by_attributes","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_by_attributes","(match, attributes, *args)",""],["find_by_session_id","ActiveRecord::SessionStore::Session","classes/ActiveRecord/SessionStore/Session.html#method-i-find_by_session_id","(session_id)","<p>Hook to set up sessid compatibility.\n"],["find_by_session_id","ActiveRecord::SessionStore::Session","classes/ActiveRecord/SessionStore/Session.html#method-c-find_by_session_id","(*args)",""],["find_by_session_id","ActiveRecord::SessionStore::SqlBypass","classes/ActiveRecord/SessionStore/SqlBypass.html#method-i-find_by_session_id","(session_id)","<p>Look up a session by id and unmarshal its data if found.\n"],["find_by_sql","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-find_by_sql","(sql)","<p>Executes a custom SQL query against your database and returns all the\nresults.  The results will be returned …\n"],["find_cmd","Rails::DBConsole","classes/Rails/DBConsole.html#method-i-find_cmd","(*commands)",""],["find_first","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_first","()",""],["find_in","SourceAnnotationExtractor","classes/SourceAnnotationExtractor.html#method-i-find_in","(dir)","<p>Returns a hash that maps filenames under <code>dir</code> (recursively) to\narrays with their annotations. Only files …\n"],["find_last","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_last","()",""],["find_layout","ActionView::Layouts","classes/ActionView/Layouts.html#method-i-find_layout","(layout)","<p>This is the method which actually finds the layout using details in the\nlookup context object. If no …\n"],["find_one","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_one","(id)",""],["find_or_instantiator_by_attributes","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_or_instantiator_by_attributes","(match, attributes, *args)",""],["find_parameter_position","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-find_parameter_position","(multiparameter_name)",""],["find_root_with_flag","Rails::Engine","classes/Rails/Engine.html#method-i-find_root_with_flag","(flag, default=nil)",""],["find_session","ActiveRecord::SessionStore","classes/ActiveRecord/SessionStore.html#method-i-find_session","(id)",""],["find_some","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_some","(ids)",""],["find_sti_class","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-find_sti_class","(type_name)",""],["find_tag","ActionDispatch::Assertions::TagAssertions","classes/ActionDispatch/Assertions/TagAssertions.html#method-i-find_tag","(conditions)",""],["find_target","ActiveRecord::Associations::HasOneThroughAssociation","classes/ActiveRecord/Associations/HasOneThroughAssociation.html#method-i-find_target","()",""],["find_template","ActionView::LookupContext::ViewPaths","classes/ActionView/LookupContext/ViewPaths.html#method-i-find_template","(name, prefix = nil, partial = false)",""],["find_template","ActionView::Partials::PartialRenderer","classes/ActionView/Partials/PartialRenderer.html#method-i-find_template","(path=@path)",""],["find_templates","ActionView::PathResolver","classes/ActionView/PathResolver.html#method-i-find_templates","(name, prefix, partial, details)",""],["find_templates","ActionView::Resolver","classes/ActionView/Resolver.html#method-i-find_templates","(name, prefix, partial, details)","<p>This is what child classes implement. No defaults are needed because\nResolver guarantees that the arguments …\n"],["find_tzinfo","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-c-find_tzinfo","(name)","<p>TODO: Preload instead of lazy load for thread safety\n"],["find_with_associations","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_with_associations","()",""],["find_with_ids","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_with_ids","(*ids)",""],["finder?","ActiveRecord::DynamicFinderMatch","classes/ActiveRecord/DynamicFinderMatch.html#method-i-finder-3F","()",""],["first","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-first","(*args)","<p>A convenience wrapper for <code>find(:first, *args)</code>. You can pass in\nall the same arguments to this method …\n"],["first","String","classes/String.html#method-i-first","(limit = 1)","<p>Returns the first character of the string or the first <code>limit</code>\ncharacters.\n<p>Examples:\n\n<pre><code>&quot;hello&quot;.first     # ...</code></pre>\n"],["fixture_file_upload","ActionDispatch::TestProcess","classes/ActionDispatch/TestProcess.html#method-i-fixture_file_upload","(path, mime_type = nil, binary = false)","<p>Shortcut for\n<code>ARack::Test::UploadedFile.new(ActionController::TestCase.fixture_path\n+ path, type)</code>:\n\n<pre><code>post ...</code></pre>\n"],["fixture_is_cached?","Fixtures","classes/Fixtures.html#method-c-fixture_is_cached-3F","(connection, table_name)",""],["flash","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-flash","()","<p>Access the contents of the flash. Use <code>flash[\"notice\"]</code> to read\na notice you put there or <code>flash[\"notice\"]</code> …\n"],["flash","ActionDispatch::TestProcess","classes/ActionDispatch/TestProcess.html#method-i-flash","()",""],["flash","ActionDispatch::TestResponse::DeprecatedHelpers","classes/ActionDispatch/TestResponse/DeprecatedHelpers.html#method-i-flash","()","<p>A shortcut to the flash. Returns an empty hash if no session flash exists.\n"],["flush","ActiveSupport::BufferedLogger","classes/ActiveSupport/BufferedLogger.html#method-i-flush","()",""],["flush","ActiveSupport::LogSubscriber::TestHelper::MockLogger","classes/ActiveSupport/LogSubscriber/TestHelper/MockLogger.html#method-i-flush","()",""],["flush_all!","ActiveSupport::LogSubscriber","classes/ActiveSupport/LogSubscriber.html#method-i-flush_all-21","()","<p>Flush all log_subscribers&#39; logger.\n"],["flush_cache","ActiveSupport::Memoizable::InstanceMethods","classes/ActiveSupport/Memoizable/InstanceMethods.html#method-i-flush_cache","(*syms)",""],["flushable_loggers","ActiveSupport::LogSubscriber","classes/ActiveSupport/LogSubscriber.html#method-i-flushable_loggers","()",""],["follow_redirect!","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-follow_redirect-21","()","<p>Follow a single redirect response. If the last response was not a redirect,\nan exception will be raised. …\n"],["for_class","HTML::Selector","classes/HTML/Selector.html#method-i-for_class","(cls)","<p>Creates a new selector for the given class name.\n"],["for_id","HTML::Selector","classes/HTML/Selector.html#method-i-for_id","(id)","<p>Creates a new selector for the given id.\n"],["for_tag","ActiveSupport::TestCase","classes/ActiveSupport/TestCase.html#method-c-for_tag","(tag)",""],["foreign_key","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-foreign_key","(class_name, separate_class_name_and_id_with_underscore = true)","<p>Creates a foreign key name from a class name.\n<code>separate_class_name_and_id_with_underscore</code> sets whether …\n"],["foreign_key","String","classes/String.html#method-i-foreign_key","(separate_class_name_and_id_with_underscore = true)","<p>Creates a foreign key name from a class name.\n<code>separate_class_name_and_id_with_underscore</code> sets whether …\n"],["forgery_whitelisted?","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-forgery_whitelisted-3F","()",""],["forking_env?","ActiveSupport::Testing::Isolation","classes/ActiveSupport/Testing/Isolation.html#method-c-forking_env-3F","()",""],["form_authenticity_param","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-form_authenticity_param","()","<p>The form&#39;s authenticity parameter. Override to provide your own.\n"],["form_authenticity_token","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-form_authenticity_token","()","<p>Sets the token value for the current session.\n"],["form_data?","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-form_data-3F","()",""],["form_for","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-form_for","(record_or_name_or_array, *args, &proc)","<p>Creates a form and a scope around a specific model object that is used as a\nbase for questioning about …\n"],["form_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-form_tag","(url_for_options = {}, options = {}, &block)","<p>Starts a form tag that points the action to an url configured with\n<code>url_for_options</code> just like ActionController::Base#url_for …\n"],["form_tag_html","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-form_tag_html","(html_options)",""],["form_tag_in_block","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-form_tag_in_block","(html_options, &block)",""],["format","ActionDispatch::Http::MimeNegotiation","classes/ActionDispatch/Http/MimeNegotiation.html#method-i-format","(view_path = [])","<p>Returns the MIME type for the format used in the request.\n\n<pre><code>GET /posts/5.xml   | request.format =&gt; Mime::XML ...\n</code></pre>\n"],["format","ActiveSupport::Testing::Performance::Metrics::GcRuns","classes/ActiveSupport/Testing/Performance/Metrics/GcRuns.html#method-i-format","(measurement)",""],["format","ActiveSupport::Testing::Performance::Metrics::GcTime","classes/ActiveSupport/Testing/Performance/Metrics/GcTime.html#method-i-format","(measurement)",""],["format","ActiveSupport::Testing::Performance::Metrics::Memory","classes/ActiveSupport/Testing/Performance/Metrics/Memory.html#method-i-format","(measurement)",""],["format","ActiveSupport::Testing::Performance::Metrics::Objects","classes/ActiveSupport/Testing/Performance/Metrics/Objects.html#method-i-format","(measurement)",""],["format","ActiveSupport::Testing::Performance::Metrics::Time","classes/ActiveSupport/Testing/Performance/Metrics/Time.html#method-i-format","(measurement)",""],["format","Erb::Generators::MailerGenerator","classes/Erb/Generators/MailerGenerator.html#method-i-format","()",""],["format=","ActionDispatch::Http::MimeNegotiation","classes/ActionDispatch/Http/MimeNegotiation.html#method-i-format-3D","(extension)","<p>Sets the format by string extension, which can be used to force custom\nformats that are not controlled …\n"],["formats","ActionDispatch::Http::MimeNegotiation","classes/ActionDispatch/Http/MimeNegotiation.html#method-i-formats","()",""],["formats=","ActionView::LookupContext::Details","classes/ActionView/LookupContext/Details.html#method-i-formats-3D","(values)","<p>Overload formats= to reject [“<strong>/</strong>”] values.\n"],["formatted_offset","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-formatted_offset","(colon = true, alternate_utc_string = nil)",""],["formatted_offset","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-formatted_offset","(colon=true, alternate_utc_string = nil)","<p>Returns the offset of this time zone as a formatted string, of the format\n“+HH:MM”.\n"],["formatted_offset","DateTime","classes/DateTime.html#method-i-formatted_offset","(colon = true, alternate_utc_string = nil)","<p>Returns the <code>utc_offset</code> as an +HH:MM formatted string.\nExamples:\n\n<pre><code>datetime = DateTime.civil(2000, 1, 1, ...</code></pre>\n"],["formatted_offset","Time","classes/Time.html#method-i-formatted_offset","(colon = true, alternate_utc_string = nil)","<p>Returns the UTC offset as an +HH:MM formatted string.\n\n<pre><code>Time.local(2000).formatted_offset         # =&gt; &quot;-06:00&quot; ...\n</code></pre>\n"],["fortnight","Numeric","classes/Numeric.html#method-i-fortnight","()",""],["fortnights","Numeric","classes/Numeric.html#method-i-fortnights","()",""],["forty_two","Array","classes/Array.html#method-i-forty_two","()","<p>Equal to <code>self[41]</code>. Also known as accessing “the reddit”.\n"],["fourth","Array","classes/Array.html#method-i-fourth","()","<p>Equal to <code>self[3]</code>.\n"],["fragment_cache_key","ActionController::Caching::Fragments","classes/ActionController/Caching/Fragments.html#method-i-fragment_cache_key","(key)","<p>Given a key (as described in <code>expire_fragment</code>), returns a key\nsuitable for use in reading, writing, or …\n"],["fragment_exist?","ActionController::Caching::Fragments","classes/ActionController/Caching/Fragments.html#method-i-fragment_exist-3F","(key, options = nil)","<p>Check if a cached fragment from the location signified by <code>key</code>\nexists (see <code>expire_fragment</code> for acceptable …\n"],["framework_trace","ActionDispatch::ShowExceptions","classes/ActionDispatch/ShowExceptions.html#method-i-framework_trace","(exception)",""],["framework_version","Rails::Info","classes/Rails/Info.html#method-i-framework_version","(framework)",""],["frameworks","Rails::Configuration::Deprecated","classes/Rails/Configuration/Deprecated.html#method-i-frameworks","(*args)",""],["frameworks","Rails::Info","classes/Rails/Info.html#method-i-frameworks","()",""],["frameworks=","Rails::Configuration::Deprecated","classes/Rails/Configuration/Deprecated.html#method-i-frameworks-3D","(*args)",""],["freeze","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-freeze","()","<p>Freeze the attributes hash such that associations are still accessible,\neven on destroyed records.\n"],["freeze","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-freeze","()",""],["freeze!","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-freeze-21","(args={})","<p>Add Rails to /vendor/rails\n<p>Example\n\n<pre><code>freeze!</code></pre>\n"],["freeze_with_memoizable","ActiveSupport::Memoizable::InstanceMethods","classes/ActiveSupport/Memoizable/InstanceMethods.html#method-i-freeze_with_memoizable","()",""],["fresh?","ActionDispatch::Http::Cache::Request","classes/ActionDispatch/Http/Cache/Request.html#method-i-fresh-3F","(response)","<p>Check response freshness (Last-Modified and ETag) against request\nIf-Modified-Since and If-None-Match …\n"],["fresh_when","ActionController::ConditionalGet","classes/ActionController/ConditionalGet.html#method-i-fresh_when","(options)","<p>Sets the etag, last_modified, or both on the response and renders a “304\nNot Modified” response …\n"],["from","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-from","(value)",""],["from","Array","classes/Array.html#method-i-from","(position)","<p>Returns the tail of the array from <code>position</code>.\n\n<pre><code>%w( a b c d ).from(0)  # =&gt; %w( a b c d )\n%w( a b c d ).from(2) ...\n</code></pre>\n"],["from","String","classes/String.html#method-i-from","(position)","<p>Returns the remaining of the string from the <code>position</code> treating\nthe string as an array (where 0 is the …\n"],["from_json","ActiveModel::Serializers::JSON","classes/ActiveModel/Serializers/JSON.html#method-i-from_json","(json)",""],["from_now","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-from_now","(time = ::Time.current)",""],["from_now","Numeric","classes/Numeric.html#method-i-from_now","(time = ::Time.current)","<p>Reads best without arguments:  10.minutes.from_now\n"],["from_rails_root","ActionView::LogSubscriber","classes/ActionView/LogSubscriber.html#method-i-from_rails_root","(string)",""],["from_response","ActionDispatch::TestResponse","classes/ActionDispatch/TestResponse.html#method-c-from_response","(response)",""],["from_trusted_xml","Hash","classes/Hash.html#method-i-from_trusted_xml","(xml)",""],["from_xml","ActiveModel::Serializers::Xml","classes/ActiveModel/Serializers/Xml.html#method-i-from_xml","(xml)",""],["from_xml","Hash","classes/Hash.html#method-i-from_xml","(xml, disallowed_types = nil)",""],["frozen?","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-frozen-3F","()","<p>Returns <code>true</code> if the attributes hash has been frozen.\n"],["full_messages","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-full_messages","()","<p>Returns all the full error messages in an array.\n\n<pre><code>class Company\n  validates_presence_of :name, :address, ...\n</code></pre>\n"],["full_test_name","ActiveSupport::Testing::Performance","classes/ActiveSupport/Testing/Performance.html#method-i-full_test_name","()",""],["full_trace","ActionDispatch::ShowExceptions","classes/ActionDispatch/ShowExceptions.html#method-i-full_trace","(exception)",""],["fullpath","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-fullpath","()",""],["future?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-future-3F","()",""],["future?","Date","classes/Date.html#method-i-future-3F","()","<p>Returns true if the Date object&#39;s date lies in the future.\n"],["future?","DateTime","classes/DateTime.html#method-i-future-3F","()","<p>Tells whether the DateTime object&#39;s datetime lies in the future\n"],["future?","Time","classes/Time.html#method-i-future-3F","()","<p>Tells whether the Time object&#39;s time lies in the future\n"],["g_length","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-g_length","()","<p>Returns the number of grapheme clusters in the string.\n<p>Example:\n\n<pre><code>&#39;क्षि&#39;.mb_chars.length   # =&gt; 4\n&#39;क्षि&#39;.mb_chars.g_length ...\n</code></pre>\n"],["g_pack","ActiveSupport::Multibyte::Unicode","classes/ActiveSupport/Multibyte/Unicode.html#method-i-g_pack","(unpacked)","<p>Reverse operation of g_unpack.\n<p>Example:\n\n<pre><code>Unicode.g_pack(Unicode.g_unpack(&#39;क्षि&#39;)) # =&gt; &#39;क्षि&#39;\n</code></pre>\n"],["g_unpack","ActiveSupport::Multibyte::Unicode","classes/ActiveSupport/Multibyte/Unicode.html#method-i-g_unpack","(string)","<p>Unpack the string at grapheme boundaries. Returns a list of character\nlists.\n<p>Example:\n\n<pre><code>Unicode.g_unpack(&#39;क्षि&#39;) ...</code></pre>\n"],["gem","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-i-gem","(name, options = {})","<p>Rails 3, by default, uses bundler, which shims the Kernel#gem method so\nthat it should behave correctly …\n"],["gem","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-gem","(*args)","<p>Adds an entry into Gemfile for the supplied gem. If env is specified, add\nthe gem to the given environment. …\n"],["generate","ActiveSupport::MessageVerifier","classes/ActiveSupport/MessageVerifier.html#method-i-generate","(value)",""],["generate","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-generate","(what, *args)","<p>Generate something using a generator from Rails or a plugin. The second\nparameter is the argument string …\n"],["generate_digest","ActiveSupport::MessageVerifier","classes/ActiveSupport/MessageVerifier.html#method-i-generate_digest","(data)",""],["generate_message","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-generate_message","(attribute, type = :invalid, options = {})","<p>Translates an error message in its default scope\n(<code>activemodel.errors.messages</code>).\n<p>Error messages are first …\n"],["generate_method_for_mime","AbstractController::Collector","classes/AbstractController/Collector.html#method-c-generate_method_for_mime","(mime)",""],["generate_sid","ActionDispatch::Session::AbstractStore","classes/ActionDispatch/Session/AbstractStore.html#method-i-generate_sid","()",""],["generator","Rails::Generators::TestCase","classes/Rails/Generators/TestCase.html#method-i-generator","(args=self.default_arguments, options={}, config={})","<p>Instantiate the generator.\n"],["generator_dir","Rails::Generators::GeneratorGenerator","classes/Rails/Generators/GeneratorGenerator.html#method-i-generator_dir","()",""],["generator_name","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-generator_name","()","<p>Removes the namespaces and get the generator name. For example,\nRails::Generators::ModelGenerator will …\n"],["generators","Rails::Railtie","classes/Rails/Railtie.html#method-i-generators","(&blk)",""],["generators","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-generators","()",""],["get","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-get","(action, parameters = nil, session = nil, flash = nil)","<p>Executes a request simulating GET HTTP method and set/volley the response\n"],["get","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-get","(path, parameters = nil, headers = nil)","<p>Performs a GET request with the given parameters.\n<p><code>path</code>: The URI (as a String) on which you want to perform …\n"],["get","ActionDispatch::Routing::Mapper::HttpHelpers","classes/ActionDispatch/Routing/Mapper/HttpHelpers.html#method-i-get","(*args, &block)","<p>Define a route that only recognizes HTTP GET. For supported arguments, see\n<code>match</code>.\n<p>Example:\n<p>get &#39;bacon&#39;, …\n"],["get","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-get","(attribute)",""],["get","ActiveSupport::Dependencies::Reference","classes/ActiveSupport/Dependencies/Reference.html#method-i-get","()",""],["get?","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-get-3F","()","<p>Is this a GET (or HEAD) request? Equivalent to <code>request.request_method\n== :get</code>.\n"],["get_cycle","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-get_cycle","(name)","<p>The cycle helpers need to store the cycles in a place that is guaranteed to\nbe reset every time a page …\n"],["get_period_and_ensure_valid_local_time","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-get_period_and_ensure_valid_local_time","()",""],["get_session","ActionDispatch::Session::AbstractStore","classes/ActionDispatch/Session/AbstractStore.html#method-i-get_session","(env, sid)",""],["get_session","ActionDispatch::Session::MemCacheStore","classes/ActionDispatch/Session/MemCacheStore.html#method-i-get_session","(env, sid)",""],["get_session","ActiveRecord::SessionStore","classes/ActiveRecord/SessionStore.html#method-i-get_session","(env, sid)",""],["get_session_model","ActiveRecord::SessionStore","classes/ActiveRecord/SessionStore.html#method-i-get_session_model","(env, sid)",""],["get_via_redirect","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-get_via_redirect","(path, parameters = nil, headers = nil)","<p>Performs a GET request, following any subsequent redirect. See\n<code>request_via_redirect</code> for more information. …\n"],["get_zone","Time","classes/Time.html#method-i-get_zone","(time_zone)",""],["getgm","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-getgm","()",""],["getlocal","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-getlocal","()",""],["getutc","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-getutc","()",""],["getutc","DateTime","classes/DateTime.html#method-i-getutc","()",""],["gigabyte","Numeric","classes/Numeric.html#method-i-gigabyte","()",""],["gigabytes","Numeric","classes/Numeric.html#method-i-gigabytes","()",""],["git","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-git","(command={})","<p>Run a command in git.\n<p>Examples\n\n<pre><code>git :init\ngit :add =&gt; &quot;this.file that.rb&quot;\ngit :add =&gt; &quot;onefile.rb&quot;, :rm ...\n</code></pre>\n"],["git_url?","Plugin","classes/Plugin.html#method-i-git_url-3F","()",""],["gmt?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-gmt-3F","()",""],["gmt_offset","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-gmt_offset","()",""],["gmtime","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-gmtime","()",""],["gmtoff","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-gmtoff","()",""],["group","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-group","(*args)",""],["group_by","Enumerable","classes/Enumerable.html#method-i-group_by","()","<p>Collect an enumerable into sets, grouped by the result of a block. Useful,\nfor example, for grouping …\n"],["grouped_collection_select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-grouped_collection_select","(method, collection, group_method, group_label_method, option_key_method, option_value_method, options = {}, html_options = {})",""],["grouped_collection_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-grouped_collection_select","(object, method, collection, group_method, group_label_method, option_key_method, option_value_method, options = {}, html_options = {})","<p>Returns <code>&lt;select&gt;</code>, <code>&lt;optgroup&gt;</code> and\n<code>&lt;option&gt;</code> tags for the collection of existing return …\n"],["grouped_options_for_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-grouped_options_for_select","(grouped_options, selected_key = nil, prompt = nil)","<p>Returns a string of <code>&lt;option&gt;</code> tags, like\n<code>options_for_select</code>, but wraps them with\n<code>&lt;optgroup&gt;</code> …\n"],["guard_private_attribute_method!","ActiveModel::AttributeMethods","classes/ActiveModel/AttributeMethods.html#method-i-guard_private_attribute_method-21","(method_name, args)","<p>prevent method_missing from calling private methods with #send\n"],["guess_name","Plugin","classes/Plugin.html#method-i-guess_name","(url)",""],["h","ERB::Util","classes/ERB/Util.html#method-i-h","(s)",""],["h","ERB::Util","classes/ERB/Util.html#method-c-h","(s)",""],["handle_conditional_get!","ActionDispatch::Http::Cache::Response","classes/ActionDispatch/Http/Cache/Response.html#method-i-handle_conditional_get-21","()",""],["handle_unverified_request","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-handle_unverified_request","()",""],["handler_for_rescue","ActiveSupport::Rescuable","classes/ActiveSupport/Rescuable.html#method-i-handler_for_rescue","(exception)",""],["handles_encoding?","ActionView::Template::Handlers::ERB","classes/ActionView/Template/Handlers/ERB.html#method-c-handles_encoding-3F","()",""],["has_and_belongs_to_many","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-has_and_belongs_to_many","(association_id, options = {}, &extension)","<p>Specifies a many-to-many relationship with another class. This associates\ntwo classes via an intermediate …\n"],["has_attribute?","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-has_attribute-3F","(attr_name)","<p>Returns true if the given attribute is in the attributes hash\n"],["has_default?","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-i-has_default-3F","()",""],["has_empty_resource_definition?","ActionController::Responder","classes/ActionController/Responder.html#method-i-has_empty_resource_definition-3F","()","<p>Check whether resource needs a specific definition of empty resource to be\nvalid\n"],["has_errors?","ActionController::Responder","classes/ActionController/Responder.html#method-i-has_errors-3F","()","<p>Check whether the resource has errors.\n"],["has_flash?","ActionDispatch::TestResponse::DeprecatedHelpers","classes/ActionDispatch/TestResponse/DeprecatedHelpers.html#method-i-has_flash-3F","()","<p>Do we have a flash?\n"],["has_flash_object?","ActionDispatch::TestResponse::DeprecatedHelpers","classes/ActionDispatch/TestResponse/DeprecatedHelpers.html#method-i-has_flash_object-3F","(name=nil)","<p>Does the specified flash object exist?\n"],["has_flash_with_contents?","ActionDispatch::TestResponse::DeprecatedHelpers","classes/ActionDispatch/TestResponse/DeprecatedHelpers.html#method-i-has_flash_with_contents-3F","()","<p>Do we have a flash that has contents?\n"],["has_key?","ActionDispatch::Session::AbstractStore::SessionHash","classes/ActionDispatch/Session/AbstractStore/SessionHash.html#method-i-has_key-3F","(key)",""],["has_key?","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-has_key-3F","(key)",""],["has_key?","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-has_key-3F","(key)",""],["has_many","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-has_many","(association_id, options = {}, &extension)","<p>Specifies a one-to-many association. The following methods for retrieval\nand query of collections of …\n"],["has_one","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-has_one","(association_id, options = {})","<p>Specifies a one-to-one association with another class. This method should\nonly be used if the other class …\n"],["has_primary_key_column?","Fixtures","classes/Fixtures.html#method-i-has_primary_key_column-3F","()",""],["has_session_id?","ActionDispatch::Session::AbstractStore::OptionsHash","classes/ActionDispatch/Session/AbstractStore/OptionsHash.html#method-i-has_session_id-3F","()",""],["has_session_object?","ActionDispatch::TestResponse::DeprecatedHelpers","classes/ActionDispatch/TestResponse/DeprecatedHelpers.html#method-i-has_session_object-3F","(name=nil)","<p>Does the specified object exist in the session?\n"],["has_template_object?","ActionDispatch::TestResponse::DeprecatedHelpers","classes/ActionDispatch/TestResponse/DeprecatedHelpers.html#method-i-has_template_object-3F","(name=nil)","<p>Does the specified template object exist?\n"],["hash","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-hash","()","<p>Delegates to id in order to allow two records of the same type and id to\nwork with something like:\n\n<pre><code>[ Person.find(1), ...</code></pre>\n"],["hash","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-hash","()",""],["having","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-having","(*args)",""],["head","ActionController::Head","classes/ActionController/Head.html#method-i-head","(status, options = {})","<p>Return a response that has no content (merely headers). The options\nargument is interpreted to be a hash …\n"],["head","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-head","(action, parameters = nil, session = nil, flash = nil)","<p>Executes a request simulating HEAD HTTP method and set/volley the response\n"],["head","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-head","(path, parameters = nil, headers = nil)","<p>Performs a HEAD request with the given parameters. See get() for more\ndetails.\n"],["head?","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-head-3F","()","<p>Is this a HEAD request? Equivalent to <code>request.method == :head</code>.\n"],["headers","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-headers","()","<p>Provides access to the request&#39;s HTTP headers, for example:\n\n<pre><code>request.headers[&quot;Content-Type&quot;] # =&gt; &quot;text/plain&quot;\n</code></pre>\n"],["headers","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-headers","(args=nil)","<p>Allows you to pass random and unusual headers to the new +Mail::Message+\nobject which will add them to …\n"],["headers","ActionMailer::Base::DeprecatedHeaderProxy","classes/ActionMailer/Base/DeprecatedHeaderProxy.html#method-i-headers","(hash = {})",""],["headers=","ActionController::Testing","classes/ActionController/Testing.html#method-i-headers-3D","(new_headers)","<p>TODO : Rewrite tests using controller.headers= to use Rack env\n"],["help","Rails::Generators","classes/Rails/Generators.html#method-c-help","(command = 'generate')","<p>Show help message with available generators.\n"],["helper","AbstractController::Helpers::ClassMethods","classes/AbstractController/Helpers/ClassMethods.html#method-i-helper","(*args, &block)","<p>The <code>helper</code> class method can take a series of helper module\nnames, a block, or both.\n<p>Parameters\n<p><code>*args</code> - …\n"],["helper","Object","classes/Object.html#method-i-helper","()",""],["helper_attr","ActionController::Helpers::ClassMethods","classes/ActionController/Helpers/ClassMethods.html#method-i-helper_attr","(*attrs)","<p>Declares helper accessors for controller attributes. For example, the\nfollowing adds new <code>name</code> and <code>name=</code> …\n"],["helper_class","ActionView::TestCase::Behavior::ClassMethods","classes/ActionView/TestCase/Behavior/ClassMethods.html#method-i-helper_class","()",""],["helper_method","AbstractController::Helpers::ClassMethods","classes/AbstractController/Helpers/ClassMethods.html#method-i-helper_method","(*meths)","<p>Declare a controller method as a helper. For example, the following makes\nthe <code>current_user</code> controller …\n"],["helper_method","ActionView::TestCase::Behavior::ClassMethods","classes/ActionView/TestCase/Behavior/ClassMethods.html#method-i-helper_method","(*methods)",""],["helpers","ActionController::Helpers::ClassMethods","classes/ActionController/Helpers/ClassMethods.html#method-i-helpers","()","<p>Provides a proxy to access helpers methods from outside the view.\n"],["helpers_dir","ActionController::Helpers::ClassMethods","classes/ActionController/Helpers/ClassMethods.html#method-i-helpers_dir","()",""],["helpers_dir=","ActionController::Helpers::ClassMethods","classes/ActionController/Helpers/ClassMethods.html#method-i-helpers_dir-3D","(value)",""],["hex","ActiveSupport::SecureRandom","classes/ActiveSupport/SecureRandom.html#method-c-hex","(n=nil)","<p>SecureRandom.hex generates a random hex string.\n<p>The argument n specifies the length of the random length. …\n"],["hexdec4","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-hexdec4","(s)",""],["hidden_actions","AbstractController::Base","classes/AbstractController/Base.html#method-i-hidden_actions","()","<p>The list of hidden actions to an empty array. Defaults to an empty array.\nThis can be modified by other …\n"],["hidden_field","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-hidden_field","(method, options = {})",""],["hidden_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-hidden_field","(object_name, method, options = {})","<p>Returns a hidden input tag tailored for accessing a specified attribute\n(identified by <code>method</code>) on an …\n"],["hidden_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-hidden_field_tag","(name, value = nil, options = {})","<p>Creates a hidden form input field used to transmit data that would be lost\ndue to HTTP&#39;s statelessness …\n"],["hidden_namespaces","Rails::Generators","classes/Rails/Generators.html#method-c-hidden_namespaces","()",""],["hide","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-hide","(*ids)","<p>Hides the visible DOM elements with the given <code>ids</code>.\n<p>Example:\n\n<pre><code># Hide a few people\n# Generates: [&quot;person_29&quot;, ...</code></pre>\n"],["hide_action","ActionController::HideActions::ClassMethods","classes/ActionController/HideActions/ClassMethods.html#method-i-hide_action","(*args)","<p>Sets all of the actions passed in as hidden actions.\n<p>Parameters\n<p>*args&lt;#to_s&gt; &mdash; A list of actions\n"],["hide_namespaces","Rails::Generators","classes/Rails/Generators.html#method-i-hide_namespaces","(*namespaces)",""],["highlight","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-highlight","(text, phrases, *args)","<p>Highlights one or more <code>phrases</code> everywhere in <code>text</code>\nby inserting it into a <code>:highlighter</code> string. The highlighter …\n"],["hook_for","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-hook_for","(*names, &block)","<p>Invoke a generator based on the value supplied by the user to the given\noption named “name”. …\n"],["host","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-host","()","<p>Returns the host for this request, such as example.com.\n"],["host","ActionDispatch::Integration::Session","classes/ActionDispatch/Integration/Session.html#method-i-host","()","<p>The hostname used in the last request.\n"],["host!","ActionDispatch::Integration::Session","classes/ActionDispatch/Integration/Session.html#method-i-host-21","(name)","<p>Set the host name to use in the next request.\n\n<pre><code>session.host! &quot;www.example.com&quot;</code></pre>\n"],["host=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-host-3D","(host)",""],["host_with_port","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-host_with_port","()","<p>Returns a host:port string for this request, such as “example.com” or\n“example.com:8080”. …\n"],["hour","Numeric","classes/Numeric.html#method-i-hour","()",""],["hours","Numeric","classes/Numeric.html#method-i-hours","()",""],["html?","Mime::Type","classes/Mime/Type.html#method-i-html-3F","()",""],["html_document","ActionDispatch::Assertions::TagAssertions","classes/ActionDispatch/Assertions/TagAssertions.html#method-i-html_document","()",""],["html_escape","ERB::Util","classes/ERB/Util.html#method-i-html_escape","(s)","<p>A utility method for escaping HTML tag characters. This method is also\naliased as <code>h</code>.\n<p>In your ERB templates, …\n"],["html_escape","ERB::Util","classes/ERB/Util.html#method-c-html_escape","(s)","<p>A utility method for escaping HTML tag characters. This method is also\naliased as <code>h</code>.\n<p>In your ERB templates, …\n"],["html_options_for_form","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-html_options_for_form","(url_for_options, options)",""],["html_safe?","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-html_safe-3F","()",""],["html_safe?","Fixnum","classes/Fixnum.html#method-i-html_safe-3F","()",""],["html_safe?","Object","classes/Object.html#method-i-html_safe-3F","()",""],["html_safe_translation_key?","ActionView::Helpers::TranslationHelper","classes/ActionView/Helpers/TranslationHelper.html#method-i-html_safe_translation_key-3F","(key)",""],["httpdate","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-httpdate","()",""],["https!","ActionDispatch::Integration::Session","classes/ActionDispatch/Integration/Session.html#method-i-https-21","(flag = true)","<p>Specify whether or not the session should mimic a secure HTTPS request.\n\n<pre><code>session.https!\nsession.https!(false)</code></pre>\n"],["https?","ActionDispatch::Integration::Session","classes/ActionDispatch/Integration/Session.html#method-i-https-3F","()","<p>Return <code>true</code> if the session is mimicking a secure HTTPS\nrequest.\n\n<pre><code>if session.https?\n  ...\nend</code></pre>\n"],["human","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-human","(options={})","<p>Transform the model name into a more humane format, using I18n. By default,\nit will underscore then humanize …\n"],["human","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-i-human","(rule, replacement)","<p>Specifies a humanized form of a string by a regular expression rule or by a\nstring mapping. When using …\n"],["human_attribute_name","ActiveModel::Translation","classes/ActiveModel/Translation.html#method-i-human_attribute_name","(attribute, options = {})","<p>Transforms attribute names into a more human format, such as “First name”\ninstead of “first_name”. …\n"],["human_name","ActiveModel::Translation","classes/ActiveModel/Translation.html#method-i-human_name","(*args)","<p>Model.human_name is deprecated. Use Model.model_name.human instead.\n"],["human_name","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-i-human_name","()","<p>Returns the human name of the column name.\n<p>Examples\n\n<pre><code>Column.new(&#39;sales_stage&#39;, ...).human_name # =&gt; &#39;Sales ...\n</code></pre>\n"],["human_name","Rails::Generators::GeneratedAttribute","classes/Rails/Generators/GeneratedAttribute.html#method-i-human_name","()",""],["human_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-human_name","()",""],["humanize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-humanize","(lower_case_and_underscored_word)","<p>Capitalizes the first word and turns underscores into spaces and strips a\ntrailing “_id”, if …\n"],["humanize","String","classes/String.html#method-i-humanize","()","<p>Capitalizes the first word, turns underscores into spaces, and strips\n&#39;_id&#39;. Like <code>titleize</code>, this …\n"],["i18n_scope","ActiveModel::Translation","classes/ActiveModel/Translation.html#method-i-i18n_scope","()","<p>Returns the i18n_scope for the class. Overwrite if you want custom lookup.\n"],["i18n_scope","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-i18n_scope","()",""],["id","NilClass","classes/NilClass.html#method-i-id","()","<p>Raises a RuntimeError when you attempt to call <code>id</code> on\n<code>nil</code>.\n"],["id_constraint","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-id_constraint","()",""],["id_constraint?","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-id_constraint-3F","()",""],["identifier_method_name","ActionView::Template","classes/ActionView/Template.html#method-i-identifier_method_name","()",""],["identify","Fixtures","classes/Fixtures.html#method-c-identify","(label)","<p>Returns a consistent, platform-independent identifier for\n<code>label</code>. Identifiers are positive integers less …\n"],["ids_in_list_limit","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-ids_in_list_limit","()","<p>Does this adapter restrict the number of ids you can use in a list. Oracle\nhas a limit of 1000.\n"],["if_modified_since","ActionDispatch::Http::Cache::Request","classes/ActionDispatch/Http/Cache/Request.html#method-i-if_modified_since","()",""],["if_modified_since=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-if_modified_since-3D","(last_modified)",""],["if_none_match","ActionDispatch::Http::Cache::Request","classes/ActionDispatch/Http/Cache/Request.html#method-i-if_none_match","()",""],["if_none_match=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-if_none_match-3D","(etag)",""],["image_path","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-image_path","(source)","<p>Computes the path to an image asset in the public images directory. Full\npaths from the document root …\n"],["image_submit_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-image_submit_tag","(source, options = {})","<p>Displays an image which when clicked will submit the form.\n<p><code>source</code> is passed to AssetTagHelper#path_to_image …\n"],["image_tag","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-image_tag","(source, options = {})","<p>Returns an html image tag for the <code>source</code>. The\n<code>source</code> can be a full path or a file that exists in your …\n"],["in","Date","classes/Date.html#method-i-in","(seconds)",""],["in","DateTime","classes/DateTime.html#method-i-in","(seconds)",""],["in","Time","classes/Time.html#method-i-in","(seconds)",""],["in_char_class?","ActiveSupport::Multibyte::Unicode","classes/ActiveSupport/Multibyte/Unicode.html#method-i-in_char_class-3F","(codepoint, classes)","<p>Detect whether the codepoint is in a certain character class. Returns\n<code>true</code> when it&#39;s in the specified …\n"],["in_clause_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-in_clause_length","()","<p>the maximum number of elements in an IN (x,y,z) clause\n"],["in_groups","Array","classes/Array.html#method-i-in_groups","(number, fill_with = nil)","<p>Splits or iterates over the array in <code>number</code> of groups, padding\nany remaining slots with <code>fill_with</code> unless …\n"],["in_groups_of","Array","classes/Array.html#method-i-in_groups_of","(number, fill_with = nil)","<p>Splits or iterates over the array in groups of size <code>number</code>,\npadding any remaining slots with <code>fill_with</code> …\n"],["in_memory_controller_namespaces","ActionDispatch::Routing::RouteSet","classes/ActionDispatch/Routing/RouteSet.html#method-i-in_memory_controller_namespaces","()",""],["in_or_equals_for_ids","ActiveRecord::AssociationPreload::ClassMethods","classes/ActiveRecord/AssociationPreload/ClassMethods.html#method-i-in_or_equals_for_ids","(ids)",""],["in_rails_application?","Rails::ScriptRailsLoader","classes/Rails/ScriptRailsLoader.html#method-c-in_rails_application-3F","()",""],["in_rails_application_subdirectory?","Rails::ScriptRailsLoader","classes/Rails/ScriptRailsLoader.html#method-c-in_rails_application_subdirectory-3F","(path = Pathname.new(Dir.pwd))",""],["in_time_zone","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-in_time_zone","(new_zone = ::Time.zone)","<p>Returns the simultaneous time in <code>Time.zone</code>, or the specified\nzone.\n"],["in_time_zone","DateTime","classes/DateTime.html#method-i-in_time_zone","(zone = ::Time.zone)","<p>Returns the simultaneous time in <code>Time.zone</code>.\n\n<pre><code>Time.zone = &#39;Hawaii&#39;             # =&gt; &#39;Hawaii&#39;\nDateTime.new(2000).in_time_zone ...\n</code></pre>\n"],["in_time_zone","Time","classes/Time.html#method-i-in_time_zone","(zone = ::Time.zone)","<p>Returns the simultaneous time in <code>Time.zone</code>.\n\n<pre><code>Time.zone = &#39;Hawaii&#39;         # =&gt; &#39;Hawaii&#39;\nTime.utc(2000).in_time_zone ...\n</code></pre>\n"],["include?","ActiveModel::MassAssignmentSecurity::PermissionSet","classes/ActiveModel/MassAssignmentSecurity/PermissionSet.html#method-i-include-3F","(key)",""],["include?","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-include-3F","(key)",""],["include?","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-include-3F","(key)",""],["include?","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-include-3F","(other)","<p>Returns <code>true</code> if contained string contains <em>other</em>.\nReturns <code>false</code> otherwise.\n<p>Example:\n\n<pre><code>&#39;Café&#39;.mb_chars.include?(&#39;é&#39;) ...</code></pre>\n"],["include_fallbacks_module","I18n::Railtie","classes/I18n/Railtie.html#method-c-include_fallbacks_module","()",""],["include_helper_modules!","ActionView::TestCase::Behavior::ClassMethods","classes/ActionView/TestCase/Behavior/ClassMethods.html#method-i-include_helper_modules-21","()",""],["include_with_range?","Range","classes/Range.html#method-i-include_with_range-3F","(value)","<p>Extends the default Range#include? to support range comparisons.\n\n<pre><code>(1..5).include?(1..5) # =&gt; true\n(1..5).include?(2..3) ...\n</code></pre>\n"],["included","ActionController::TestCase::RaiseActionExceptions","classes/ActionController/TestCase/RaiseActionExceptions.html#method-c-included","(base)",""],["included","ActionController::UrlWriter","classes/ActionController/UrlWriter.html#method-c-included","(klass)",""],["included","ActionView::Template::Handlers::Compilable","classes/ActionView/Template/Handlers/Compilable.html#method-c-included","(base)",""],["included","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-included","(base)",""],["included","ActiveSupport::Concern","classes/ActiveSupport/Concern.html#method-i-included","(base = nil, &block)",""],["included","ActiveSupport::Memoizable::InstanceMethods","classes/ActiveSupport/Memoizable/InstanceMethods.html#method-c-included","(base)",""],["included","ActiveSupport::Testing::Isolation","classes/ActiveSupport/Testing/Isolation.html#method-c-included","(base)",""],["included","ActiveSupport::Testing::Performance","classes/ActiveSupport/Testing/Performance.html#method-c-included","(base)",""],["included","Rails::Application::Configurable","classes/Rails/Application/Configurable.html#method-c-included","(base)",""],["included","Rails::Engine::Configurable","classes/Rails/Engine/Configurable.html#method-c-included","(base)",""],["included","Rails::Initializable","classes/Rails/Initializable.html#method-c-included","(base)",""],["included","Rails::Railtie::Configurable","classes/Rails/Railtie/Configurable.html#method-c-included","(base)",""],["includes","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-includes","(*args)",""],["increment","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-increment","(attribute, by = 1)","<p>Initializes <code>attribute</code> to zero if <code>nil</code> and adds the\nvalue passed as <code>by</code> (default is 1). The increment is …\n"],["increment","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-i-increment","(name, amount = 1, options = nil)",""],["increment","ActiveSupport::Cache::MemoryStore","classes/ActiveSupport/Cache/MemoryStore.html#method-i-increment","(name, amount = 1, options = nil)","<p>Increment an integer value in the cache.\n"],["increment","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-increment","(name, amount = 1, options = nil)","<p>Increment an integer value in the cache.\n<p>Options are passed to the underlying cache implementation.\n<p>All …\n"],["increment!","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-increment-21","(attribute, by = 1)","<p>Wrapper around <code>increment</code> that saves the record. This method\ndiffers from its non-bang version in that …\n"],["increment_counter","ActiveRecord::CounterCache","classes/ActiveRecord/CounterCache.html#method-i-increment_counter","(counter_name, id)","<p>Increment a number field by one, usually representing a count.\n<p>This is used for caching aggregate values, …\n"],["increment_open_transactions","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-increment_open_transactions","()",""],["index","ActionController::Middleware","classes/ActionController/Middleware.html#method-i-index","()",""],["index","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-index","(column_name, options = {})","<p>Adds a new index to the table. <code>column_name</code> can be a single\nSymbol, or an Array of Symbols. See SchemaStatements#add_index …\n"],["index","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-index","(needle, offset=0)","<p>Returns the position <em>needle</em> in the string, counting in codepoints.\nReturns <code>nil</code> if <em>needle</em> isn&#39;t found. …\n"],["index_by","Enumerable","classes/Enumerable.html#method-i-index_by","()","<p>Convert an enumerable to a hash. Examples:\n\n<pre><code>people.index_by(&amp;:login)\n  =&gt; { &quot;nextangle&quot; =&gt; &lt;Person ...&gt;, ...\n</code></pre>\n"],["index_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-index_exists-3F","(table_name, column_name, options = {})","<p>Checks to see if an index exists on a table for a given index definition\n<p>Examples\n\n<pre><code># Check an index exists ...</code></pre>\n"],["index_exists?","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-index_exists-3F","(column_name, options = {})","<p>Checks to see if an index exists. See SchemaStatements#index_exists?\n"],["index_helper","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-index_helper","()",""],["index_name_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-index_name_exists-3F","(table_name, index_name, default)","<p>Verify the existence of an index with a given name.\n<p>The default argument is returned if the underlying …\n"],["index_name_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-index_name_length","()","<p>the maximum length of an index name\n"],["index_name_length","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-index_name_length","()",""],["indexes","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-indexes","(table_name, name = nil)","<p>Returns the list of all indexes for a table.\n"],["indexes_per_table","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-indexes_per_table","()","<p>the maximum number of indexes per table\n"],["inflections","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-inflections","()","<p>Yields a singleton instance of Inflector::Inflections so you can specify\nadditional inflector rules. …\n"],["info","Plugin","classes/Plugin.html#method-i-info","()",""],["inheritance_column","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-inheritance_column","()","<p>Defines the column name for use with single table inheritance. Use\n<code>set_inheritance_column</code> to set a different …\n"],["inheritance_column_name","Fixtures","classes/Fixtures.html#method-i-inheritance_column_name","()",""],["inherited","AbstractController::Helpers::ClassMethods","classes/AbstractController/Helpers/ClassMethods.html#method-i-inherited","(klass)","<p>When a class is inherited, wrap its helper module in a new module. This\nensures that the parent class&#39;s …\n"],["inherited","AbstractController::Layouts::ClassMethods","classes/AbstractController/Layouts/ClassMethods.html#method-i-inherited","(klass)",""],["inherited","ActionController::Base","classes/ActionController/Base.html#method-c-inherited","(klass)",""],["inherited","ActionController::HideActions::ClassMethods","classes/ActionController/HideActions/ClassMethods.html#method-i-inherited","(klass)",""],["inherited","ActionController::Metal","classes/ActionController/Metal.html#method-c-inherited","(base)",""],["inherited","ActiveModel::Observing::ClassMethods","classes/ActiveModel/Observing/ClassMethods.html#method-i-inherited","(subclass)","<p>Notify observers when the observed class is subclassed.\n"],["inherited","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-inherited","(base)","<p>Copy validators on inheritance.\n"],["inherited","ActiveSupport::DescendantsTracker","classes/ActiveSupport/DescendantsTracker.html#method-i-inherited","(base)",""],["inherited","Rails::Application","classes/Rails/Application.html#method-i-inherited","(base)",""],["inherited","Rails::Application::Configurable::ClassMethods","classes/Rails/Application/Configurable/ClassMethods.html#method-i-inherited","(base)",""],["inherited","Rails::Engine","classes/Rails/Engine.html#method-i-inherited","(base)",""],["inherited","Rails::Engine::Configurable::ClassMethods","classes/Rails/Engine/Configurable/ClassMethods.html#method-i-inherited","(base)",""],["inherited","Rails::Plugin","classes/Rails/Plugin.html#method-c-inherited","(base)",""],["inherited","Rails::Railtie","classes/Rails/Railtie.html#method-i-inherited","(base)",""],["inherited","Rails::Railtie::Configurable::ClassMethods","classes/Rails/Railtie/Configurable/ClassMethods.html#method-i-inherited","(base)",""],["init_fallbacks","I18n::Railtie","classes/I18n/Railtie.html#method-c-init_fallbacks","(fallbacks)",""],["init_with","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-init_with","(coder)","<p>Initialize an empty model object from <code>coder</code>. \n<code>coder</code> must contain the attributes necessary for initializing …\n"],["initialize!","Rails","classes/Rails.html#method-i-initialize-21","()",""],["initialize!","Rails::Application","classes/Rails/Application.html#method-i-initialize-21","()",""],["initialize_console","Rails::Application","classes/Rails/Application.html#method-i-initialize_console","(sandbox=false)",""],["initialize_copy","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-initialize_copy","(other)","<p>Cloned objects have no id assigned and are treated as new records. Note\nthat this is a “shallow” …\n"],["initialize_copy","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-initialize_copy","(other)",""],["initialize_copy","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-initialize_copy","(other)",""],["initialize_generators","Rails::Application","classes/Rails/Application.html#method-i-initialize_generators","()",""],["initialize_i18n","I18n::Railtie","classes/I18n/Railtie.html#method-c-initialize_i18n","(app)","<p>Setup i18n configuration\n"],["initialize_schema_migrations_table","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-initialize_schema_migrations_table","()","<p>Should not be called normally, but this operation is non-destructive. The\nmigrations module handles this …\n"],["initialize_tasks","Rails::Application","classes/Rails/Application.html#method-i-initialize_tasks","()",""],["initialize_template_class","ActionController::Compatibility","classes/ActionController/Compatibility.html#method-i-initialize_template_class","(*)","<p>For old tests\n"],["initialized=","Rails","classes/Rails.html#method-i-initialized-3D","(initialized)",""],["initialized?","Rails","classes/Rails.html#method-i-initialized-3F","()",""],["initializer","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-initializer","(filename, data=nil, &block)","<p>Create a new initializer with the provided code (either in a block or a\nstring).\n<p>Examples\n\n<pre><code>initializer(&quot;globals.rb&quot;) ...</code></pre>\n"],["initializer","Rails::Initializable::ClassMethods","classes/Rails/Initializable/ClassMethods.html#method-i-initializer","(name, opts = {}, &blk)",""],["initializers","Rails::Application","classes/Rails/Application.html#method-i-initializers","()",""],["initializers","Rails::Initializable","classes/Rails/Initializable.html#method-i-initializers","()",""],["initializers","Rails::Initializable::ClassMethods","classes/Rails/Initializable/ClassMethods.html#method-i-initializers","()",""],["initializers_chain","Rails::Initializable::ClassMethods","classes/Rails/Initializable/ClassMethods.html#method-i-initializers_chain","()",""],["initializers_for","Rails::Initializable::ClassMethods","classes/Rails/Initializable/ClassMethods.html#method-i-initializers_for","(binding)",""],["insert","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-insert","(index, *args, &block)",""],["insert","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-insert","(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)","<p>Returns the last auto-generated ID from the affected table.\n"],["insert","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-insert","(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)","<p>Executes an INSERT query and returns the new record&#39;s ID\n"],["insert","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-insert","(offset, fragment)","<p>Inserts the passed string at specified codepoint offsets.\n<p>Example:\n\n<pre><code>&#39;Café&#39;.mb_chars.insert(4, &#39; périferôl&#39;).to_s ...</code></pre>\n"],["insert_after","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-insert_after","(index, *args, &block)",""],["insert_before","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-insert_before","(index, *args, &block)",""],["insert_fixture","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-insert_fixture","(fixture, table_name)","<p>Inserts the given fixture into the table. Overridden in adapters that\nrequire something beyond a simple …\n"],["insert_fixtures","Fixtures","classes/Fixtures.html#method-i-insert_fixtures","()",""],["insert_html","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-insert_html","(position, id, *options_for_render)","<p>Inserts HTML at the specified <code>position</code> relative to the DOM\nelement identified by the given <code>id</code>.\n<p><code>position</code> …\n"],["insert_sql","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-insert_sql","(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)","<p>Returns the last auto-generated ID from the affected table.\n"],["inspect","ActionDispatch::MiddlewareStack::Middleware","classes/ActionDispatch/MiddlewareStack/Middleware.html#method-i-inspect","()",""],["inspect","ActionDispatch::Session::AbstractStore::SessionHash","classes/ActionDispatch/Session/AbstractStore/SessionHash.html#method-i-inspect","()",""],["inspect","ActionView::Template","classes/ActionView/Template.html#method-i-inspect","()",""],["inspect","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-inspect","()","<p>Returns a string like &#39;Post id:integer, title:string, body:text&#39;\n"],["inspect","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-inspect","()",""],["inspect","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-inspect","()",""],["inspect","Date","classes/Date.html#method-i-inspect","()",""],["inspect","DateTime","classes/DateTime.html#method-i-inspect","()",""],["install","Plugin","classes/Plugin.html#method-i-install","(method=nil, options = {})",""],["install","RailsEnvironment","classes/RailsEnvironment.html#method-i-install","(name_uri_or_plugin)",""],["install_using_checkout","Plugin","classes/Plugin.html#method-i-install_using_checkout","(options = {})",""],["install_using_export","Plugin","classes/Plugin.html#method-i-install_using_export","(options = {})",""],["install_using_externals","Plugin","classes/Plugin.html#method-i-install_using_externals","(options = {})",""],["install_using_git","Plugin","classes/Plugin.html#method-i-install_using_git","(options = {})",""],["install_using_http","Plugin","classes/Plugin.html#method-i-install_using_http","(options = {})",""],["installed?","Plugin","classes/Plugin.html#method-i-installed-3F","()",""],["instance","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-c-instance","()",""],["instance","Rails::Application","classes/Rails/Application.html#method-i-instance","()",""],["instance_method_already_implemented?","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-instance_method_already_implemented-3F","(method_name)",""],["instance_method_already_implemented?","ActiveRecord::AttributeMethods::ClassMethods","classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-instance_method_already_implemented-3F","(method_name)","<p>Checks whether the method is defined in the model or any of its subclasses\nthat also derive from Active …\n"],["instance_method_names","Module","classes/Module.html#method-i-instance_method_names","(*args)",""],["instance_variable_names","Object","classes/Object.html#method-i-instance_variable_names","()",""],["instantiate","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-instantiate","(record)","<p>Finder methods must instantiate through this method to work with the\nsingle-table inheritance model that …\n"],["instantiate_all_loaded_fixtures","Fixtures","classes/Fixtures.html#method-c-instantiate_all_loaded_fixtures","(object, load_instances = true)",""],["instantiate_fixtures","Fixtures","classes/Fixtures.html#method-c-instantiate_fixtures","(object, table_name, fixtures, load_instances = true)",""],["instantiate_observers","ActiveModel::Observing::ClassMethods","classes/ActiveModel/Observing/ClassMethods.html#method-i-instantiate_observers","()","<p>Instantiate the global Active Record observers.\n"],["instantiate_time_object","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-instantiate_time_object","(name, values)",""],["instantiator?","ActiveRecord::DynamicFinderMatch","classes/ActiveRecord/DynamicFinderMatch.html#method-i-instantiator-3F","()",""],["instrument","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-instrument","(operation, key, options = nil)",""],["instrument","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-c-instrument","()",""],["instrument","ActiveSupport::Notifications","classes/ActiveSupport/Notifications.html#method-i-instrument","(name, payload = {})",""],["instrument","ActiveSupport::Notifications::Instrumenter","classes/ActiveSupport/Notifications/Instrumenter.html#method-i-instrument","(name, payload={})","<p>Instrument the given block by measuring the time taken to execute it and\npublish it. Notice that events …\n"],["instrument=","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-c-instrument-3D","(boolean)","<p>Set to true if cache stores should be instrumented. Default is false.\n"],["instrument_fragment_cache","ActionController::Caching::Fragments","classes/ActionController/Caching/Fragments.html#method-i-instrument_fragment_cache","(name, key)",""],["instrument_page_cache","ActionController::Caching::Pages::ClassMethods","classes/ActionController/Caching/Pages/ClassMethods.html#method-i-instrument_page_cache","(name, path)",""],["instrumenter","ActiveSupport::Notifications","classes/ActiveSupport/Notifications.html#method-i-instrumenter","()",""],["internal_methods","AbstractController::Base","classes/AbstractController/Base.html#method-i-internal_methods","()","<p>A list of all internal methods for a controller. This finds the first\nabstract superclass of a controller, …\n"],["interpolate_and_sanitize_sql","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-interpolate_and_sanitize_sql","(sql, record = nil, sanitize_klass = self.class)",""],["interpolate_sanitized_sql","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-interpolate_sanitized_sql","(sanitized, record = nil, sanitize_klass = self.class)",""],["invalid?","ActiveModel::DeprecatedErrorMethods","classes/ActiveModel/DeprecatedErrorMethods.html#method-i-invalid-3F","(attribute)",""],["invalid?","ActiveModel::Validations","classes/ActiveModel/Validations.html#method-i-invalid-3F","(context = nil)","<p>Performs the opposite of <code>valid?</code>. Returns true if errors were\nadded, false otherwise.\n"],["invoke","Rails::Generators","classes/Rails/Generators.html#method-c-invoke","(namespace, args=ARGV, config={})","<p>Receives a namespace, arguments and the behavior to invoke the generator.\nIt&#39;s used as the default …\n"],["ip","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-ip","()",""],["irregular","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-i-irregular","(singular, plural)","<p>Specifies a new irregular that applies to both pluralization and\nsingularization at the same time. This …\n"],["is_a?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-is_a-3F","(klass)","<p>Say we&#39;re a Time to thwart type checking.\n"],["is_missing?","LoadError","classes/LoadError.html#method-i-is_missing-3F","(location)",""],["is_missing?","LoadError","classes/LoadError.html#method-i-is_missing-3F","(location)",""],["is_uri?","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-is_uri-3F","(path)",""],["is_utf8?","String","classes/String.html#method-i-is_utf8-3F","()",""],["isdst","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-isdst","()",""],["iso8601","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-iso8601","(fraction_digits = 0)",""],["j","ERB::Util","classes/ERB/Util.html#method-c-j","(s)",""],["j","ERB::Util","classes/ERB/Util.html#method-i-j","(s)",""],["javascript_include_tag","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-javascript_include_tag","(*sources)","<p>Returns an html script tag for each of the <code>sources</code> provided.\nYou can pass in the filename (.js extension …\n"],["javascript_object_for","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-javascript_object_for","(object)",""],["javascript_path","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-javascript_path","(source)","<p>Computes the path to a javascript asset in the public javascripts\ndirectory. If the <code>source</code> filename has …\n"],["javascript_src_tag","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-javascript_src_tag","(source, options)",""],["javascript_tag","ActionView::Helpers::JavaScriptHelper","classes/ActionView/Helpers/JavaScriptHelper.html#method-i-javascript_tag","(content_or_options_with_block = nil, html_options = {}, &block)","<p>Returns a JavaScript tag with the <code>content</code> inside. Example:\n\n<pre><code>javascript_tag &quot;alert(&#39;All is good&#39;)&quot;</code></pre>\n<p>Returns: …\n"],["join_asset_file_contents","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-join_asset_file_contents","(paths)",""],["join_table_name","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-join_table_name","(first_table_name, second_table_name)","<p>Generates a join table name from two provided table names. The names in the\njoin table names end up in …\n"],["joins","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-joins","(*args)",""],["joins_per_query","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-joins_per_query","()","<p>maximum number of joins in a single query\n"],["json_escape","ERB::Util","classes/ERB/Util.html#method-c-json_escape","(s)","<p>A utility method for escaping HTML entities in JSON strings using uXXXX\nJavaScript escape sequences for …\n"],["json_escape","ERB::Util","classes/ERB/Util.html#method-i-json_escape","(s)","<p>A utility method for escaping HTML entities in JSON strings using uXXXX\nJavaScript escape sequences for …\n"],["keep","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-keep","(k = nil)","<p>Keeps either the entire current flash or a specific flash entry available\nfor the next action:\n\n<pre><code>flash.keep ...</code></pre>\n"],["key?","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-key-3F","(key)",""],["key?","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-key-3F","(key)","<p>Checks the hash for a key matching the argument passed in:\n\n<pre><code>hash = HashWithIndifferentAccess.new\nhash[&quot;key&quot;] ...</code></pre>\n"],["key?","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-key-3F","(key)","<p>Checks the hash for a key matching the argument passed in:\n\n<pre><code>hash = HashWithIndifferentAccess.new\nhash[&quot;key&quot;] ...</code></pre>\n"],["key_file_path","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-i-key_file_path","(key)","<p>Translate a key into a file path.\n"],["key_matcher","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-key_matcher","(pattern, options)","<p>Add the namespace defined in the options to a pattern designed to match\nkeys. Implementations that support …\n"],["keyenc","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-keyenc","(k)",""],["kilobyte","Numeric","classes/Numeric.html#method-i-kilobyte","()",""],["kilobytes","Numeric","classes/Numeric.html#method-i-kilobytes","()",""],["kind","ActiveModel::Validator","classes/ActiveModel/Validator.html#method-i-kind","()","<p>Return the kind for this validator.\n"],["kind","ActiveModel::Validator","classes/ActiveModel/Validator.html#method-c-kind","()","<p>Returns the kind of the validator.\n<p>Examples\n\n<pre><code>PresenceValidator.kind   # =&gt; :presence\nUniquenessValidator.kind ...\n</code></pre>\n"],["kind_of?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-kind_of-3F","(klass)",""],["klass","ActionDispatch::MiddlewareStack::Middleware","classes/ActionDispatch/MiddlewareStack/Middleware.html#method-i-klass","()",""],["klass","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-i-klass","()","<p>Returns the Ruby class that corresponds to the abstract data type.\n"],["klass","ActiveRecord::Reflection::MacroReflection","classes/ActiveRecord/Reflection/MacroReflection.html#method-i-klass","()","<p>Returns the class for the macro.\n<p><code>composed_of :balance, :class_name =&gt; &#39;Money&#39;</code>\nreturns the  …\n"],["l","AbstractController::Translation","classes/AbstractController/Translation.html#method-i-l","(*args)",""],["l","ActionView::Helpers::TranslationHelper","classes/ActionView/Helpers/TranslationHelper.html#method-i-l","(*args)",""],["label","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-label","(method, text = nil, options = {}, &block)",""],["label","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-label","(object_name, method, content_or_options = nil, options = nil, &block)","<p>Returns a label tag tailored for labelling an input field for a specified\nattribute (identified by <code>method</code> …\n"],["label_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-label_tag","(name = nil, content_or_options = nil, options = nil, &block)","<p>Creates a label element. Accepts a block.\n<p>Options\n<p>Creates standard HTML attributes for the tag.\n"],["last","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-last","(*args)","<p>A convenience wrapper for <code>find(:last, *args)</code>. You can pass in\nall the same arguments to this method as …\n"],["last","String","classes/String.html#method-i-last","(limit = 1)","<p>Returns the last character of the string or the last <code>limit</code>\ncharacters.\n<p>Examples:\n\n<pre><code>&quot;hello&quot;.last     # =&gt; ...\n</code></pre>\n"],["last_modified","ActionDispatch::Http::Cache::Response","classes/ActionDispatch/Http/Cache/Response.html#method-i-last_modified","()",""],["last_modified=","ActionDispatch::Http::Cache::Response","classes/ActionDispatch/Http/Cache/Response.html#method-i-last_modified-3D","(utc_time)",""],["last_modified?","ActionDispatch::Http::Cache::Response","classes/ActionDispatch/Http/Cache/Response.html#method-i-last_modified-3F","()",""],["layout","AbstractController::Layouts::ClassMethods","classes/AbstractController/Layouts/ClassMethods.html#method-i-layout","(layout, conditions = {})","<p>Specify the layout to use for this class.\n<p>If the specified layout is a:\n<p>String &mdash; the String is the template …\n"],["layout","ActionDispatch::TestResponse::DeprecatedHelpers","classes/ActionDispatch/TestResponse/DeprecatedHelpers.html#method-i-layout","()",""],["lex","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-lex","(s)","<p>Scans s and returns a list of json tokens, excluding white space (as\ndefined in RFC 4627).\n"],["lib","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-lib","(filename, data=nil, &block)","<p>Create a new file in the lib/ directory. Code can be specified in a block\nor a data string can be given. …\n"],["limit","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-limit","(value)",""],["limit","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-limit","(limit)","<p>Limit the byte size of the string to a number of bytes without breaking\ncharacters. Usable when the storage …\n"],["limited_update_conditions","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-limited_update_conditions","(where_sql, quoted_table_name, quoted_primary_key)",""],["limited_update_conditions","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-limited_update_conditions","(where_sql, quoted_table_name, quoted_primary_key)",""],["link_to","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-link_to","(*args, &block)","<p>Creates a link tag of the given <code>name</code> using a URL created by\nthe set of <code>options</code>. See the valid options …\n"],["link_to_function","ActionView::Helpers::JavaScriptHelper","classes/ActionView/Helpers/JavaScriptHelper.html#method-i-link_to_function","(name, *args, &block)","<p>Returns a link of the given <code>name</code> that will trigger a\nJavaScript <code>function</code> using the onclick handler and …\n"],["link_to_if","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-link_to_if","(condition, name, options = {}, html_options = {}, &block)","<p>Creates a link tag of the given <code>name</code> using a URL created by\nthe set of <code>options</code> if <code>condition</code> is true, …\n"],["link_to_unless","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-link_to_unless","(condition, name, options = {}, html_options = {}, &block)","<p>Creates a link tag of the given <code>name</code> using a URL created by\nthe set of <code>options</code> unless <code>condition</code> is true, …\n"],["link_to_unless_current","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-link_to_unless_current","(name, options = {}, html_options = {}, &block)","<p>Creates a link tag of the given <code>name</code> using a URL created by\nthe set of <code>options</code> unless the current request …\n"],["links","RecursiveHTTPFetcher","classes/RecursiveHTTPFetcher.html#method-i-links","(base_url, contents)",""],["listeners_for","ActiveSupport::Notifications::Fanout","classes/ActiveSupport/Notifications/Fanout.html#method-i-listeners_for","(name)",""],["listening?","ActiveSupport::Notifications::Fanout","classes/ActiveSupport/Notifications/Fanout.html#method-i-listening-3F","(name)",""],["literal","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-literal","(code)","<p>Returns an object whose <code>to_json</code> evaluates to\n<code>code</code>. Use this to pass a literal JavaScript expression as …\n"],["ljust","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-ljust","(integer, padstr=' ')","<p>Works just like <code>String#ljust</code>, only integer specifies\ncharacters instead of bytes.\n<p>Example:\n\n<pre><code>&quot;¾ cup&quot;.mb_chars.rjust(8).to_s ...</code></pre>\n"],["load","ActiveSupport::Multibyte::Unicode::UnicodeDatabase","classes/ActiveSupport/Multibyte/Unicode/UnicodeDatabase.html#method-i-load","()","<p>Loads the Unicode database and returns all the internal objects of\nUnicodeDatabase.\n"],["load!","ActionDispatch::Session::AbstractStore::SessionHash","classes/ActionDispatch/Session/AbstractStore/SessionHash.html#method-i-load-21","()",""],["load_and_configure_sdoc","Rails::API::RepoTask","classes/Rails/API/RepoTask.html#method-i-load_and_configure_sdoc","()",""],["load_and_configure_sdoc","Rails::API::Task","classes/Rails/API/Task.html#method-i-load_and_configure_sdoc","()",""],["load_console","Rails::Application","classes/Rails/Application.html#method-i-load_console","(sandbox=false)",""],["load_console","Rails::Railtie","classes/Rails/Railtie.html#method-i-load_console","()",""],["load_deprecated_tasks","Rails::Plugin","classes/Rails/Plugin.html#method-i-load_deprecated_tasks","()",""],["load_for_read!","ActionDispatch::Session::AbstractStore::SessionHash","classes/ActionDispatch/Session/AbstractStore/SessionHash.html#method-i-load_for_read-21","()",""],["load_for_write!","ActionDispatch::Session::AbstractStore::SessionHash","classes/ActionDispatch/Session/AbstractStore/SessionHash.html#method-i-load_for_write-21","()",""],["load_generators","Rails::Application","classes/Rails/Application.html#method-i-load_generators","()",""],["load_generators","Rails::Railtie","classes/Rails/Railtie.html#method-i-load_generators","()",""],["load_migration","ActiveRecord::MigrationProxy","classes/ActiveRecord/MigrationProxy.html#method-i-load_migration","()",""],["load_paths","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-i-load_paths","()",""],["load_paths","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-load_paths","()",""],["load_paths=","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-i-load_paths-3D","(paths)",""],["load_session","ActionDispatch::Session::AbstractStore","classes/ActionDispatch/Session/AbstractStore.html#method-i-load_session","(env)",""],["load_session","ActionDispatch::Session::CookieStore","classes/ActionDispatch/Session/CookieStore.html#method-i-load_session","(env)",""],["load_session_id!","ActionDispatch::Session::AbstractStore::OptionsHash","classes/ActionDispatch/Session/AbstractStore/OptionsHash.html#method-i-load_session_id-21","()",""],["load_tasks","Rails::Application","classes/Rails/Application.html#method-i-load_tasks","()",""],["load_tasks","Rails::Engine","classes/Rails/Engine.html#method-i-load_tasks","()",""],["load_tasks","Rails::Plugin","classes/Rails/Plugin.html#method-i-load_tasks","()",""],["load_tasks","Rails::Railtie","classes/Rails/Railtie.html#method-i-load_tasks","()",""],["loaded?","ActionDispatch::Session::AbstractStore::SessionHash","classes/ActionDispatch/Session/AbstractStore/SessionHash.html#method-i-loaded-3F","()",""],["loaded?","ActiveRecord::SessionStore::Session","classes/ActiveRecord/SessionStore/Session.html#method-i-loaded-3F","()","<p>Has the session been loaded yet?\n"],["loaded?","ActiveRecord::SessionStore::SqlBypass","classes/ActiveRecord/SessionStore/SqlBypass.html#method-i-loaded-3F","()",""],["local","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-local","(*args)","<p>Method for creating new ActiveSupport::TimeWithZone instance in time zone\nof <code>self</code> from given values. …\n"],["local?","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-local-3F","()","<p>True if the request came from localhost, 127.0.0.1.\n"],["local_cache","ActiveSupport::Cache::Strategy::LocalCache","classes/ActiveSupport/Cache/Strategy/LocalCache.html#method-i-local_cache","()",""],["local_constant_names","Module","classes/Module.html#method-i-local_constant_names","()","<p>Returns the names of the constants defined locally rather than the\nconstants themselves. See <code>local_constants</code> …\n"],["local_constants","Module","classes/Module.html#method-i-local_constants","()","<p>Returns the constants that have been defined locally by this object and not\nin an ancestor. This method …\n"],["local_offset","DateTime","classes/DateTime.html#method-i-local_offset","()","<p>DateTimes aren&#39;t aware of DST rules, so use a consistent non-DST offset\nwhen creating a DateTime …\n"],["local_time","Time","classes/Time.html#method-i-local_time","(*args)","<p>Wraps class method <code>time_with_datetime_fallback</code> with\n<code>utc_or_local</code> set to <code>:local</code>.\n"],["local_to_utc","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-local_to_utc","(time, dst=true)","<p>Adjust the given time to the simultaneous time in UTC. Returns a Time.utc()\ninstance.\n"],["locale","ActionView::LookupContext::Details","classes/ActionView/LookupContext/Details.html#method-i-locale","()","<p>Overload locale to return a symbol instead of array.\n"],["locale=","ActionView::LookupContext::Details","classes/ActionView/LookupContext/Details.html#method-i-locale-3D","(value)","<p>Overload locale= to also set the I18n.locale. If the current I18n.config\nobject responds to original_config …\n"],["localize","AbstractController::Translation","classes/AbstractController/Translation.html#method-i-localize","(*args)",""],["localize","ActionView::Helpers::TranslationHelper","classes/ActionView/Helpers/TranslationHelper.html#method-i-localize","(*args)","<p>Delegates to I18n.localize with no additional functionality.\n"],["locals","ActionView::TestCase::Behavior","classes/ActionView/TestCase/Behavior.html#method-i-locals","()",""],["localtime","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-localtime","()","<p>Returns a <code>Time.local()</code> instance of the simultaneous time in\nyour system&#39;s <code>ENV['TZ']</code> zone\n"],["location","ActionController::Metal","classes/ActionController/Metal.html#method-i-location","()",""],["location","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-location","()",""],["location=","ActionController::Metal","classes/ActionController/Metal.html#method-i-location-3D","(url)",""],["location=","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-location-3D","(url)",""],["lock","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-lock","(locks = true)",""],["lock!","ActiveRecord::Locking::Pessimistic","classes/ActiveRecord/Locking/Pessimistic.html#method-i-lock-21","(lock = true)","<p>Obtain a row lock on this record. Reloads the record to obtain the\nrequested lock. Pass an SQL locking …\n"],["locking_column","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-locking_column","()","<p>The version column used for optimistic locking. Defaults to\n<code>lock_version</code>.\n"],["locking_enabled?","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-locking_enabled-3F","()","<p>Is optimistic locking enabled for this table? Returns true if the\n<code>lock_optimistically</code> flag is set to …\n"],["log","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-log","(sql, name)",""],["log","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-log","(operation, key, options = nil)",""],["log","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-log","(*args)","<p>Define log for backwards compatibility. If just one argument is sent,\ninvoke say, otherwise invoke say_status. …\n"],["log_error","ActionDispatch::ShowExceptions","classes/ActionDispatch/ShowExceptions.html#method-i-log_error","(exception)",""],["log_path","Rails::Configuration::Deprecated","classes/Rails/Configuration/Deprecated.html#method-i-log_path","()",""],["log_path","Rails::Server","classes/Rails/Server.html#method-i-log_path","()",""],["log_path=","Rails::Configuration::Deprecated","classes/Rails/Configuration/Deprecated.html#method-i-log_path-3D","(value)",""],["log_process_action","ActiveRecord::Railties::ControllerRuntime::ClassMethods","classes/ActiveRecord/Railties/ControllerRuntime/ClassMethods.html#method-i-log_process_action","(payload)",""],["log_subscriber","Rails::Railtie","classes/Rails/Railtie.html#method-i-log_subscriber","(*)",""],["log_subscribers","ActiveSupport::LogSubscriber","classes/ActiveSupport/LogSubscriber.html#method-i-log_subscribers","()",""],["logged","ActiveSupport::LogSubscriber::TestHelper::MockLogger","classes/ActiveSupport/LogSubscriber/TestHelper/MockLogger.html#method-i-logged","(level)",""],["logger","ActionController::LogSubscriber","classes/ActionController/LogSubscriber.html#method-i-logger","()",""],["logger","ActionDispatch::ParamsParser","classes/ActionDispatch/ParamsParser.html#method-i-logger","()",""],["logger","ActionDispatch::ShowExceptions","classes/ActionDispatch/ShowExceptions.html#method-i-logger","()",""],["logger","ActionView::LogSubscriber","classes/ActionView/LogSubscriber.html#method-i-logger","()","<p>TODO: Ideally, ActionView should have its own logger so it does not depend\non AC.logger\n"],["logger","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-logger","","<p>Accepts a logger conforming to the interface of Log4r or the default Ruby\n1.8+ Logger class, which is …\n"],["logger","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-i-logger","()",""],["logger","ActiveSupport::LogSubscriber","classes/ActiveSupport/LogSubscriber.html#method-i-logger","()",""],["logger","Rails","classes/Rails.html#method-i-logger","()",""],["logger=","Rails","classes/Rails.html#method-i-logger-3D","(logger)",""],["lookup","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-lookup","(name)",""],["lookup","Mime::Type","classes/Mime/Type.html#method-i-lookup","(string)",""],["lookup_ancestors","ActiveModel::Translation","classes/ActiveModel/Translation.html#method-i-lookup_ancestors","()","<p>When localizing a string, it goes through the lookup returned by this\nmethod, which is used in ActiveModel::Name#human …\n"],["lookup_by_extension","Mime::Type","classes/Mime/Type.html#method-i-lookup_by_extension","(extension)",""],["lookup_context","AbstractController::ViewPaths","classes/AbstractController/ViewPaths.html#method-i-lookup_context","()","<p>LookupContext is the object responsible to hold all information required to\nlookup templates, i.e. view …\n"],["lookup_store","ActiveSupport::Cache","classes/ActiveSupport/Cache.html#method-c-lookup_store","(*store_option)","<p>Creates a new CacheStore object according to the given options.\n<p>If no arguments are passed to this method, …\n"],["loop_on_multiple_args","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-loop_on_multiple_args","(method, ids)",""],["ls","RecursiveHTTPFetcher","classes/RecursiveHTTPFetcher.html#method-i-ls","()",""],["lstrip","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-lstrip","()","<p>Strips entire range of Unicode whitespace from the left of the string.\n"],["mail","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-mail","(headers={}, &block)","<p>The main method that creates the message and renders the email templates.\nThere are two ways to call …\n"],["mail_to","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-mail_to","(email_address, name = nil, html_options = {})","<p>Creates a mailto link tag to the specified <code>email_address</code>,\nwhich is also used as the name of the link …\n"],["mailer_name","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-mailer_name","()",""],["make_test_case_available_to_view!","ActionView::TestCase::Behavior","classes/ActionView/TestCase/Behavior.html#method-i-make_test_case_available_to_view-21","()",""],["many?","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-many-3F","()",""],["many?","Enumerable","classes/Enumerable.html#method-i-many-3F","(&block)","<p>Returns true if the collection has more than 1 element. Functionally\nequivalent to collection.size &gt; …\n"],["map_method","ActionDispatch::Routing::Mapper::HttpHelpers","classes/ActionDispatch/Routing/Mapper/HttpHelpers.html#method-i-map_method","(method, *args, &block)",""],["mark_for_destruction","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-mark_for_destruction","()","<p>Marks this record to be destroyed as part of the parents save transaction.\nThis does <em>not</em> actually destroy …\n"],["marked_for_destruction?","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-marked_for_destruction-3F","()","<p>Returns whether or not this record will be destroyed as part of the parents\nsave transaction.\n<p>Only useful …\n"],["marshal_data!","ActiveRecord::SessionStore::Session","classes/ActiveRecord/SessionStore/Session.html#method-i-marshal_data-21","()",""],["marshal_dump","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-marshal_dump","()",""],["marshal_load","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-marshal_load","(variables)",""],["mass_assignment_authorizer","ActiveModel::MassAssignmentSecurity","classes/ActiveModel/MassAssignmentSecurity.html#method-i-mass_assignment_authorizer","()",""],["match","ActionDispatch::Routing::Mapper::Base","classes/ActionDispatch/Routing/Mapper/Base.html#method-i-match","(path, options=nil)","<p>When you set up a regular route, you supply a series of symbols that Rails\nmaps to parts of an incoming …\n"],["match","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-match","(*args)",""],["match","ActionDispatch::Routing::Mapper::Shorthand","classes/ActionDispatch/Routing/Mapper/Shorthand.html#method-i-match","(*args)",""],["match","ActiveModel::AttributeMethods::ClassMethods::AttributeMethodMatcher","classes/ActiveModel/AttributeMethods/ClassMethods/AttributeMethodMatcher.html#method-i-match","(method_name)",""],["match","ActiveRecord::DynamicFinderMatch","classes/ActiveRecord/DynamicFinderMatch.html#method-c-match","(method)",""],["match","ActiveRecord::DynamicScopeMatch","classes/ActiveRecord/DynamicScopeMatch.html#method-c-match","(method)",""],["match","HTML::Selector","classes/HTML/Selector.html#method-i-match","(element, first_only = false)","<p>Matches an element against the selector.\n<p>For a simple selector this method returns an array with the element …\n"],["match_attribute_method?","ActiveModel::AttributeMethods","classes/ActiveModel/AttributeMethods.html#method-i-match_attribute_method-3F","(method_name)","<p>Returns a struct representing the matching attribute method. The\nstruct&#39;s attributes are prefix, …\n"],["matches?","ActiveSupport::Callbacks::Callback","classes/ActiveSupport/Callbacks/Callback.html#method-i-matches-3F","(_kind, _filter)",""],["mattr_accessor","Module","classes/Module.html#method-i-mattr_accessor","(*syms)","<p>Extends the module object with module and instance accessors for class\nattributes, just like the native …\n"],["mattr_reader","Module","classes/Module.html#method-i-mattr_reader","(*syms)",""],["mattr_writer","Module","classes/Module.html#method-i-mattr_writer","(*syms)",""],["maximum","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-maximum","(column_name, options = {})","<p>Calculates the maximum value on a given column. The value is returned with\nthe same data type of the …\n"],["mb_chars","String","classes/String.html#method-i-mb_chars","()","<p>Multibyte proxy\n<p><code>mb_chars</code> is a multibyte safe proxy for string methods.\n<p>In Ruby 1.8 and older it creates …\n"],["measure","ActiveSupport::Testing::Performance::Metrics::Base","classes/ActiveSupport/Testing/Performance/Metrics/Base.html#method-i-measure","()",""],["measure","ActiveSupport::Testing::Performance::Metrics::CpuTime","classes/ActiveSupport/Testing/Performance/Metrics/CpuTime.html#method-i-measure","()",""],["measure","ActiveSupport::Testing::Performance::Metrics::GcRuns","classes/ActiveSupport/Testing/Performance/Metrics/GcRuns.html#method-i-measure","()",""],["measure","ActiveSupport::Testing::Performance::Metrics::GcTime","classes/ActiveSupport/Testing/Performance/Metrics/GcTime.html#method-i-measure","()",""],["measure","ActiveSupport::Testing::Performance::Metrics::Memory","classes/ActiveSupport/Testing/Performance/Metrics/Memory.html#method-i-measure","()",""],["measure","ActiveSupport::Testing::Performance::Metrics::Objects","classes/ActiveSupport/Testing/Performance/Metrics/Objects.html#method-i-measure","()",""],["measure","ActiveSupport::Testing::Performance::Metrics::ProcessTime","classes/ActiveSupport/Testing/Performance/Metrics/ProcessTime.html#method-i-measure","()",""],["measure","ActiveSupport::Testing::Performance::Metrics::Time","classes/ActiveSupport/Testing/Performance/Metrics/Time.html#method-i-measure","()",""],["measure","ActiveSupport::Testing::Performance::Metrics::WallTime","classes/ActiveSupport/Testing/Performance/Metrics/WallTime.html#method-i-measure","()",""],["measure_mode","ActiveSupport::Testing::Performance::Metrics::Base","classes/ActiveSupport/Testing/Performance/Metrics/Base.html#method-i-measure_mode","()",""],["media_type","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-media_type","()",""],["megabyte","Numeric","classes/Numeric.html#method-i-megabyte","()",""],["megabytes","Numeric","classes/Numeric.html#method-i-megabytes","()",""],["member","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-member","()","<p>To add a member route, add a member block into the resource block:\n\n<pre><code>resources :photos do\n  member do\n  ...</code></pre>\n"],["member?","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-member-3F","(key)",""],["member?","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-member-3F","(key)",""],["memoize","ActiveSupport::Memoizable","classes/ActiveSupport/Memoizable.html#method-i-memoize","(*symbols)",""],["memoize_all","ActiveSupport::Memoizable::InstanceMethods","classes/ActiveSupport/Memoizable/InstanceMethods.html#method-i-memoize_all","()",""],["memoized_ivar_for","ActiveSupport::Memoizable","classes/ActiveSupport/Memoizable.html#method-c-memoized_ivar_for","(symbol)",""],["merge","ActiveRecord::SpawnMethods","classes/ActiveRecord/SpawnMethods.html#method-i-merge","(r)",""],["merge","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-merge","(hash)","<p>Merges the instantized and the specified hashes together, giving precedence\nto the values from the second …\n"],["merge","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-merge","(hash)","<p>Merges the instantized and the specified hashes together, giving precedence\nto the values from the second …\n"],["merge!","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-merge-21","(other_hash)",""],["merge!","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-merge-21","(other_hash)",""],["merge_as_scope","ActionDispatch::Routing::Mapper::Scoping","classes/ActionDispatch/Routing/Mapper/Scoping.html#method-i-merge_as_scope","(parent, child)",""],["merge_blocks_scope","ActionDispatch::Routing::Mapper::Scoping","classes/ActionDispatch/Routing/Mapper/Scoping.html#method-i-merge_blocks_scope","(parent, child)",""],["merge_constraints_scope","ActionDispatch::Routing::Mapper::Scoping","classes/ActionDispatch/Routing/Mapper/Scoping.html#method-i-merge_constraints_scope","(parent, child)",""],["merge_controller_scope","ActionDispatch::Routing::Mapper::Scoping","classes/ActionDispatch/Routing/Mapper/Scoping.html#method-i-merge_controller_scope","(parent, child)",""],["merge_defaults_scope","ActionDispatch::Routing::Mapper::Scoping","classes/ActionDispatch/Routing/Mapper/Scoping.html#method-i-merge_defaults_scope","(parent, child)",""],["merge_module_scope","ActionDispatch::Routing::Mapper::Scoping","classes/ActionDispatch/Routing/Mapper/Scoping.html#method-i-merge_module_scope","(parent, child)",""],["merge_options_scope","ActionDispatch::Routing::Mapper::Scoping","classes/ActionDispatch/Routing/Mapper/Scoping.html#method-i-merge_options_scope","(parent, child)",""],["merge_path_names_scope","ActionDispatch::Routing::Mapper::Scoping","classes/ActionDispatch/Routing/Mapper/Scoping.html#method-i-merge_path_names_scope","(parent, child)",""],["merge_path_scope","ActionDispatch::Routing::Mapper::Scoping","classes/ActionDispatch/Routing/Mapper/Scoping.html#method-i-merge_path_scope","(parent, child)",""],["merge_shallow_path_scope","ActionDispatch::Routing::Mapper::Scoping","classes/ActionDispatch/Routing/Mapper/Scoping.html#method-i-merge_shallow_path_scope","(parent, child)",""],["merge_shallow_prefix_scope","ActionDispatch::Routing::Mapper::Scoping","classes/ActionDispatch/Routing/Mapper/Scoping.html#method-i-merge_shallow_prefix_scope","(parent, child)",""],["merge_shallow_scope","ActionDispatch::Routing::Mapper::Scoping","classes/ActionDispatch/Routing/Mapper/Scoping.html#method-i-merge_shallow_scope","(parent, child)",""],["message","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-message","()",""],["method","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-method","()","<p>Returns the original value of the environment&#39;s REQUEST_METHOD, even if\nit was overridden by middleware. …\n"],["method_added","AbstractController::Base","classes/AbstractController/Base.html#method-i-method_added","(name)",""],["method_added","ActiveRecord::Callbacks::ClassMethods","classes/ActiveRecord/Callbacks/ClassMethods.html#method-i-method_added","(meth)",""],["method_for_action","AbstractController::Base","classes/AbstractController/Base.html#method-i-method_for_action","(action_name)","<p>Takes an action name and returns the name of the method that will handle\nthe action. In normal cases, …\n"],["method_for_action","ActionController::Compatibility","classes/ActionController/Compatibility.html#method-i-method_for_action","(action_name)",""],["method_for_action","ActionController::HideActions","classes/ActionController/HideActions.html#method-i-method_for_action","(action_name)","<p>Overrides AbstractController::Base#action_method? to return false if the\naction name is in the list of …\n"],["method_for_action","ActionController::ImplicitRender","classes/ActionController/ImplicitRender.html#method-i-method_for_action","(action_name)",""],["method_missing","AbstractController::Collector","classes/AbstractController/Collector.html#method-i-method_missing","(symbol, &block)",""],["method_missing","ActionDispatch::Assertions::RoutingAssertions","classes/ActionDispatch/Assertions/RoutingAssertions.html#method-i-method_missing","(selector, *args, &block)","<p>ROUTES TODO: These assertions should really work in an integration context\n"],["method_missing","ActionDispatch::Integration::Runner","classes/ActionDispatch/Integration/Runner.html#method-i-method_missing","(sym, *args, &block)","<p>Delegate unhandled messages to the current session instance.\n"],["method_missing","ActionMailer::Base::DeprecatedHeaderProxy","classes/ActionMailer/Base/DeprecatedHeaderProxy.html#method-i-method_missing","(meth, *args, &block)",""],["method_missing","ActionView::Helpers::AtomFeedHelper::AtomBuilder","classes/ActionView/Helpers/AtomFeedHelper/AtomBuilder.html#method-i-method_missing","(method, *arguments, &block)","<p>Delegate to xml builder, first wrapping the element in a xhtml namespaced\ndiv element if the method and …\n"],["method_missing","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-method_missing","(method, *arguments)",""],["method_missing","ActionView::TestCase::Behavior","classes/ActionView/TestCase/Behavior.html#method-i-method_missing","(selector, *args)",""],["method_missing","ActiveModel::AttributeMethods","classes/ActiveModel/AttributeMethods.html#method-i-method_missing","(method_id, *args, &block)","<p>Allows access to the object attributes, which are held in the\n<code>@attributes</code> hash, as though they were first-class …\n"],["method_missing","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-method_missing","(method_id, *arguments, &block)","<p>Enables dynamic finders like <code>User.find_by_user_name(user_name)</code>\nand &lt;tt&gt;User.scoped_by_user_name(user_name). …\n"],["method_missing","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-method_missing","(symbol, *args)","<p>Handles non supported datatypes - e.g. XML\n"],["method_missing","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-method_missing","(method, *arguments, &block)",""],["method_missing","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-method_missing","(method, *args, &block)",""],["method_missing","ActiveSupport::LogSubscriber::TestHelper::MockLogger","classes/ActiveSupport/LogSubscriber/TestHelper/MockLogger.html#method-i-method_missing","(level, message)",""],["method_missing","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-method_missing","(method, *args, &block)","<p>Forward all undefined methods to the wrapped string.\n"],["method_missing","ActiveSupport::OrderedOptions","classes/ActiveSupport/OrderedOptions.html#method-i-method_missing","(name, *args)",""],["method_missing","ActiveSupport::StringInquirer","classes/ActiveSupport/StringInquirer.html#method-i-method_missing","(method_name, *arguments)",""],["method_missing","ActiveSupport::Testing::ProxyTestResult","classes/ActiveSupport/Testing/ProxyTestResult.html#method-i-method_missing","(name, *args)",""],["method_missing","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-method_missing","(sym, *args, &block)","<p>Send the missing method to <code>time</code> instance, and wrap result in a\nnew TimeWithZone with the existing <code>time_zone</code> …\n"],["method_missing","Mime::Type","classes/Mime/Type.html#method-i-method_missing","(method, *args)",""],["method_missing","NilClass","classes/NilClass.html#method-i-method_missing","(method, *args, &block)",""],["method_missing","Rails::Application","classes/Rails/Application.html#method-i-method_missing","(*args, &block)",""],["method_missing","Rails::Paths::PathParent","classes/Rails/Paths/PathParent.html#method-i-method_missing","(id, *args)",""],["method_missing","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-method_missing","(name, *args, &blk)",""],["method_missing_target","ActiveModel::AttributeMethods::ClassMethods::AttributeMethodMatcher","classes/ActiveModel/AttributeMethods/ClassMethods/AttributeMethodMatcher.html#method-i-method_missing_target","()",""],["method_name","ActiveModel::AttributeMethods::ClassMethods::AttributeMethodMatcher","classes/ActiveModel/AttributeMethods/ClassMethods/AttributeMethodMatcher.html#method-i-method_name","(attr_name)",""],["method_names","Module","classes/Module.html#method-i-method_names","(*args)",""],["method_option_to_s","ActionView::Helpers::PrototypeHelper","classes/ActionView/Helpers/PrototypeHelper.html#method-i-method_option_to_s","(method)",""],["method_symbol","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-method_symbol","()","<p>Returns a symbol form of the #method\n"],["microseconds","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-i-microseconds","(time)","<p>&#39;0.123456&#39; -&gt; 123456 &#39;1.123456&#39; -&gt; 123456\n"],["middleware","ActionController::Metal","classes/ActionController/Metal.html#method-c-middleware","()",""],["middleware","ActiveSupport::Cache::Strategy::LocalCache","classes/ActiveSupport/Cache/Strategy/LocalCache.html#method-i-middleware","()","<p>Middleware class can be inserted as a Rack handler to be local cache for\nthe duration of request.\n"],["middleware","Rails::Server","classes/Rails/Server.html#method-i-middleware","()",""],["midnight","Date","classes/Date.html#method-i-midnight","()",""],["midnight","DateTime","classes/DateTime.html#method-i-midnight","()",""],["midnight","Time","classes/Time.html#method-i-midnight","()",""],["migrate","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-migrate","(direction)","<p>Execute this migration in the named direction\n"],["migration","ActiveRecord::MigrationProxy","classes/ActiveRecord/MigrationProxy.html#method-i-migration","()",""],["migration_template","Rails::Generators::Migration","classes/Rails/Generators/Migration.html#method-i-migration_template","(source, destination=nil, config={})","<p>Creates a migration template at the given destination. The difference to\nthe default template method …\n"],["migrations_path","ActiveRecord::Schema","classes/ActiveRecord/Schema.html#method-c-migrations_path","()",""],["mime_type","ActionView::Template","classes/ActionView/Template.html#method-i-mime_type","()",""],["minimum","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-minimum","(column_name, options = {})","<p>Calculates the minimum value on a given column.  The value is returned with\nthe same data type of the …\n"],["minus_with_coercion","Time","classes/Time.html#method-i-minus_with_coercion","(other)","<p>Time#- can also be used to determine the number of seconds between two Time\ninstances. We&#39;re layering …\n"],["minus_without_coercion","Time","classes/Time.html#method-i-minus_without_coercion","(other)",""],["minus_without_duration","Time","classes/Time.html#method-i-minus_without_duration","(other)",""],["minute","Numeric","classes/Numeric.html#method-i-minute","()",""],["minutes","Numeric","classes/Numeric.html#method-i-minutes","()",""],["missing?","ActionDispatch::TestResponse","classes/ActionDispatch/TestResponse.html#method-i-missing-3F","()","<p>Was the URL not found?\n"],["missing_attribute","ActiveModel::AttributeMethods","classes/ActiveModel/AttributeMethods.html#method-i-missing_attribute","(attr_name, stack)",""],["missing_name","NameError","classes/NameError.html#method-i-missing_name","()","<p>Extract the name of the missing constant from the exception message.\n"],["missing_name?","NameError","classes/NameError.html#method-i-missing_name-3F","(name)","<p>Was this exception raised because the given name was missing?\n"],["model","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-model","()",""],["model_class","Fixtures","classes/Fixtures.html#method-i-model_class","()",""],["model_name","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-c-model_name","()",""],["model_name","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-i-model_name","()","<p>Returns an ActiveModel::Name object for module. It can be used to retrieve\nall kinds of naming-related …\n"],["model_name_from_record_or_class","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-c-model_name_from_record_or_class","(record_or_class)",""],["modules_for_helpers","AbstractController::Helpers::ClassMethods","classes/AbstractController/Helpers/ClassMethods.html#method-i-modules_for_helpers","(args)","<p>Returns a list of modules, normalized from the acceptable kinds of helpers\nwith the following behavior: …\n"],["modules_for_helpers","ActionController::Helpers::ClassMethods","classes/ActionController/Helpers/ClassMethods.html#method-i-modules_for_helpers","(args)","<p>Overwrite modules_for_helpers to accept :all as argument, which loads all\nhelpers in helpers_dir.\n<p>Parameters …\n"],["monday","Date","classes/Date.html#method-i-monday","()",""],["monday","Time","classes/Time.html#method-i-monday","()",""],["month","Integer","classes/Integer.html#method-i-month","()",""],["months","Integer","classes/Integer.html#method-i-months","()","<p>Enables the use of time calculations and declarations, like 45.minutes +\n2.hours + 4.years.\n<p>These methods …\n"],["months_ago","Date","classes/Date.html#method-i-months_ago","(months)","<p>Returns a new Date/DateTime representing the time a number of specified\nmonths ago.\n"],["months_ago","Time","classes/Time.html#method-i-months_ago","(months)","<p>Returns a new Time representing the time a number of specified months ago\n"],["months_since","Date","classes/Date.html#method-i-months_since","(months)","<p>Returns a new Date/DateTime representing the time a number of specified\nmonths in the future.\n"],["months_since","Time","classes/Time.html#method-i-months_since","(months)","<p>Returns a new Time representing the time a number of specified months in\nthe future\n"],["mount","ActionDispatch::Routing::Mapper::Base","classes/ActionDispatch/Routing/Mapper/Base.html#method-i-mount","(app, options = nil)","<p>Mount a Rack-based application to be used within the application.\n\n<pre><code>mount SomeRackApp, :at =&gt; &quot;some_route&quot;\n</code></pre>\n"],["ms","Benchmark","classes/Benchmark.html#method-i-ms","()",""],["multiple_of?","Integer","classes/Integer.html#method-i-multiple_of-3F","(number)","<p>Check whether the integer is evenly divisible by the argument.\n"],["mute","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-mute","()","<p>Silence the logger within a block.\n"],["name","ActiveSupport::Callbacks::Callback","classes/ActiveSupport/Callbacks/Callback.html#method-i-name","()",""],["name","ActiveSupport::Testing::Performance::Metrics::Base","classes/ActiveSupport/Testing/Performance/Metrics/Base.html#method-i-name","()",""],["name","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-c-name","()",""],["name_for_action","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-name_for_action","(as, action)",""],["named_host?","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-named_host-3F","(host)",""],["named_scope","ActiveRecord::NamedScope::ClassMethods","classes/ActiveRecord/NamedScope/ClassMethods.html#method-i-named_scope","(*args, &block)",""],["namespace","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-namespace","(path, options = {})","<p>See ActionDispatch::Routing::Mapper::Scoping#namespace\n"],["namespace","ActionDispatch::Routing::Mapper::Scoping","classes/ActionDispatch/Routing/Mapper/Scoping.html#method-i-namespace","(path, options = {})","<p>Scopes routes to a specific namespace. For example:\n\n<pre><code>namespace :admin do\n  resources :posts\nend</code></pre>\n<p>This generates …\n"],["namespace","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-namespace","(name=nil)","<p>Convenience method to get the namespace from the class name. It&#39;s the\nsame as Thor default except …\n"],["namespaced_key","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-namespaced_key","(key, options)","<p>Prefix a key with the namespace. Namespace and key will be delimited with a\ncolon.\n"],["native","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-native","()",""],["native","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-native","()",""],["native_database_types","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-native_database_types","()","<p>Returns a Hash of mappings from the abstract data types to the native\ndatabase types.  See TableDefinition#column …\n"],["navigation_behavior","ActionController::Responder","classes/ActionController/Responder.html#method-i-navigation_behavior","(error)","<p>This is the common behavior for “navigation” requests, like :html, :iphone\nand so forth.\n"],["navigation_location","ActionController::Responder","classes/ActionController/Responder.html#method-i-navigation_location","()",""],["negotiate_mime","ActionDispatch::Http::MimeNegotiation","classes/ActionDispatch/Http/MimeNegotiation.html#method-i-negotiate_mime","(order)","<p>Receives an array of mimes and return the first user sent mime that matches\nthe order array.\n"],["nested","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-nested","()",""],["nested_attributes_association?","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-nested_attributes_association-3F","(association_name)",""],["nested_child_index","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-nested_child_index","(name)",""],["nested_options","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-nested_options","()",""],["nested_records_changed_for_autosave?","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-nested_records_changed_for_autosave-3F","()","<p>go through nested autosave associations that are loaded in memory (without\nloading any new ones), and …\n"],["new","AbstractController::DoubleRenderError","classes/AbstractController/DoubleRenderError.html#method-c-new","(message = nil)",""],["new","AbstractController::DoubleRenderError","classes/AbstractController/DoubleRenderError.html#method-c-new","(message = nil)",""],["new","AbstractController::Layouts","classes/AbstractController/Layouts.html#method-c-new","(*)",""],["new","AbstractController::Rendering","classes/AbstractController/Rendering.html#method-c-new","(*)",""],["new","ActionController::Caching::Actions::ActionCachePath","classes/ActionController/Caching/Actions/ActionCachePath.html#method-c-new","(controller, options = {}, infer_extension = true)","<p>If <code>infer_extension</code> is true, the cache path extension is looked\nup from the request&#39;s path &amp; format. …\n"],["new","ActionController::Dispatcher","classes/ActionController/Dispatcher.html#method-i-new","()",""],["new","ActionController::Metal","classes/ActionController/Metal.html#method-c-new","(*)",""],["new","ActionController::Middleware","classes/ActionController/Middleware.html#method-c-new","(app)",""],["new","ActionController::Middleware","classes/ActionController/Middleware.html#method-i-new","(app)",""],["new","ActionController::Middleware::ActionMiddleware","classes/ActionController/Middleware/ActionMiddleware.html#method-c-new","(controller, app)",""],["new","ActionController::Responder","classes/ActionController/Responder.html#method-c-new","(controller, resources, options={})",""],["new","ActionController::UrlRewriter","classes/ActionController/UrlRewriter.html#method-c-new","(*)",""],["new","ActionDispatch::BestStandardsSupport","classes/ActionDispatch/BestStandardsSupport.html#method-c-new","(app, type = true)",""],["new","ActionDispatch::Callbacks","classes/ActionDispatch/Callbacks.html#method-c-new","(app, prepare_each_request = false)",""],["new","ActionDispatch::Cookies","classes/ActionDispatch/Cookies.html#method-c-new","(app)",""],["new","ActionDispatch::Flash","classes/ActionDispatch/Flash.html#method-c-new","(app)",""],["new","ActionDispatch::Head","classes/ActionDispatch/Head.html#method-c-new","(app)",""],["new","ActionDispatch::Http::Cache::Response","classes/ActionDispatch/Http/Cache/Response.html#method-c-new","(*)",""],["new","ActionDispatch::Http::Headers","classes/ActionDispatch/Http/Headers.html#method-c-new","(*args)",""],["new","ActionDispatch::Http::ParameterFilter","classes/ActionDispatch/Http/ParameterFilter.html#method-c-new","(filters)",""],["new","ActionDispatch::Http::UploadedFile","classes/ActionDispatch/Http/UploadedFile.html#method-c-new","(hash)",""],["new","ActionDispatch::Integration::Session","classes/ActionDispatch/Integration/Session.html#method-c-new","(app)","<p>Create and initialize a new Session instance.\n"],["new","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-c-new","(*args, &block)",""],["new","ActionDispatch::MiddlewareStack::Middleware","classes/ActionDispatch/MiddlewareStack/Middleware.html#method-c-new","(klass_or_name, *args, &block)",""],["new","ActionDispatch::ParamsParser","classes/ActionDispatch/ParamsParser.html#method-c-new","(app, parsers = {})",""],["new","ActionDispatch::RemoteIp","classes/ActionDispatch/RemoteIp.html#method-c-new","(app, check_ip_spoofing = true, trusted_proxies = nil)",""],["new","ActionDispatch::RemoteIp::RemoteIpGetter","classes/ActionDispatch/RemoteIp/RemoteIpGetter.html#method-c-new","(env, check_ip_spoofing, trusted_proxies)",""],["new","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-c-new","(env)",""],["new","ActionDispatch::Rescue","classes/ActionDispatch/Rescue.html#method-c-new","(app, rescuers = {}, &block)",""],["new","ActionDispatch::Response::Setup","classes/ActionDispatch/Response/Setup.html#method-c-new","(status = 200, header = {}, body = [])",""],["new","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-new","()",""],["new","ActionDispatch::Session::AbstractStore","classes/ActionDispatch/Session/AbstractStore.html#method-c-new","(app, options = {})",""],["new","ActionDispatch::Session::AbstractStore::OptionsHash","classes/ActionDispatch/Session/AbstractStore/OptionsHash.html#method-c-new","(by, env, default_options)",""],["new","ActionDispatch::Session::AbstractStore::SessionHash","classes/ActionDispatch/Session/AbstractStore/SessionHash.html#method-c-new","(by, env)",""],["new","ActionDispatch::Session::CookieStore","classes/ActionDispatch/Session/CookieStore.html#method-c-new","(app, options = {})",""],["new","ActionDispatch::Session::MemCacheStore","classes/ActionDispatch/Session/MemCacheStore.html#method-c-new","(app, options = {})",""],["new","ActionDispatch::ShowExceptions","classes/ActionDispatch/ShowExceptions.html#method-c-new","(app, consider_all_requests_local = false)",""],["new","ActionDispatch::Static","classes/ActionDispatch/Static.html#method-c-new","(app, root)",""],["new","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-c-new","(env = {})",""],["new","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-c-new","(env = {})",""],["new","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-new","(method_name=nil, *args)","<p>Instantiate a new mailer object. If <code>method_name</code> is not\n<code>nil</code>, the mailer will be initialized according …\n"],["new","ActionMailer::Base::DeprecatedHeaderProxy","classes/ActionMailer/Base/DeprecatedHeaderProxy.html#method-c-new","(message)",""],["new","ActionView::FileSystemResolver","classes/ActionView/FileSystemResolver.html#method-c-new","(path)",""],["new","ActionView::FixtureResolver","classes/ActionView/FixtureResolver.html#method-c-new","(hash = {})",""],["new","ActionView::Helpers::AtomFeedHelper::AtomBuilder","classes/ActionView/Helpers/AtomFeedHelper/AtomBuilder.html#method-c-new","(xml)",""],["new","ActionView::Helpers::AtomFeedHelper::AtomFeedBuilder","classes/ActionView/Helpers/AtomFeedHelper/AtomFeedBuilder.html#method-c-new","(xml, view, feed_options = {})",""],["new","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-c-new","(object_name, object, template, options, proc)",""],["new","ActionView::Helpers::NumberHelper::InvalidNumberError","classes/ActionView/Helpers/NumberHelper/InvalidNumberError.html#method-c-new","(number)",""],["new","ActionView::OutputBuffer","classes/ActionView/OutputBuffer.html#method-c-new","(*)",""],["new","ActionView::Partials::PartialRenderer","classes/ActionView/Partials/PartialRenderer.html#method-c-new","(view_context, options, block)",""],["new","ActionView::Resolver","classes/ActionView/Resolver.html#method-c-new","()",""],["new","ActionView::Template","classes/ActionView/Template.html#method-c-new","(source, identifier, handler, details)",""],["new","ActionView::TestCase::Behavior::ClassMethods","classes/ActionView/TestCase/Behavior/ClassMethods.html#method-i-new","(*)",""],["new","ActionView::TestCase::TestController","classes/ActionView/TestCase/TestController.html#method-c-new","()",""],["new","ActiveModel::AttributeMethods::ClassMethods::AttributeMethodMatcher","classes/ActiveModel/AttributeMethods/ClassMethods/AttributeMethodMatcher.html#method-c-new","(options = {})",""],["new","ActiveModel::BlockValidator","classes/ActiveModel/BlockValidator.html#method-c-new","(options, &block)",""],["new","ActiveModel::EachValidator","classes/ActiveModel/EachValidator.html#method-c-new","(options)","<p>Returns a new validator instance. All options will be available via the\n<code>options</code> reader, however the  …\n"],["new","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-c-new","(base)","<p>Pass in the instance of the object that is using the errors object.\n\n<pre><code>class Person\n  def initialize\n    ...\n</code></pre>\n"],["new","ActiveModel::Name","classes/ActiveModel/Name.html#method-c-new","(klass)",""],["new","ActiveModel::Observer","classes/ActiveModel/Observer.html#method-c-new","()","<p>Start observing the declared classes and their subclasses.\n"],["new","ActiveModel::Validations::AcceptanceValidator","classes/ActiveModel/Validations/AcceptanceValidator.html#method-c-new","(options)",""],["new","ActiveModel::Validations::LengthValidator","classes/ActiveModel/Validations/LengthValidator.html#method-c-new","(options)",""],["new","ActiveModel::Validations::NumericalityValidator","classes/ActiveModel/Validations/NumericalityValidator.html#method-c-new","(options)",""],["new","ActiveModel::Validator","classes/ActiveModel/Validator.html#method-c-new","(options)","<p>Accepts options that will be made available through the\n<code>options</code> reader.\n"],["new","ActiveRecord::AttributeAssignmentError","classes/ActiveRecord/AttributeAssignmentError.html#method-c-new","(message, exception, attribute)",""],["new","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-new","(attributes = nil)","<p>New objects can be instantiated as either empty (pass no construction\nparameter) or pre-set with attributes …\n"],["new","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-c-new","(name, default, sql_type = nil, null = true)","<p>Instantiates a new column in the table.\n<p><code>name</code> is the column&#39;s name, such as\n<code>supplier_id</code> in <code>supplier_id</code> …\n"],["new","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-c-new","(pools = {})",""],["new","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-c-new","(spec)","<p>Creates a new ConnectionPool object. <code>spec</code> is a\nConnectionSpecification object which describes database …\n"],["new","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-c-new","(connection, logger, connection_options, config)",""],["new","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-c-new","(connection, logger, connection_parameters, config)","<p>Initializes and connects a PostgreSQL adapter.\n"],["new","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-c-new","(connection, logger, config)",""],["new","ActiveRecord::ConnectionAdapters::SQLiteAdapter::Version","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter/Version.html#method-c-new","(version_string)",""],["new","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-c-new","(table_name, base)",""],["new","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-c-new","(base)",""],["new","ActiveRecord::DynamicFinderMatch","classes/ActiveRecord/DynamicFinderMatch.html#method-c-new","(finder, instantiator, bang, attribute_names)",""],["new","ActiveRecord::DynamicScopeMatch","classes/ActiveRecord/DynamicScopeMatch.html#method-c-new","(scope, attribute_names)",""],["new","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-c-new","()",""],["new","ActiveRecord::MultiparameterAssignmentErrors","classes/ActiveRecord/MultiparameterAssignmentErrors.html#method-c-new","(errors)",""],["new","ActiveRecord::Observer","classes/ActiveRecord/Observer.html#method-c-new","()",""],["new","ActiveRecord::PredicateBuilder","classes/ActiveRecord/PredicateBuilder.html#method-c-new","(engine)",""],["new","ActiveRecord::QueryCache","classes/ActiveRecord/QueryCache.html#method-c-new","(app)",""],["new","ActiveRecord::RecordInvalid","classes/ActiveRecord/RecordInvalid.html#method-c-new","(record)",""],["new","ActiveRecord::Reflection::MacroReflection","classes/ActiveRecord/Reflection/MacroReflection.html#method-c-new","(macro, name, options, active_record)",""],["new","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-c-new","(klass, table)",""],["new","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-new","(*args, &block)",""],["new","ActiveRecord::SessionStore::Session","classes/ActiveRecord/SessionStore/Session.html#method-c-new","(attributes = nil)",""],["new","ActiveRecord::SessionStore::SqlBypass","classes/ActiveRecord/SessionStore/SqlBypass.html#method-c-new","(attributes)","<p>Look for normal and marshaled data, self.find_by_session_id&#39;s way of\ntelling us to postpone unmarshaling …\n"],["new","ActiveRecord::Validations::UniquenessValidator","classes/ActiveRecord/Validations/UniquenessValidator.html#method-c-new","(options)",""],["new","ActiveRecord::WrappedDatabaseException","classes/ActiveRecord/WrappedDatabaseException.html#method-c-new","(message, original_exception)",""],["new","ActiveSupport::BacktraceCleaner","classes/ActiveSupport/BacktraceCleaner.html#method-c-new","()",""],["new","ActiveSupport::BufferedLogger","classes/ActiveSupport/BufferedLogger.html#method-c-new","(log, level = DEBUG)",""],["new","ActiveSupport::Cache::CompressedMemCacheStore","classes/ActiveSupport/Cache/CompressedMemCacheStore.html#method-c-new","(*args)",""],["new","ActiveSupport::Cache::Entry","classes/ActiveSupport/Cache/Entry.html#method-c-new","(value, options = {})","<p>Create a new cache entry for the specified value. Options supported are\n<code>:compress</code>, <code>:compress_threshold</code> …\n"],["new","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-c-new","(cache_path, options = nil)",""],["new","ActiveSupport::Cache::MemCacheStore","classes/ActiveSupport/Cache/MemCacheStore.html#method-c-new","(*addresses)","<p>Creates a new MemCacheStore object, with the given memcached server\naddresses. Each address is either …\n"],["new","ActiveSupport::Cache::MemoryStore","classes/ActiveSupport/Cache/MemoryStore.html#method-c-new","(options = nil)",""],["new","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-c-new","(options = nil)","<p>Create a new cache. The options will be passed to any write method calls\nexcept for :namespace which …\n"],["new","ActiveSupport::Cache::Strategy::LocalCache::LocalStore","classes/ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-c-new","()",""],["new","ActiveSupport::Cache::SynchronizedMemoryStore","classes/ActiveSupport/Cache/SynchronizedMemoryStore.html#method-c-new","(*args)",""],["new","ActiveSupport::Callbacks::Callback","classes/ActiveSupport/Callbacks/Callback.html#method-c-new","(chain, filter, kind, options, klass)",""],["new","ActiveSupport::Callbacks::CallbackChain","classes/ActiveSupport/Callbacks/CallbackChain.html#method-c-new","(name, config)",""],["new","ActiveSupport::Dependencies::Reference","classes/ActiveSupport/Dependencies/Reference.html#method-c-new","(name)",""],["new","ActiveSupport::Dependencies::WatchStack","classes/ActiveSupport/Dependencies/WatchStack.html#method-c-new","()","<p>@watching is a stack of lists of constants being watched. For instance, if\nparent.rb is autoloaded, the …\n"],["new","ActiveSupport::FileUpdateChecker","classes/ActiveSupport/FileUpdateChecker.html#method-c-new","(paths, calculate=false, &block)",""],["new","ActiveSupport::Gzip::Stream","classes/ActiveSupport/Gzip/Stream.html#method-c-new","(*)",""],["new","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-c-new","(constructor = {})",""],["new","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-c-new","(constructor = {})",""],["new","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-c-new","()",""],["new","ActiveSupport::InheritableOptions","classes/ActiveSupport/InheritableOptions.html#method-c-new","(parent)",""],["new","ActiveSupport::JSON::Encoding::Encoder","classes/ActiveSupport/JSON/Encoding/Encoder.html#method-c-new","(options = nil)",""],["new","ActiveSupport::LogSubscriber::TestHelper::MockLogger","classes/ActiveSupport/LogSubscriber/TestHelper/MockLogger.html#method-c-new","(level = DEBUG)",""],["new","ActiveSupport::MessageEncryptor","classes/ActiveSupport/MessageEncryptor.html#method-c-new","(secret, cipher = 'aes-256-cbc')",""],["new","ActiveSupport::MessageVerifier","classes/ActiveSupport/MessageVerifier.html#method-c-new","(secret, digest = 'SHA1')",""],["new","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-c-new","(string)","<p>Creates a new Chars instance by wrapping <em>string</em>.\n"],["new","ActiveSupport::Multibyte::Unicode::UnicodeDatabase","classes/ActiveSupport/Multibyte/Unicode/UnicodeDatabase.html#method-c-new","()",""],["new","ActiveSupport::Notifications::Event","classes/ActiveSupport/Notifications/Event.html#method-c-new","(name, start, ending, transaction_id, payload)",""],["new","ActiveSupport::Notifications::Fanout","classes/ActiveSupport/Notifications/Fanout.html#method-c-new","()",""],["new","ActiveSupport::Notifications::Instrumenter","classes/ActiveSupport/Notifications/Instrumenter.html#method-c-new","(notifier)",""],["new","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-c-new","(*)",""],["new","ActiveSupport::SafeBuffer::SafeConcatError","classes/ActiveSupport/SafeBuffer/SafeConcatError.html#method-c-new","()",""],["new","ActiveSupport::Testing::Performance::Metrics::Base","classes/ActiveSupport/Testing/Performance/Metrics/Base.html#method-c-new","()",""],["new","ActiveSupport::Testing::Performance::Metrics::CpuTime","classes/ActiveSupport/Testing/Performance/Metrics/CpuTime.html#method-c-new","(*args)",""],["new","ActiveSupport::Testing::Performance::Performer","classes/ActiveSupport/Testing/Performance/Performer.html#method-c-new","(harness, metric)",""],["new","ActiveSupport::Testing::Performance::Profiler","classes/ActiveSupport/Testing/Performance/Profiler.html#method-c-new","(*args)",""],["new","ActiveSupport::Testing::ProxyTestResult","classes/ActiveSupport/Testing/ProxyTestResult.html#method-c-new","()",""],["new","ActiveSupport::Testing::RemoteError","classes/ActiveSupport/Testing/RemoteError.html#method-c-new","(exception)",""],["new","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-c-new","(utc_time, time_zone, local_time = nil, period = nil)",""],["new","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-c-new","(name, utc_offset = nil, tzinfo = nil)","<p>Create a new TimeZone object with the given name and offset. The offset is\nthe number of seconds that …\n"],["new","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-new","(name)","<p>Return a TimeZone instance with the given name, or <code>nil</code> if no\nsuch TimeZone instance exists. (This exists …\n"],["new","ArJdbcMySQL::Error","classes/ArJdbcMySQL/Error.html#method-c-new","(msg)",""],["new","Commands::Info","classes/Commands/Info.html#method-c-new","(base_command)",""],["new","Commands::Install","classes/Commands/Install.html#method-c-new","(base_command)",""],["new","Commands::Plugin","classes/Commands/Plugin.html#method-c-new","()",""],["new","Commands::Remove","classes/Commands/Remove.html#method-c-new","(base_command)",""],["new","Fixtures","classes/Fixtures.html#method-c-new","(connection, table_name, class_name, fixture_path, file_filter = DEFAULT_FILTER_RE)",""],["new","HTML::Selector","classes/HTML/Selector.html#method-c-new","(selector, *values)","<p>Creates a new selector from a CSS 2 selector expression.\n<p>The first argument is the selector expression. …\n"],["new","Mime::Type","classes/Mime/Type.html#method-c-new","(string, symbol = nil, synonyms = [])",""],["new","Plugin","classes/Plugin.html#method-c-new","(uri, name = nil)",""],["new","Rails::API::Task","classes/Rails/API/Task.html#method-c-new","(name)",""],["new","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-c-new","(*)",""],["new","Rails::Application::Railties","classes/Rails/Application/Railties.html#method-c-new","(config)","<p>TODO Write tests for this behavior extracted from Application\n"],["new","Rails::BacktraceCleaner","classes/Rails/BacktraceCleaner.html#method-c-new","()",""],["new","Rails::Console","classes/Rails/Console.html#method-c-new","(app)",""],["new","Rails::DBConsole","classes/Rails/DBConsole.html#method-c-new","(app)",""],["new","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-c-new","(root=nil)",""],["new","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-c-new","(name)",""],["new","Rails::Generators::GeneratedAttribute","classes/Rails/Generators/GeneratedAttribute.html#method-c-new","(name, type)",""],["new","Rails::Initializable::Initializer","classes/Rails/Initializable/Initializer.html#method-c-new","(name, context, options, &block)",""],["new","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-c-new","(root, *paths)",""],["new","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-c-new","(path)",""],["new","Rails::Plugin","classes/Rails/Plugin.html#method-c-new","(root)",""],["new","Rails::Rack::Debugger","classes/Rails/Rack/Debugger.html#method-c-new","(app)",""],["new","Rails::Rack::LogTailer","classes/Rails/Rack/LogTailer.html#method-c-new","(app, log = nil)",""],["new","Rails::Rack::Logger","classes/Rails/Rack/Logger.html#method-c-new","(app)",""],["new","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-c-new","()",""],["new","Rails::Server","classes/Rails/Server.html#method-c-new","(*)",""],["new","RailsEnvironment","classes/RailsEnvironment.html#method-c-new","(dir)",""],["new","RecursiveHTTPFetcher","classes/RecursiveHTTPFetcher.html#method-c-new","(urls_to_fetch, level = 1, cwd = \".\")",""],["new","SourceAnnotationExtractor","classes/SourceAnnotationExtractor.html#method-c-new","(tag)",""],["new_cipher","ActiveSupport::MessageEncryptor","classes/ActiveSupport/MessageEncryptor.html#method-i-new_cipher","()",""],["new_connection","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-new_connection","()",""],["new_constants","ActiveSupport::Dependencies::WatchStack","classes/ActiveSupport/Dependencies/WatchStack.html#method-i-new_constants","()","<p>return a list of new constants found since the last call to watch_modules\n"],["new_date","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-i-new_date","(year, mon, mday)",""],["new_from_hash_copying_default","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-c-new_from_hash_copying_default","(hash)",""],["new_from_hash_copying_default","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-c-new_from_hash_copying_default","(hash)",""],["new_record?","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-new_record-3F","()","<p>Returns true if this object hasn&#39;t been saved yet – that is, a record\nfor the object doesn&#39;t …\n"],["new_session","Object","classes/Object.html#method-i-new_session","()","<p>create a new session. If a block is given, the new session will be yielded\nto the block before being …\n"],["new_time","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-i-new_time","(year, mon, mday, hour, min, sec, microsec)",""],["next_element","HTML::Selector","classes/HTML/Selector.html#method-i-next_element","(element, name = nil)","<p>Return the next element after this one. Skips sibling text nodes.\n<p>With the <code>name</code> argument, returns the …\n"],["next_id","ActiveSupport::Callbacks::Callback","classes/ActiveSupport/Callbacks/Callback.html#method-i-next_id","()",""],["next_month","Date","classes/Date.html#method-i-next_month","()","<p>Shorthand for months_since(1)\n"],["next_month","Time","classes/Time.html#method-i-next_month","()","<p>Short-hand for months_since(1)\n"],["next_selector","HTML::Selector","classes/HTML/Selector.html#method-i-next_selector","(statement, values)","<p>Called to create a dependent selector (sibling, descendant, etc). Passes\nthe remainder of the statement …\n"],["next_week","Date","classes/Date.html#method-i-next_week","(day = :monday)","<p>Returns a new Date/DateTime representing the start of the given day in next\nweek (default is Monday). …\n"],["next_week","Time","classes/Time.html#method-i-next_week","(day = :monday)","<p>Returns a new Time representing the start of the given day in next week\n(default is Monday).\n"],["next_year","Date","classes/Date.html#method-i-next_year","()","<p>Shorthand for years_since(1)\n"],["next_year","Time","classes/Time.html#method-i-next_year","()","<p>Short-hand for years_since(1)\n"],["nibble","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-nibble","(c)",""],["no_color!","Rails::Generators","classes/Rails/Generators.html#method-c-no_color-21","()","<p>Remove the color from output.\n"],["noise","ActiveSupport::BacktraceCleaner","classes/ActiveSupport/BacktraceCleaner.html#method-i-noise","(backtrace)",""],["nonempty_ok_response?","ActionDispatch::Http::Cache::Response","classes/ActionDispatch/Http/Cache/Response.html#method-i-nonempty_ok_response-3F","()",""],["normalize","ActionDispatch::MiddlewareStack::Middleware","classes/ActionDispatch/MiddlewareStack/Middleware.html#method-i-normalize","(object)",""],["normalize","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-normalize","(form = nil)","<p>Returns the KC normalization of the string by default. NFKC is considered\nthe best normalization form …\n"],["normalize","ActiveSupport::Multibyte::Unicode","classes/ActiveSupport/Multibyte/Unicode.html#method-i-normalize","(string, form=nil)","<p>Returns the KC normalization of the string by default. NFKC is considered\nthe best normalization form …\n"],["normalize!","ActionController::Caching::Actions::ActionCachePath","classes/ActionController/Caching/Actions/ActionCachePath.html#method-i-normalize-21","(path)",""],["normalize_argument_to_redirection","ActionDispatch::Assertions::ResponseAssertions","classes/ActionDispatch/Assertions/ResponseAssertions.html#method-i-normalize_argument_to_redirection","(fragment)",""],["normalize_name","ActionDispatch::Routing::Mapper","classes/ActionDispatch/Routing/Mapper.html#method-c-normalize_name","(name)",""],["normalize_options!","ActiveSupport::Callbacks::Callback","classes/ActiveSupport/Callbacks/Callback.html#method-i-normalize_options-21","(options)",""],["normalize_parameters","ActionDispatch::Http::Parameters","classes/ActionDispatch/Http/Parameters.html#method-i-normalize_parameters","(value)","<p>Convert nested Hash to HashWithIndifferentAccess\n"],["normalize_parameters","ActionDispatch::Http::Upload","classes/ActionDispatch/Http/Upload.html#method-i-normalize_parameters","(value)","<p>Convert nested Hash to HashWithIndifferentAccess and replace file upload\nhash with UploadedFile objects …\n"],["normalize_path","ActionDispatch::Routing::Mapper","classes/ActionDispatch/Routing/Mapper.html#method-c-normalize_path","(path)","<p>Invokes Rack::Mount::Utils.normalize path and ensure that (:locale) becomes\n(/:locale) instead of /(:locale). …\n"],["not_modified?","ActionDispatch::Http::Cache::Request","classes/ActionDispatch/Http/Cache/Request.html#method-i-not_modified-3F","(modified_at)",""],["notice","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-notice","()","<p>Convenience accessor for flash\n"],["notice=","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-notice-3D","(message)","<p>Convenience accessor for flash=\n"],["notifier","ActiveSupport::Notifications","classes/ActiveSupport/Notifications.html#method-i-notifier","()",""],["notify_observers","ActiveModel::Observing","classes/ActiveModel/Observing.html#method-i-notify_observers","(method)","<p>Fires notifications to model&#39;s observers\n<p>def save\n\n<pre><code>notify_observers(:before_save)\n...\nnotify_observers(:after_save)</code></pre>\n"],["notify_observers","ActiveModel::Observing::ClassMethods","classes/ActiveModel/Observing/ClassMethods.html#method-i-notify_observers","(*arg)",""],["now","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-now","()","<p>Sets a flash that will not be available to the next action, only to the\ncurrent.\n\n<pre><code>flash.now[:message] = ...</code></pre>\n"],["now","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-now","()","<p>Returns an ActiveSupport::TimeWithZone instance representing the current\ntime in the time zone represented …\n"],["nth_child","HTML::Selector","classes/HTML/Selector.html#method-i-nth_child","(a, b, of_type, reverse)","<p>Returns a lambda that can match an element against the nth-child pseudo\nclass, given the following arguments: …\n"],["nullify_has_many_dependencies","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-nullify_has_many_dependencies","(record, reflection_name, association_class, primary_key_name, dependent_conditions)",""],["nulltok","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-nulltok","(s)",""],["number?","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-i-number-3F","()","<p>Returns <code>true</code> if the column is either of type integer, float or\ndecimal.\n"],["number_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-number_field","(object_name, method, options = {})","<p>Returns an input tag of type “number”.\n<p>Options\n<p>Accepts same options as number_field_tag\n"],["number_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-number_field_tag","(name, value = nil, options = {})","<p>Creates a number field.\n<p>Options\n<p><code>:min</code> - The minimum acceptable value.\n"],["number_to_currency","ActionView::Helpers::NumberHelper","classes/ActionView/Helpers/NumberHelper.html#method-i-number_to_currency","(number, options = {})","<p>Formats a <code>number</code> into a currency string (e.g., $13.65). You\ncan customize the format in the <code>options</code> hash. …\n"],["number_to_human","ActionView::Helpers::NumberHelper","classes/ActionView/Helpers/NumberHelper.html#method-i-number_to_human","(number, options = {})","<p>Pretty prints (formats and approximates) a number in a way it is more\nreadable by humans (eg.: 1200000000 …\n"],["number_to_human_size","ActionView::Helpers::NumberHelper","classes/ActionView/Helpers/NumberHelper.html#method-i-number_to_human_size","(number, options = {})","<p>Formats the bytes in <code>number</code> into a more understandable\nrepresentation (e.g., giving it 1500 yields 1.5 …\n"],["number_to_percentage","ActionView::Helpers::NumberHelper","classes/ActionView/Helpers/NumberHelper.html#method-i-number_to_percentage","(number, options = {})","<p>Formats a <code>number</code> as a percentage string (e.g., 65%). You can\ncustomize the format in the <code>options</code> hash. …\n"],["number_to_phone","ActionView::Helpers::NumberHelper","classes/ActionView/Helpers/NumberHelper.html#method-i-number_to_phone","(number, options = {})","<p>Formats a <code>number</code> into a US phone number (e.g., (555)\n123-9876). You can customize the format in the  …\n"],["number_with_delimiter","ActionView::Helpers::NumberHelper","classes/ActionView/Helpers/NumberHelper.html#method-i-number_with_delimiter","(number, options = {})","<p>Formats a <code>number</code> with grouped thousands using\n<code>delimiter</code> (e.g., 12,324). You can customize the format …\n"],["number_with_precision","ActionView::Helpers::NumberHelper","classes/ActionView/Helpers/NumberHelper.html#method-i-number_with_precision","(number, options = {})","<p>Formats a <code>number</code> with the specified level of\n<code>:precision</code> (e.g., 112.32 has a precision of 2 if\n<code>:significant</code> …\n"],["numenc","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-numenc","(x)",""],["numtok","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-numtok","(s)",""],["object","ActionView::Helpers::ActiveModelInstanceTag","classes/ActionView/Helpers/ActiveModelInstanceTag.html#method-i-object","()",""],["object_from_yaml","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-object_from_yaml","(string)",""],["object_has_errors?","ActionView::Helpers::ActiveModelInstanceTag","classes/ActionView/Helpers/ActiveModelInstanceTag.html#method-i-object_has_errors-3F","()",""],["objectify_options","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-objectify_options","(options)",""],["objenc","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-objenc","(x)",""],["objparse","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-objparse","(ts)","<p>Parses an “object” in the sense of RFC 4627. Returns the parsed value and\nany trailing tokens. …\n"],["observe","ActiveModel::Observer","classes/ActiveModel/Observer.html#method-i-observe","(*models)","<p>Attaches the observer to the supplied model classes.\n"],["observed_class","ActiveModel::Observer","classes/ActiveModel/Observer.html#method-i-observed_class","()","<p>The class observed by default is inferred from the observer&#39;s class\nname:\n\n<pre><code>assert_equal Person, PersonObserver.observed_class</code></pre>\n"],["observed_classes","ActiveModel::Observer","classes/ActiveModel/Observer.html#method-i-observed_classes","()","<p>Returns an array of Classes to observe.\n<p>You can override this instead of using the <code>observe</code> helper.\n\n<pre><code>class ...\n</code></pre>\n"],["observed_descendants","ActiveRecord::Observer","classes/ActiveRecord/Observer.html#method-i-observed_descendants","()",""],["observers","ActiveModel::Observing::ClassMethods","classes/ActiveModel/Observing/ClassMethods.html#method-i-observers","()","<p>Gets the current observers.\n"],["observers=","ActiveModel::Observing::ClassMethods","classes/ActiveModel/Observing/ClassMethods.html#method-i-observers-3D","(*values)","<p>Active Model Observers Activation\n<p>Activates the observers assigned. Examples:\n\n<pre><code># Calls PersonObserver.instance ...</code></pre>\n"],["odd?","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-i-odd-3F","()",""],["offset","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-offset","(value)",""],["on","ActiveModel::DeprecatedErrorMethods","classes/ActiveModel/DeprecatedErrorMethods.html#method-i-on","(attribute)",""],["on_base","ActiveModel::DeprecatedErrorMethods","classes/ActiveModel/DeprecatedErrorMethods.html#method-i-on_base","()",""],["on_cdata_block","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_cdata_block","(string)",""],["on_characters","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_characters","(string)",""],["on_end_document","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_end_document","()",""],["on_end_element","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_end_element","(name)",""],["on_load","ActiveSupport","classes/ActiveSupport.html#method-c-on_load","(name, options = {}, &block)",""],["on_start_document","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_start_document","()",""],["on_start_element","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_start_element","(name, attrs = {})",""],["only","ActiveRecord::SpawnMethods","classes/ActiveRecord/SpawnMethods.html#method-i-only","(*onlies)",""],["only_child","HTML::Selector","classes/HTML/Selector.html#method-i-only_child","(of_type)","<p>Creates a only child lambda. Pass <code>of-type</code> to only look at\nelements of its type.\n"],["open","ActionDispatch::Http::UploadedFile","classes/ActionDispatch/Http/UploadedFile.html#method-i-open","()",""],["open_log","ActiveSupport::BufferedLogger","classes/ActiveSupport/BufferedLogger.html#method-i-open_log","(log, mode)",""],["open_session","ActionDispatch::Integration::Runner","classes/ActionDispatch/Integration/Runner.html#method-i-open_session","(app = nil)","<p>Open a new session instance. If a block is given, the new session is\nyielded to the block before being …\n"],["open_transactions","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-open_transactions","()",""],["operation_over_aggregate_column","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-operation_over_aggregate_column","(column, operation, distinct)",""],["opt_parser","Rails::Server","classes/Rails/Server.html#method-i-opt_parser","()",""],["option_groups_from_collection_for_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-option_groups_from_collection_for_select","(collection, group_method, group_label_method, option_key_method, option_value_method, selected_key = nil)","<p>Returns a string of <code>&lt;option&gt;</code> tags, like\n<code>options_from_collection_for_select</code>, but groups them by …\n"],["option_html_attributes","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-option_html_attributes","(element)",""],["option_text_and_value","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-option_text_and_value","(option)",""],["option_value_selected?","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-option_value_selected-3F","(value, selected)",""],["options","Commands::Info","classes/Commands/Info.html#method-i-options","()",""],["options","Commands::Install","classes/Commands/Install.html#method-i-options","()",""],["options","Commands::Plugin","classes/Commands/Plugin.html#method-i-options","()",""],["options","Commands::Remove","classes/Commands/Remove.html#method-i-options","()",""],["options_for","ActiveSupport::JSON::Encoding::Encoder","classes/ActiveSupport/JSON/Encoding/Encoder.html#method-i-options_for","(value)",""],["options_for_ajax","ActionView::Helpers::PrototypeHelper","classes/ActionView/Helpers/PrototypeHelper.html#method-i-options_for_ajax","(options)",""],["options_for_javascript","ActionView::Helpers::PrototypeHelper","classes/ActionView/Helpers/PrototypeHelper.html#method-i-options_for_javascript","(options)",""],["options_for_javascript","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-options_for_javascript","(options)",""],["options_for_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-options_for_select","(container, selected = nil)","<p>Accepts a container (hash, array, enumerable, your type) and returns a\nstring of option tags. Given a …\n"],["options_from_collection_for_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-options_from_collection_for_select","(collection, value_method, text_method, selected = nil)","<p>Returns a string of option tags that have been compiled by iterating over\nthe <code>collection</code> and assigning …\n"],["options_include_default?","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-options_include_default-3F","(options)",""],["ord","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-ord","()","<p>Returns the codepoint of the first character in the string.\n<p>Example:\n\n<pre><code>&#39;こんにちは&#39;.mb_chars.ord # =&gt; 12371\n</code></pre>\n"],["ord","String","classes/String.html#method-i-ord","()","<p>Returns the codepoint of the first character of the string, assuming a\nsingle-byte character encoding: …\n"],["order","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-order","(*args)",""],["ordinalize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-ordinalize","(number)","<p>Turns a number into an ordinal string used to denote the position in an\nordered sequence such as 1st, …\n"],["ordinalize","Integer","classes/Integer.html#method-i-ordinalize","()","<p>Ordinalize turns a number into an ordinal string used to denote the\nposition in an ordered sequence such …\n"],["original_concat","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-original_concat","(value)",""],["orm_class","Rails::Generators::ResourceHelpers","classes/Rails/Generators/ResourceHelpers.html#method-i-orm_class","()","<p>Loads the ORM::Generators::ActiveModel class. This class is responsable to\ntell scaffold entities how …\n"],["orm_instance","Rails::Generators::ResourceHelpers","classes/Rails/Generators/ResourceHelpers.html#method-i-orm_instance","(name=singular_table_name)","<p>Initialize ORM::Generators::ActiveModel to access instance methods.\n"],["output_filename","ActiveSupport::Testing::Performance::Benchmarker","classes/ActiveSupport/Testing/Performance/Benchmarker.html#method-i-output_filename","()",""],["output_filename","ActiveSupport::Testing::Performance::Performer","classes/ActiveSupport/Testing/Performance/Performer.html#method-i-output_filename","()",""],["output_filename","ActiveSupport::Testing::Performance::Profiler","classes/ActiveSupport/Testing/Performance/Profiler.html#method-i-output_filename","(printer_class)",""],["outside_transaction?","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-outside_transaction-3F","()","<p>Checks whether there is currently no transaction active. This is done by\nquerying the database driver, …\n"],["outside_transaction?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-outside_transaction-3F","()",""],["overlaps?","Range","classes/Range.html#method-i-overlaps-3F","(other)","<p>Compare two ranges and see if they overlap each other\n\n<pre><code>(1..5).overlaps?(4..6) # =&gt; true\n(1..5).overlaps?(7..9) ...\n</code></pre>\n"],["override_keys","ActionDispatch::Routing::Mapper::Scoping","classes/ActionDispatch/Routing/Mapper/Scoping.html#method-i-override_keys","(child)",""],["page","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-page","()",""],["page_cache_file","ActionController::Caching::Pages::ClassMethods","classes/ActionController/Caching/Pages/ClassMethods.html#method-i-page_cache_file","(path, extension)",""],["page_cache_path","ActionController::Caching::Pages::ClassMethods","classes/ActionController/Caching/Pages/ClassMethods.html#method-i-page_cache_path","(path, extension = nil)",""],["pairparse","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-pairparse","(ts)","<p>Parses a “member” in the sense of RFC 4627. Returns the parsed values and\nany trailing tokens. …\n"],["parameter_filter","ActionDispatch::Http::FilterParameters","classes/ActionDispatch/Http/FilterParameters.html#method-i-parameter_filter","()",""],["parameter_filter_for","ActionDispatch::Http::FilterParameters","classes/ActionDispatch/Http/FilterParameters.html#method-i-parameter_filter_for","(filters)",""],["parameterize","ActionDispatch::Assertions::ResponseAssertions","classes/ActionDispatch/Assertions/ResponseAssertions.html#method-i-parameterize","(value)","<p>Proxy to to_param if the object will respond to it.\n"],["parameterize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-parameterize","(string, sep = '-')","<p>Replaces special characters in a string so that it may be used as part of a\n&#39;pretty&#39; URL.\n<p>Examples …\n"],["parameterize","String","classes/String.html#method-i-parameterize","(sep = '-')","<p>Replaces special characters in a string so that it may be used as part of a\n&#39;pretty&#39; URL.\n<p>Examples …\n"],["parameters","ActionDispatch::Http::Parameters","classes/ActionDispatch/Http/Parameters.html#method-i-parameters","()","<p>Returns both GET and POST parameters in a single hash.\n"],["params","ActionController::Metal","classes/ActionController/Metal.html#method-i-params","()",""],["params","ActionDispatch::Http::Parameters","classes/ActionDispatch/Http/Parameters.html#method-i-params","()",""],["params=","ActionController::Metal","classes/ActionController/Metal.html#method-i-params-3D","(val)",""],["parent","Module","classes/Module.html#method-i-parent","()","<p>Returns the module which contains this one according to its name.\n\n<pre><code>module M\n  module N\n  end\nend\nX = M::N ...\n</code></pre>\n"],["parent_name","Module","classes/Module.html#method-i-parent_name","()","<p>Returns the name of the module containing this one.\n\n<pre><code>M::N.parent_name # =&gt; &quot;M&quot;\n</code></pre>\n"],["parent_of?","ActiveSupport::Notifications::Event","classes/ActiveSupport/Notifications/Event.html#method-i-parent_of-3F","(event)",""],["parents","Module","classes/Module.html#method-i-parents","()","<p>Returns all the parents of this module according to its name, ordered from\nnested outwards. The receiver …\n"],["parse","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-parse","(str, now=now)","<p>Method for creating new ActiveSupport::TimeWithZone instance in time zone\nof <code>self</code> from parsed string. …\n"],["parse","ActiveSupport::XmlMini_LibXMLSAX","classes/ActiveSupport/XmlMini_LibXMLSAX.html#method-i-parse","(data)",""],["parse","ActiveSupport::XmlMini_NokogiriSAX","classes/ActiveSupport/XmlMini_NokogiriSAX.html#method-i-parse","(data)",""],["parse","Mime::Type","classes/Mime/Type.html#method-i-parse","(accept_header)",""],["parse!","Commands::Info","classes/Commands/Info.html#method-i-parse-21","(args)",""],["parse!","Commands::Install","classes/Commands/Install.html#method-i-parse-21","(args)",""],["parse!","Commands::Plugin","classes/Commands/Plugin.html#method-i-parse-21","(args=ARGV)",""],["parse!","Commands::Plugin","classes/Commands/Plugin.html#method-c-parse-21","(args=ARGV)",""],["parse!","Commands::Remove","classes/Commands/Remove.html#method-i-parse-21","(args)",""],["parse!","Rails::Server::Options","classes/Rails/Server/Options.html#method-i-parse-21","(args)",""],["parse_formatted_parameters","ActionDispatch::ParamsParser","classes/ActionDispatch/ParamsParser.html#method-i-parse_formatted_parameters","(env)",""],["parse_query","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-parse_query","(qs)",""],["parse_raw_value_as_a_number","ActiveModel::Validations::NumericalityValidator","classes/ActiveModel/Validations/NumericalityValidator.html#method-i-parse_raw_value_as_a_number","(raw_value)",""],["parse_raw_value_as_an_integer","ActiveModel::Validations::NumericalityValidator","classes/ActiveModel/Validations/NumericalityValidator.html#method-i-parse_raw_value_as_an_integer","(raw_value)",""],["parse_yaml_string","Fixtures","classes/Fixtures.html#method-i-parse_yaml_string","(fixture_content)",""],["partial_path","ActionView::Partials::PartialRenderer","classes/ActionView/Partials/PartialRenderer.html#method-i-partial_path","(object = @object)",""],["password_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-password_field","(object_name, method, options = {})","<p>Returns an input tag of the “password” type tailored for accessing a\nspecified attribute (identified …\n"],["password_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-password_field_tag","(name = \"password\", value = nil, options = {})","<p>Creates a password field, a masked text field that will hide the users\ninput behind a mask character. …\n"],["past?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-past-3F","()",""],["past?","Date","classes/Date.html#method-i-past-3F","()","<p>Returns true if the Date object&#39;s date lies in the past. Otherwise\nreturns false.\n"],["past?","DateTime","classes/DateTime.html#method-i-past-3F","()","<p>Tells whether the DateTime object&#39;s datetime lies in the past\n"],["past?","Time","classes/Time.html#method-i-past-3F","()","<p>Tells whether the Time object&#39;s time lies in the past\n"],["path","ActionDispatch::Http::UploadedFile","classes/ActionDispatch/Http/UploadedFile.html#method-i-path","()",""],["path","LoadError","classes/LoadError.html#method-i-path","()",""],["path","LoadError","classes/LoadError.html#method-i-path","()",""],["path=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-path-3D","(path)",""],["path_for_action","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-path_for_action","(action, path)",""],["path_parameters","ActionDispatch::Http::Parameters","classes/ActionDispatch/Http/Parameters.html#method-i-path_parameters","()","<p>Returns a hash with the parameters used to form the path of the request.\nReturned hash keys are strings: …\n"],["path_to_audio","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-path_to_audio","(source)",""],["path_to_image","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-path_to_image","(source)",""],["path_to_javascript","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-path_to_javascript","(source)",""],["path_to_stylesheet","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-path_to_stylesheet","(source)",""],["path_to_video","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-path_to_video","(source)",""],["paths","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-paths","()",""],["paths","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-i-paths","()",""],["paths","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-paths","()",""],["pending","ActiveSupport::Testing::Pending","classes/ActiveSupport/Testing/Pending.html#method-i-pending","(description = \"\", &block)",""],["perform_calculation","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-perform_calculation","(operation, column_name, options = {})",""],["perform_validations","ActiveRecord::Validations","classes/ActiveRecord/Validations.html#method-i-perform_validations","(options={})",""],["performed?","ActionController::Compatibility","classes/ActionController/Compatibility.html#method-i-performed-3F","()",""],["period","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-period","()","<p>Returns the underlying TZInfo::TimezonePeriod.\n"],["period_for_local","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-period_for_local","(time, dst=true)","<p>Available so that TimeZone instances respond like TZInfo::Timezone\ninstances\n"],["period_for_utc","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-period_for_utc","(time)","<p>Available so that TimeZone instances respond like TZInfo::Timezone\ninstances\n"],["persisted?","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-persisted-3F","()","<p>Returns if the record is persisted, i.e. it&#39;s not a new record and it\nwas not destroyed.\n"],["persistent_session_id!","ActionDispatch::Session::CookieStore","classes/ActionDispatch/Session/CookieStore.html#method-i-persistent_session_id-21","(data, sid=nil)",""],["petabyte","Numeric","classes/Numeric.html#method-i-petabyte","()",""],["petabytes","Numeric","classes/Numeric.html#method-i-petabytes","()",""],["phone_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-phone_field","(object_name, method, options = {})",""],["phone_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-phone_field_tag","(name, value = nil, options = {})",""],["plugin","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-plugin","(name, options)","<p>Install a plugin. You must provide either a Subversion url or Git url.\n<p>For a Git-hosted plugin, you can …\n"],["plugin_dir","Rails::Generators::PluginGenerator","classes/Rails/Generators/PluginGenerator.html#method-i-plugin_dir","(join=nil)",""],["plugins","Rails::Application::Railties","classes/Rails/Application/Railties.html#method-i-plugins","()",""],["plural","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-c-plural","(record_or_class)","<p>Returns the plural class name of a record or class. Examples:\n\n<pre><code>ActiveModel::Naming.plural(post)        ...</code></pre>\n"],["plural","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-i-plural","(rule, replacement)","<p>Specifies a new pluralization rule and its replacement. The rule can either\nbe a string or a regular …\n"],["plural_file_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-plural_file_name","()",""],["plural_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-plural_name","()",""],["plural_table_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-plural_table_name","()",""],["pluralize","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-pluralize","(count, singular, plural = nil)","<p>Attempts to pluralize the <code>singular</code> word unless\n<code>count</code> is 1. If <code>plural</code> is supplied, it will use\nthat when …\n"],["pluralize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-pluralize","(word)","<p>Returns the plural form of the word in the string.\n<p>Examples:\n\n<pre><code>&quot;post&quot;.pluralize             # =&gt; &quot;posts&quot; ...\n</code></pre>\n"],["pluralize","String","classes/String.html#method-i-pluralize","()","<p>Returns the plural form of the word in the string.\n\n<pre><code>&quot;post&quot;.pluralize             # =&gt; &quot;posts&quot;\n&quot;octopus&quot;.pluralize ...\n</code></pre>\n"],["pluralize_table_names","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-pluralize_table_names","","<p>Indicates whether table names should be the pluralized versions of the\ncorresponding class names. If …\n"],["pluralize_table_names?","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-pluralize_table_names-3F","()",""],["polymorphic_path","ActionDispatch::Routing::PolymorphicRoutes","classes/ActionDispatch/Routing/PolymorphicRoutes.html#method-i-polymorphic_path","(record_or_hash_or_array, options = {})","<p>Returns the path component of a URL for the given record. It uses\n<code>polymorphic_url</code> with <code>:routing_type</code> …\n"],["polymorphic_url","ActionDispatch::Routing::PolymorphicRoutes","classes/ActionDispatch/Routing/PolymorphicRoutes.html#method-i-polymorphic_url","(record_or_hash_or_array, options = {})","<p>Constructs a call to a named RESTful route for the given record and returns\nthe resulting URL string. …\n"],["pop_d","RecursiveHTTPFetcher","classes/RecursiveHTTPFetcher.html#method-i-pop_d","()",""],["pop_modules","ActiveSupport::Dependencies::WatchStack","classes/ActiveSupport/Dependencies/WatchStack.html#method-i-pop_modules","(modules)",""],["populate_with_current_scope_attributes","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-populate_with_current_scope_attributes","()",""],["port","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-port","()","<p>Returns the port number of this request as an integer.\n"],["port=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-port-3D","(number)",""],["port_string","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-port_string","()","<p>Returns a port suffix like “:8080” if the port number of this request is\nnot the default HTTP …\n"],["post","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-post","(action, parameters = nil, session = nil, flash = nil)","<p>Executes a request simulating POST HTTP method and set/volley the response\n"],["post","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-post","(path, parameters = nil, headers = nil)","<p>Performs a POST request with the given parameters. See get() for more\ndetails.\n"],["post","ActionDispatch::Routing::Mapper::HttpHelpers","classes/ActionDispatch/Routing/Mapper/HttpHelpers.html#method-i-post","(*args, &block)","<p>Define a route that only recognizes HTTP POST. For supported arguments, see\n<code>match</code>.\n<p>Example:\n<p>post &#39;bacon&#39;, …\n"],["post?","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-post-3F","()","<p>Is this a POST request? Equivalent to <code>request.request_method ==\n:post</code>.\n"],["post_via_redirect","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-post_via_redirect","(path, parameters = nil, headers = nil)","<p>Performs a POST request, following any subsequent redirect. See\n<code>request_via_redirect</code> for more information. …\n"],["postgresql_version","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-postgresql_version","()","<p>Returns the version of the connected PostgreSQL version.\n"],["precisionless_round","Float","classes/Float.html#method-i-precisionless_round","(precision = nil)",""],["prefetch_primary_key?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-prefetch_primary_key-3F","(table_name = nil)","<p>Should primary key values be selected from their corresponding sequence\nbefore the insert statement? …\n"],["prefix_name_for_action","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-prefix_name_for_action","(as, action)",""],["preload","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-preload","(*args)",""],["preload_associations","ActiveRecord::AssociationPreload::ClassMethods","classes/ActiveRecord/AssociationPreload/ClassMethods.html#method-i-preload_associations","(records, associations, preload_options={})","<p>Eager loads the named associations for the given Active Record record(s).\n<p>In this description, &#39;association …\n"],["preload_belongs_to_association","ActiveRecord::AssociationPreload::ClassMethods","classes/ActiveRecord/AssociationPreload/ClassMethods.html#method-i-preload_belongs_to_association","(records, reflection, preload_options={})",""],["preload_has_and_belongs_to_many_association","ActiveRecord::AssociationPreload::ClassMethods","classes/ActiveRecord/AssociationPreload/ClassMethods.html#method-i-preload_has_and_belongs_to_many_association","(records, reflection, preload_options={})",""],["preload_has_many_association","ActiveRecord::AssociationPreload::ClassMethods","classes/ActiveRecord/AssociationPreload/ClassMethods.html#method-i-preload_has_many_association","(records, reflection, preload_options={})",""],["preload_has_one_association","ActiveRecord::AssociationPreload::ClassMethods","classes/ActiveRecord/AssociationPreload/ClassMethods.html#method-i-preload_has_one_association","(records, reflection, preload_options={})",""],["preload_one_association","ActiveRecord::AssociationPreload::ClassMethods","classes/ActiveRecord/AssociationPreload/ClassMethods.html#method-i-preload_one_association","(records, association, preload_options={})","<p>Preloads a specific named association for the given records. This is called\nby <code>preload_associations</code> as …\n"],["preload_through_records","ActiveRecord::AssociationPreload::ClassMethods","classes/ActiveRecord/AssociationPreload/ClassMethods.html#method-i-preload_through_records","(records, reflection, through_association)",""],["prepare!","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-prepare-21","()",""],["prepare!","ActionDispatch::Session::AbstractStore","classes/ActionDispatch/Session/AbstractStore.html#method-i-prepare-21","(env)",""],["prepare_controller_class","ActionController::TestCase::Behavior::ClassMethods","classes/ActionController/TestCase/Behavior/ClassMethods.html#method-i-prepare_controller_class","(new_class)",""],["prepare_destination","Rails::Generators::TestCase","classes/Rails/Generators/TestCase.html#method-i-prepare_destination","()",""],["prepend_view_path","AbstractController::ViewPaths","classes/AbstractController/ViewPaths.html#method-i-prepend_view_path","(path)",""],["prepend_view_path","AbstractController::ViewPaths::ClassMethods","classes/AbstractController/ViewPaths/ClassMethods.html#method-i-prepend_view_path","(path)","<p>Prepend a path to the list of view paths for this controller.\n<p>Parameters\n<p><code>path</code> - If a String is provided, …\n"],["presence","Object","classes/Object.html#method-i-presence","()","<p>Returns object if it&#39;s #present? otherwise returns nil. object.presence\nis equivalent to object.present …\n"],["present?","Object","classes/Object.html#method-i-present-3F","()","<p>An object is present if it&#39;s not blank.\n"],["prev_month","Date","classes/Date.html#method-i-prev_month","()","<p>Shorthand for months_ago(1)\n"],["prev_month","Time","classes/Time.html#method-i-prev_month","()","<p>Short-hand for months_ago(1)\n"],["prev_year","Date","classes/Date.html#method-i-prev_year","()","<p>Shorthand for years_ago(1)\n"],["prev_year","Time","classes/Time.html#method-i-prev_year","()","<p>Short-hand for years_ago(1)\n"],["previous_changes","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-previous_changes","()","<p>Map of attributes that were changed when the model was saved.\n\n<pre><code>person.name # =&gt; &#39;bob&#39;\nperson.name = &#39;robert&#39; ...\n</code></pre>\n"],["primary_key","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","classes/ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-primary_key","()","<p>Defines the primary key field – can be overridden in subclasses.\nOverwriting will negate any effect …\n"],["primary_key","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-primary_key","(table)","<p>Returns just a table&#39;s primary key\n"],["primary_key","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-primary_key","(table)","<p>Returns just a table&#39;s primary key\n"],["primary_key","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-primary_key","(name)","<p>Appends a primary key definition to the table definition. Can be called\nmultiple times, but this is probably …\n"],["primary_key","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-primary_key","()",""],["primary_key=","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","classes/ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-primary_key-3D","(value = nil, &block)",""],["primary_key_name","Fixtures","classes/Fixtures.html#method-i-primary_key_name","()",""],["primary_key_prefix_type","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-primary_key_prefix_type","","<p>Accessor for the prefix type that will be prepended to every primary key\ncolumn name. The options are …\n"],["prime_cache","ActiveSupport::Memoizable::InstanceMethods","classes/ActiveSupport/Memoizable/InstanceMethods.html#method-i-prime_cache","(*syms)",""],["process","AbstractController::Base","classes/AbstractController/Base.html#method-i-process","(action, *args)","<p>Calls the action going through the entire action dispatch stack.\n<p>The actual method that is called is determined …\n"],["process","ActionController::Middleware","classes/ActionController/Middleware.html#method-i-process","(action)",""],["process","ActionController::TemplateAssertions","classes/ActionController/TemplateAssertions.html#method-i-process","(*args)",""],["process","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-process","(action, parameters = nil, session = nil, flash = nil, http_method = 'GET')",""],["process","ActionDispatch::Integration::Session","classes/ActionDispatch/Integration/Session.html#method-i-process","(method, path, parameters = nil, rack_environment = nil)","<p>Performs the actual request.\n"],["process_action","AbstractController::Base","classes/AbstractController/Base.html#method-i-process_action","(method_name, *args)","<p>Call the action. Override this in a subclass to modify the behavior around\nprocessing an action. This …\n"],["process_action","AbstractController::Callbacks","classes/AbstractController/Callbacks.html#method-i-process_action","(method_name, *args)","<p>Override AbstractController::Base&#39;s process_action to run the\nprocess_action callbacks around the …\n"],["process_action","ActionController::Instrumentation","classes/ActionController/Instrumentation.html#method-i-process_action","(action, *args)",""],["process_action","ActionController::LogSubscriber","classes/ActionController/LogSubscriber.html#method-i-process_action","(event)",""],["process_action","ActionController::Rescue","classes/ActionController/Rescue.html#method-i-process_action","(*args)",""],["process_attributes_for","HTML::WhiteListSanitizer","classes/HTML/WhiteListSanitizer.html#method-i-process_attributes_for","(node, options)",""],["process_conditions_for_preload","ActiveRecord::AssociationPreload::ClassMethods","classes/ActiveRecord/AssociationPreload/ClassMethods.html#method-i-process_conditions_for_preload","(conditions, klass = self)",""],["process_node","HTML::FullSanitizer","classes/HTML/FullSanitizer.html#method-i-process_node","(node, result, options)",""],["process_node","HTML::LinkSanitizer","classes/HTML/LinkSanitizer.html#method-i-process_node","(node, result, options)",""],["process_node","HTML::Sanitizer","classes/HTML/Sanitizer.html#method-i-process_node","(node, result, options)",""],["process_node","HTML::WhiteListSanitizer","classes/HTML/WhiteListSanitizer.html#method-i-process_node","(node, result, options)",""],["process_view_paths","ActionView::Base","classes/ActionView/Base.html#method-c-process_view_paths","(value)",""],["process_with_new_base_test","ActionController::Testing","classes/ActionController/Testing.html#method-i-process_with_new_base_test","(request, response)","<p>TODO: Clean this up\n"],["profile","ActiveSupport::Testing::Performance::Metrics::Base","classes/ActiveSupport/Testing/Performance/Metrics/Base.html#method-i-profile","()",""],["properties","Rails::InfoController","classes/Rails/InfoController.html#method-i-properties","()",""],["property","Rails::Info","classes/Rails/Info.html#method-i-property","(name, value = nil)",""],["protect_against_forgery?","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-protect_against_forgery-3F","()",""],["protect_against_forgery?","ActionView::TestCase::Behavior","classes/ActionView/TestCase/Behavior.html#method-i-protect_against_forgery-3F","()",""],["protect_from_forgery","ActionController::RequestForgeryProtection::ClassMethods","classes/ActionController/RequestForgeryProtection/ClassMethods.html#method-i-protect_from_forgery","(options = {})","<p>Turn on request forgery protection. Bear in mind that only non-GET,\nHTML/JavaScript requests are checked. …\n"],["protected_attributes","ActiveModel::MassAssignmentSecurity::ClassMethods","classes/ActiveModel/MassAssignmentSecurity/ClassMethods.html#method-i-protected_attributes","()",""],["protocol","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-protocol","()","<p>Returns &#39;https://&#39; if this is an SSL request and &#39;http://&#39;\notherwise.\n"],["proxy_class","ActiveSupport::Multibyte","classes/ActiveSupport/Multibyte.html#method-c-proxy_class","()","<p>Returns the current proxy class\n"],["proxy_class=","ActiveSupport::Multibyte","classes/ActiveSupport/Multibyte.html#method-c-proxy_class-3D","(klass)","<p>The proxy class returned when calling mb_chars. You can use this accessor\nto configure your own proxy …\n"],["prune","ActiveSupport::Cache::MemoryStore","classes/ActiveSupport/Cache/MemoryStore.html#method-i-prune","(target_size, max_time = nil)","<p>To ensure entries fit within the specified memory prune the cache by\nremoving the least recently accessed …\n"],["pruning?","ActiveSupport::Cache::MemoryStore","classes/ActiveSupport/Cache/MemoryStore.html#method-i-pruning-3F","()","<p>Returns true if the cache is currently being pruned.\n"],["public_path","ActionDispatch::ShowExceptions","classes/ActionDispatch/ShowExceptions.html#method-i-public_path","()",""],["public_path","Rails","classes/Rails.html#method-i-public_path","()",""],["public_path=","Rails","classes/Rails.html#method-i-public_path-3D","(path)",""],["publish","ActiveSupport::Notifications::Fanout","classes/ActiveSupport/Notifications/Fanout.html#method-i-publish","(name, *args)",""],["push","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-push","(path)",""],["push","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-push","(*)",""],["push_d","RecursiveHTTPFetcher","classes/RecursiveHTTPFetcher.html#method-i-push_d","(dir)",""],["put","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-put","(action, parameters = nil, session = nil, flash = nil)","<p>Executes a request simulating PUT HTTP method and set/volley the response\n"],["put","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-put","(path, parameters = nil, headers = nil)","<p>Performs a PUT request with the given parameters. See get() for more\ndetails.\n"],["put","ActionDispatch::Routing::Mapper::HttpHelpers","classes/ActionDispatch/Routing/Mapper/HttpHelpers.html#method-i-put","(*args, &block)","<p>Define a route that only recognizes HTTP PUT. For supported arguments, see\n<code>match</code>.\n<p>Example:\n<p>put &#39;bacon&#39;, …\n"],["put?","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-put-3F","()","<p>Is this a PUT request? Equivalent to <code>request.request_method ==\n:put</code>.\n"],["put_via_redirect","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-put_via_redirect","(path, parameters = nil, headers = nil)","<p>Performs a PUT request, following any subsequent redirect. See\n<code>request_via_redirect</code> for more information. …\n"],["query","ActionView::FixtureResolver","classes/ActionView/FixtureResolver.html#method-i-query","(path, exts, formats)",""],["query","ActionView::NullResolver","classes/ActionView/NullResolver.html#method-i-query","(path, exts, formats)",""],["query","ActionView::PathResolver","classes/ActionView/PathResolver.html#method-i-query","(path, exts, formats)",""],["query_attribute","ActiveRecord::AttributeMethods::Query","classes/ActiveRecord/AttributeMethods/Query.html#method-i-query_attribute","(attr_name)",""],["query_parameters","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-query_parameters","()",""],["quote","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-quote","(value, column = nil)","<p>QUOTING ==================================================\n"],["quote","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote","(value, column = nil)","<p>Quotes the column value to help prevent SQL injection attacks.\n"],["quote_column_name","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_column_name","(column_name)","<p>Quotes the column name. Defaults to no quoting.\n"],["quote_columns","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-quote_columns","(quoter, hash)",""],["quote_string","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_string","(s)","<p>Quotes a string, escaping any &#39; (single quote) and \\ (backslash)\ncharacters.\n"],["quote_table_name","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-quote_table_name","(name)","<p>Override to return the quoted table name. Defaults to column quoting.\n"],["quote_table_name","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-quote_table_name","(name)","<p>Checks the following cases:\n<p>table_name\n<p>“table.name”\n"],["quote_table_name","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_table_name","(table_name)","<p>Quotes the table name. Defaults to column name quoting.\n"],["quote_value","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-quote_value","(value, column = nil)","<p>Quote strings appropriately for SQL statements.\n"],["quoted_columns_for_index","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-quoted_columns_for_index","(column_names, options = {})",""],["quoted_columns_for_index","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-quoted_columns_for_index","(column_names, options = {})","<p>Overridden by the mysql adapter for supporting index lengths\n"],["quoted_comma_pair_list","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-quoted_comma_pair_list","(quoter, hash)",""],["quoted_date","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quoted_date","(value)",""],["quoted_false","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-quoted_false","()",""],["quoted_false","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quoted_false","()",""],["quoted_locking_column","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-quoted_locking_column","()","<p>Quote the column name used for optimistic locking.\n"],["quoted_primary_key","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","classes/ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-quoted_primary_key","()","<p>Returns a quoted version of the primary key name, used to construct SQL\nstatements.\n"],["quoted_table_name","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-quoted_table_name","()","<p>Returns a quoted version of the table name, used to construct SQL\nstatements.\n"],["quoted_true","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-quoted_true","()",""],["quoted_true","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quoted_true","()",""],["radio_button","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-radio_button","(method, tag_value, options = {})",""],["radio_button","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-radio_button","(object_name, method, tag_value, options = {})","<p>Returns a radio button tag for accessing a specified attribute (identified\nby <code>method</code>) on an object assigned …\n"],["radio_button_checked?","ActionView::Helpers::InstanceTagMethods::ClassMethods","classes/ActionView/Helpers/InstanceTagMethods/ClassMethods.html#method-i-radio_button_checked-3F","(value, checked_value)",""],["radio_button_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-radio_button_tag","(name, value, checked = false, options = {})","<p>Creates a radio button; use groups of radio buttons named the same to allow\nusers to select from a group …\n"],["rails_asset_id","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-rails_asset_id","(source)","<p>Use the RAILS_ASSET_ID environment variable or the source&#39;s\nmodification time as its cache-busting …\n"],["rails_env","Plugin","classes/Plugin.html#method-i-rails_env","()",""],["rails_version","Rails::API::AppTask","classes/Rails/API/AppTask.html#method-i-rails_version","()",""],["rails_version","Rails::API::EdgeTask","classes/Rails/API/EdgeTask.html#method-i-rails_version","()",""],["rails_version","Rails::API::StableTask","classes/Rails/API/StableTask.html#method-i-rails_version","()",""],["railtie_name","Rails::Railtie","classes/Rails/Railtie.html#method-i-railtie_name","(*)",""],["railties","Rails::Application","classes/Rails/Application.html#method-i-railties","()",""],["railties","Rails::Application::Railties","classes/Rails/Application/Railties.html#method-i-railties","()",""],["raise","ActiveSupport::BasicObject","classes/ActiveSupport/BasicObject.html#method-i-raise","(*args)","<p>Let ActiveSupport::BasicObject at least raise exceptions.\n"],["raise_nil_warning_for","NilClass","classes/NilClass.html#method-i-raise_nil_warning_for","(class_name = nil, selector = nil, with_caller = nil)","<p>Raises a NoMethodError when you attempt to call a method on\n<code>nil</code>.\n"],["raise_on_session_data_overflow!","ActiveRecord::SessionStore::Session","classes/ActiveRecord/SessionStore/Session.html#method-i-raise_on_session_data_overflow-21","()","<p>Ensures that the data about to be stored in the database is not larger than\nthe data storage column. …\n"],["rake","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-rake","(command, options={})","<p>Runs the supplied rake task\n<p>Example\n\n<pre><code>rake(&quot;db:migrate&quot;)\nrake(&quot;db:migrate&quot;, :env =&gt; &quot;production&quot;)\nrake(&quot;gems:install&quot;, ...\n</code></pre>\n"],["rake_tasks","Rails::Railtie","classes/Rails/Railtie.html#method-i-rake_tasks","(&blk)",""],["rakefile","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-rakefile","(filename, data=nil, &block)","<p>Create a new Rakefile with the provided code (either in a block or a\nstring).\n<p>Examples\n\n<pre><code>rakefile(&quot;bootstrap.rake&quot;) ...</code></pre>\n"],["random_bytes","ActiveSupport::SecureRandom","classes/ActiveSupport/SecureRandom.html#method-c-random_bytes","(n=nil)","<p>SecureRandom.random_bytes generates a random binary string.\n<p>The argument n specifies the length of the …\n"],["random_number","ActiveSupport::SecureRandom","classes/ActiveSupport/SecureRandom.html#method-c-random_number","(n=0)","<p>SecureRandom.random_number generates a random number.\n<p>If an positive integer is given as n, SecureRandom.random_number …\n"],["range_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-range_field","(object_name, method, options = {})","<p>Returns an input tag of type “range”.\n<p>Options\n<p>Accepts same options as range_field_tag\n"],["range_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-range_field_tag","(name, value = nil, options = {})","<p>Creates a range form element.\n<p>Options\n<p>Accepts the same options as number_field_tag.\n"],["raw","ActionView::Helpers::RawOutputHelper","classes/ActionView/Helpers/RawOutputHelper.html#method-i-raw","(stringish)","<p>This method outputs without escaping a string. Since escaping tags is now\ndefault, this can be used when …\n"],["raw_connection","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-raw_connection","()","<p>Provides access to the underlying database driver for this adapter. For\nexample, this method returns …\n"],["raw_host_with_port","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-raw_host_with_port","()","<p>Returns the host for this request, such as “example.com”.\n"],["raw_post","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-raw_post","()","<p>Read the request body. This is useful for web services that need to work\nwith raw requests directly. …\n"],["raw_value","ActiveSupport::Cache::Entry","classes/ActiveSupport/Cache/Entry.html#method-i-raw_value","()","<p>Get the raw value. This value may be serialized and compressed.\n"],["read","ActionDispatch::Http::UploadedFile","classes/ActionDispatch/Http/UploadedFile.html#method-i-read","(*args)",""],["read","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-read","(name, options = nil)","<p>Fetches data from the cache, using the given key. If there is data in the\ncache with the given key, then …\n"],["read_attribute","ActiveRecord::AttributeMethods::Read","classes/ActiveRecord/AttributeMethods/Read.html#method-i-read_attribute","(attr_name)","<p>Returns the value of the attribute identified by <code>attr_name</code>\nafter it has been typecast (for example, “2004-12-12” …\n"],["read_attribute_before_type_cast","ActiveRecord::AttributeMethods::BeforeTypeCast","classes/ActiveRecord/AttributeMethods/BeforeTypeCast.html#method-i-read_attribute_before_type_cast","(attr_name)",""],["read_csv_fixture_files","Fixtures","classes/Fixtures.html#method-i-read_csv_fixture_files","()",""],["read_entry","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-i-read_entry","(key, options)",""],["read_entry","ActiveSupport::Cache::Strategy::LocalCache::LocalStore","classes/ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-i-read_entry","(key, options)",""],["read_fixture_files","Fixtures","classes/Fixtures.html#method-i-read_fixture_files","()",""],["read_fragment","ActionController::Caching::Fragments","classes/ActionController/Caching/Fragments.html#method-i-read_fragment","(key, options = nil)","<p>Reads a cached fragment from the location signified by <code>key</code>\n(see <code>expire_fragment</code> for acceptable formats) …\n"],["read_multi","ActiveSupport::Cache::MemCacheStore","classes/ActiveSupport/Cache/MemCacheStore.html#method-i-read_multi","(*names)","<p>Reads multiple values from the cache using a single call to the servers for\nall keys. Options can be …\n"],["read_multi","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-read_multi","(*names)","<p>Read multiple values at once from the cache. Options can be passed in the\nlast argument.\n<p>Some cache implementation …\n"],["read_yaml_fixture_files","Fixtures","classes/Fixtures.html#method-i-read_yaml_fixture_files","()",""],["readable_inspect","Date","classes/Date.html#method-i-readable_inspect","()","<p>Overrides the default inspect method with a human readable one, e.g., “Mon,\n21 Feb 2005”\n"],["readable_inspect","DateTime","classes/DateTime.html#method-i-readable_inspect","()","<p>Overrides the default inspect method with a human readable one, e.g., “Mon,\n21 Feb 2005 14:30:00 …\n"],["reader_method","ActiveRecord::Aggregations::ClassMethods","classes/ActiveRecord/Aggregations/ClassMethods.html#method-i-reader_method","(name, class_name, mapping, allow_nil, constructor)",""],["readme","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-readme","(path)","<p>Reads the given file at the source root and prints it in the console.\n<p>Example\n\n<pre><code>readme &quot;README&quot;</code></pre>\n"],["readonly","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-readonly","(value = true)",""],["readonly!","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-readonly-21","()","<p>Marks this record as read only.\n"],["readonly?","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-readonly-3F","()","<p>Returns <code>true</code> if the record is read only. Records loaded\nthrough joins with piggy-back attributes will …\n"],["readonly_attributes","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-readonly_attributes","()","<p>Returns an array of all the attributes that have been specified as\nreadonly.\n"],["receive","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-receive","(raw_mail)","<p>Receives a raw email, parses it into an email object, decodes it,\ninstantiates a new mailer, and passes …\n"],["recognized_request_for","ActionDispatch::Assertions::RoutingAssertions","classes/ActionDispatch/Assertions/RoutingAssertions.html#method-i-recognized_request_for","(path)","<p>Recognizes the route for a given path.\n"],["recompile!","ActiveSupport::Callbacks::Callback","classes/ActiveSupport/Callbacks/Callback.html#method-i-recompile-21","(_options, _per_key)",""],["reconnect!","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-reconnect-21","()","<p>Disconnects from the database if already connected, and establishes a new\nconnection with the database. …\n"],["reconnect!","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-reconnect-21","()",""],["reconnect!","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-reconnect-21","()","<p>Close then reopen the connection.\n"],["record","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-record","(line)",""],["record","ActiveSupport::Testing::Performance::Benchmarker","classes/ActiveSupport/Testing/Performance/Benchmarker.html#method-i-record","()",""],["record","ActiveSupport::Testing::Performance::Profiler","classes/ActiveSupport/Testing/Performance/Profiler.html#method-i-record","()",""],["record_key_for_dom_id","ActionController::RecordIdentifier","classes/ActionController/RecordIdentifier.html#method-i-record_key_for_dom_id","(record)","<p>Returns a string representation of the key attribute(s) that is suitable\nfor use in an HTML DOM id.  …\n"],["recycle!","ActionController::TestResponse","classes/ActionController/TestResponse.html#method-i-recycle-21","()",""],["redefine_method","Module","classes/Module.html#method-i-redefine_method","(method, &block)",""],["redirect","ActionDispatch::Routing::Mapper::HttpHelpers","classes/ActionDispatch/Routing/Mapper/HttpHelpers.html#method-i-redirect","(*args, &block)","<p>Redirect any path to another path:\n\n<pre><code>match &quot;/stories&quot; =&gt; redirect(&quot;/posts&quot;)\n</code></pre>\n"],["redirect?","ActionDispatch::TestResponse","classes/ActionDispatch/TestResponse.html#method-i-redirect-3F","()","<p>Were we redirected?\n"],["redirect_to","ActionController::Flash","classes/ActionController/Flash.html#method-i-redirect_to","(options = {}, response_status_and_flash = {})",""],["redirect_to","ActionController::Instrumentation","classes/ActionController/Instrumentation.html#method-i-redirect_to","(*args)",""],["redirect_to","ActionController::LogSubscriber","classes/ActionController/LogSubscriber.html#method-i-redirect_to","(event)",""],["redirect_to","ActionController::Redirecting","classes/ActionController/Redirecting.html#method-i-redirect_to","(options = {}, response_status = {})","<p>Redirects the browser to the target specified in <code>options</code>. This\nparameter can take one of three forms: …\n"],["redirect_to","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-redirect_to","(location)","<p>Redirects the browser to the given <code>location</code> using JavaScript,\nin the same form as <code>url_for</code>.\n<p>Examples:\n\n<pre><code># ...</code></pre>\n"],["redirect_to_url","ActionDispatch::TestProcess","classes/ActionDispatch/TestProcess.html#method-i-redirect_to_url","()",""],["redirect_url","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-redirect_url","()",""],["redirect_url_match?","ActionDispatch::TestResponse::DeprecatedHelpers","classes/ActionDispatch/TestResponse/DeprecatedHelpers.html#method-i-redirect_url_match-3F","(pattern)",""],["redirected_to","ActionDispatch::TestResponse::DeprecatedHelpers","classes/ActionDispatch/TestResponse/DeprecatedHelpers.html#method-i-redirected_to","()",""],["ref","Mime::Type","classes/Mime/Type.html#method-i-ref","()",""],["reference?","Rails::Generators::GeneratedAttribute","classes/Rails/Generators/GeneratedAttribute.html#method-i-reference-3F","()",""],["references","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-references","(*args)","<p>Adds a reference. Optionally adds a <code>type</code> column.\n<code>references</code> and <code>belongs_to</code> are acceptable.\n<p>Examples\n\n<pre><code>t.references(:goat) ...</code></pre>\n"],["references","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-references","(*args)",""],["references_eager_loaded_tables?","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-references_eager_loaded_tables-3F","()",""],["reflect_on_aggregation","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_aggregation","(aggregation)","<p>Returns the AggregateReflection object for the named\n<code>aggregation</code> (use the symbol).\n\n<pre><code>Account.reflect_on_aggregation(:balance) ...</code></pre>\n"],["reflect_on_all_aggregations","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_all_aggregations","()","<p>Returns an array of AggregateReflection objects for all the aggregations in\nthe class.\n"],["reflect_on_all_associations","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_all_associations","(macro = nil)","<p>Returns an array of AssociationReflection objects for all the associations\nin the class. If you only …\n"],["reflect_on_all_autosave_associations","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_all_autosave_associations","()","<p>Returns an array of AssociationReflection objects for all associations\nwhich have <code>:autosave</code> enabled. …\n"],["reflect_on_association","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_association","(association)","<p>Returns the AssociationReflection object for the <code>association</code>\n(use the symbol).\n\n<pre><code>Account.reflect_on_association(:owner) ...</code></pre>\n"],["reflections","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflections","()","<p>Returns a hash containing all AssociationReflection objects for the current\nclass. Example:\n\n<pre><code>Invoice.reflections ...</code></pre>\n"],["register","Mime::Type","classes/Mime/Type.html#method-i-register","(string, symbol, mime_type_synonyms = [], extension_synonyms = [], skip_lookup = false)",""],["register_alias","Mime::Type","classes/Mime/Type.html#method-i-register_alias","(string, symbol, extension_synonyms = [])","<p>Registers an alias that&#39;s not used on mime type lookup, but can be\nreferenced directly. Especially …\n"],["register_interceptor","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-register_interceptor","(interceptor)","<p>Register an Inteceptor which will be called before mail is sent. Either a\nclass or a string can be passed …\n"],["register_interceptors","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-register_interceptors","(*interceptors)","<p>Register one or more Interceptors which will be called before mail is sent.\n"],["register_javascript_expansion","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-c-register_javascript_expansion","(expansions)","<p>Register one or more javascript files to be included when\n<code>symbol</code> is passed to <code>javascript_include_tag</code> …\n"],["register_javascript_include_default","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-c-register_javascript_include_default","(*args)",""],["register_observer","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-register_observer","(observer)","<p>Register an Observer which will be notified when mail is delivered. Either\na class or a string can be …\n"],["register_observers","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-register_observers","(*observers)","<p>Register one or more Observers which will be notified when mail is\ndelivered.\n"],["register_stylesheet_expansion","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-c-register_stylesheet_expansion","(expansions)","<p>Register one or more stylesheet files to be included when\n<code>symbol</code> is passed to <code>stylesheet_link_tag</code>. This …\n"],["regular_update","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-regular_update","(other_hash)",""],["regular_update","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-regular_update","(other_hash)",""],["regular_writer","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-regular_writer","(key, value)",""],["regular_writer","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-regular_writer","(key, value)",""],["release_connection","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-release_connection","(with_id = current_connection_id)","<p>Signal that the thread is finished with the current connection.\n#release_connection releases the connection-thread …\n"],["release_savepoint","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-release_savepoint","()",""],["release_savepoint","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-release_savepoint","()",""],["release_savepoint","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-release_savepoint","()",""],["reload","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-reload","()","<p>Reloads the browser&#39;s current <code>location</code> using JavaScript\n<p>Examples:\n\n<pre><code># Generates: window.location.reload(); ...</code></pre>\n"],["reload","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-reload","(options = nil)","<p>Reloads the attributes of the object as usual and clears\n<code>marked_for_destruction</code> flag.\n"],["reload","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-reload","(options = nil)","<p>Reloads the attributes of this object from the database. The optional\noptions argument is passed to find …\n"],["reload","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-reload","()",""],["reload!","Object","classes/Object.html#method-i-reload-21","(print=true)","<p>reloads the environment\n"],["reload_routes!","Rails::Application","classes/Rails/Application.html#method-i-reload_routes-21","()",""],["reloader","I18n::Railtie","classes/I18n/Railtie.html#method-c-reloader","()",""],["remember_transaction_record_state","ActiveRecord::Transactions","classes/ActiveRecord/Transactions.html#method-i-remember_transaction_record_state","()","<p>Save the new record state and id of a record so it can be restored later if\na transaction fails.\n"],["remote_addr=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-remote_addr-3D","(addr)",""],["remote_addrs","ActionDispatch::RemoteIp::RemoteIpGetter","classes/ActionDispatch/RemoteIp/RemoteIpGetter.html#method-i-remote_addrs","()",""],["remote_function","ActionView::Helpers::PrototypeHelper","classes/ActionView/Helpers/PrototypeHelper.html#method-i-remote_function","(options)","<p>Returns the JavaScript needed for a remote function. See the link_to_remote\ndocumentation at github.com/rails/prototype_legacy_helper …\n"],["remote_ip","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-remote_ip","()","<p>Determines originating IP address.  REMOTE_ADDR is the standard but will\nfail if the user is behind a …\n"],["remove","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-remove","(*ids)","<p>Removes the DOM elements with the given <code>ids</code> from the page.\n<p>Example:\n\n<pre><code># Remove a few people\n# Generates: ...</code></pre>\n"],["remove","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-remove","(*column_names)","<p>Removes the column(s) from the table definition.\n<p>Examples\n\n<pre><code>t.remove(:qualification)\nt.remove(:qualification, ...</code></pre>\n"],["remove_belongs_to","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_belongs_to","(*args)",""],["remove_column","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_column","(table_name, *column_names)","<p>Removes the column(s) from the table definition.\n<p>Examples\n\n<pre><code>remove_column(:suppliers, :qualification)\nremove_columns(:suppliers, ...</code></pre>\n"],["remove_columns","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_columns","(table_name, *column_names)",""],["remove_connection","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-remove_connection","(klass = self)",""],["remove_connection","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-remove_connection","(klass)","<p>Remove the connection for this class. This will close the active connection\nand the defined connection …\n"],["remove_filters!","ActiveSupport::BacktraceCleaner","classes/ActiveSupport/BacktraceCleaner.html#method-i-remove_filters-21","()",""],["remove_hook_for","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-remove_hook_for","(*names)","<p>Remove a previously added hook.\n<p>Examples\n\n<pre><code>remove_hook_for :orm</code></pre>\n"],["remove_index","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_index","(table_name, options = {})","<p>Remove the given index from the table.\n<p>Remove the suppliers_name_index in the suppliers table.\n\n<pre><code>remove_index ...</code></pre>\n"],["remove_index","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_index","(options = {})","<p>Removes the given index from the table.\n<p>Examples\n<p>Remove the suppliers_name_index in the suppliers table …\n"],["remove_multiparameter_id","ActiveModel::MassAssignmentSecurity::PermissionSet","classes/ActiveModel/MassAssignmentSecurity/PermissionSet.html#method-i-remove_multiparameter_id","(key)",""],["remove_possible_method","Module","classes/Module.html#method-i-remove_possible_method","(method)",""],["remove_references","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_references","(*args)","<p>Removes a reference. Optionally removes a <code>type</code> column.\n<code>remove_references</code> and <code>remove_belongs_to</code> are\nacceptable. …\n"],["remove_silencers!","ActiveSupport::BacktraceCleaner","classes/ActiveSupport/BacktraceCleaner.html#method-i-remove_silencers-21","()","<p>Will remove all silencers, but leave in the filters. This is useful if your\ncontext of debugging suddenly …\n"],["remove_timestamps","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_timestamps","(table_name)","<p>Removes the timestamp columns (created_at and updated_at) from the table\ndefinition.\n<p>Examples\n\n<pre><code>remove_timestamps(:suppliers)</code></pre>\n"],["remove_timestamps","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_timestamps","()","<p>Removes the timestamp columns (created_at and updated_at) from the table.\n<p>Example\n\n<pre><code>t.remove_timestamps</code></pre>\n"],["rename","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-rename","(column_name, new_column_name)","<p>Renames a column.\n<p>Example\n\n<pre><code>t.rename(:description, :name)</code></pre>\n"],["rename_column","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-rename_column","(table_name, column_name, new_column_name)","<p>Renames a column in a table.\n"],["rename_column","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_column","(table_name, column_name, new_column_name)","<p>Renames a column.\n<p>Example\n\n<pre><code>rename_column(:suppliers, :description, :name)</code></pre>\n"],["rename_index","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_index","(table_name, old_name, new_name)","<p>Rename an index.\n<p>Rename the index_people_on_last_name index to index_users_on_last_name\n\n<pre><code>rename_index :people, ...</code></pre>\n"],["rename_key","ActiveSupport::XmlMini","classes/ActiveSupport/XmlMini.html#method-i-rename_key","(key, options = {})",""],["rename_table","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-rename_table","(table_name, new_name)",""],["rename_table","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-rename_table","(name, new_name)","<p>Renames a table.\n"],["rename_table","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-rename_table","(name, new_name)",""],["rename_table","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_table","(table_name, new_name)","<p>Renames a table.\n<p>Example\n\n<pre><code>rename_table(&#39;octopuses&#39;, &#39;octopi&#39;)</code></pre>\n"],["render","AbstractController::Rendering","classes/AbstractController/Rendering.html#method-i-render","(*args, &block)","<p>Normalize arguments, options and then delegates render_to_body and sticks\nthe result in self.response_body. …\n"],["render","ActionController::Instrumentation","classes/ActionController/Instrumentation.html#method-i-render","(*args)",""],["render","ActionDispatch::ShowExceptions","classes/ActionDispatch/ShowExceptions.html#method-i-render","(status, body)",""],["render","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-render","(*options)",""],["render","ActionView::Partials::PartialRenderer","classes/ActionView/Partials/PartialRenderer.html#method-i-render","()",""],["render","ActionView::Rendering","classes/ActionView/Rendering.html#method-i-render","(options = {}, locals = {}, &block)","<p>Returns the result of a render that&#39;s dictated by the options hash. The\nprimary options are:\n<p><code>:partial</code> …\n"],["render","ActionView::Template","classes/ActionView/Template.html#method-i-render","(view, locals, &block)",""],["render","ActionView::Template::ActionView::Template::Template::Handler","classes/ActionView/Template/ActionView/Template/Template/Handler.html#method-i-render","(template, local_assigns)",""],["render","ActionView::TestCase::Behavior","classes/ActionView/TestCase/Behavior.html#method-i-render","(options = {}, local_assigns = {}, &block)",""],["render_collection","ActionView::LogSubscriber","classes/ActionView/LogSubscriber.html#method-i-render_collection","(event)",""],["render_collection","ActionView::Partials::PartialRenderer","classes/ActionView/Partials/PartialRenderer.html#method-i-render_collection","()",""],["render_exception","ActionDispatch::ShowExceptions","classes/ActionDispatch/ShowExceptions.html#method-i-render_exception","(env, exception)",""],["render_partial","ActionView::LogSubscriber","classes/ActionView/LogSubscriber.html#method-i-render_partial","(event)",""],["render_partial","ActionView::Partials::PartialRenderer","classes/ActionView/Partials/PartialRenderer.html#method-i-render_partial","(object = @object)",""],["render_template","ActionView::LogSubscriber","classes/ActionView/LogSubscriber.html#method-i-render_template","(event)",""],["render_to_body","AbstractController::Rendering","classes/AbstractController/Rendering.html#method-i-render_to_body","(options = {})","<p>Raw rendering of a template to a Rack-compatible body. :api: plugin\n"],["render_to_body","ActionController::Compatibility","classes/ActionController/Compatibility.html#method-i-render_to_body","(options)",""],["render_to_body","ActionController::Renderers","classes/ActionController/Renderers.html#method-i-render_to_body","(options)",""],["render_to_string","AbstractController::Rendering","classes/AbstractController/Rendering.html#method-i-render_to_string","(*args, &block)","<p>Raw rendering of a template to a string. Just convert the results of\nrender_to_body into a String. :api: …\n"],["rendered","ActionDispatch::TestResponse::DeprecatedHelpers","classes/ActionDispatch/TestResponse/DeprecatedHelpers.html#method-i-rendered","()","<p>Returns the template of the file which was used to render this response (or\nnil)\n"],["reorder","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-reorder","(*args)",""],["reorder_characters","ActiveSupport::Multibyte::Unicode","classes/ActiveSupport/Multibyte/Unicode.html#method-i-reorder_characters","(codepoints)","<p>Re-order codepoints so the string becomes canonical.\n"],["replace","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-replace","(id, *options_for_render)","<p>Replaces the “outer HTML” (i.e., the entire element, not just its contents)\nof the DOM element …\n"],["replace","ActiveRecord::Associations::HasOneThroughAssociation","classes/ActiveRecord/Associations/HasOneThroughAssociation.html#method-i-replace","(new_value)",""],["replace_html","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-replace_html","(id, *options_for_render)","<p>Replaces the inner HTML of the DOM element with the given <code>id</code>.\n<p><code>options_for_render</code> may be either a string …\n"],["report","ActiveSupport::Testing::Performance::Performer","classes/ActiveSupport/Testing/Performance/Performer.html#method-i-report","()",""],["report","ActiveSupport::Testing::Performance::Profiler","classes/ActiveSupport/Testing/Performance/Profiler.html#method-i-report","()",""],["request_http_basic_authentication","ActionController::HttpAuthentication::Basic::ControllerMethods","classes/ActionController/HttpAuthentication/Basic/ControllerMethods.html#method-i-request_http_basic_authentication","(realm = \"Application\")",""],["request_method","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-request_method","()","<p>Returns the HTTP method that the application should see. In the case where\nthe method was overridden …\n"],["request_method=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-request_method-3D","(method)",""],["request_method_symbol","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-request_method_symbol","()","<p>Returns a symbol form of the #request_method\n"],["request_parameters","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-request_parameters","()",""],["request_uri","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-request_uri","()","<p>Returns the request URI, accounting for server idiosyncrasies. WEBrick\nincludes the full URL. IIS leaves …\n"],["request_uri=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-request_uri-3D","(uri)",""],["request_via_redirect","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-request_via_redirect","(http_method, path, parameters = nil, headers = nil)","<p>Performs a request using the specified method, following any subsequent\nredirect. Note that the redirects …\n"],["require_library_or_gem","Kernel","classes/Kernel.html#method-i-require_library_or_gem","(library_name)","<p>Require a library with fallback to RubyGems.  Warnings during library\nloading are silenced to increase …\n"],["requires_reloading?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-requires_reloading-3F","()","<p>Returns true if its required to reload the connection between requests for\ndevelopment mode. This is …\n"],["requires_reloading?","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-requires_reloading-3F","()",""],["rescue_action","ActionController::Compatibility","classes/ActionController/Compatibility.html#method-i-rescue_action","(env)",""],["rescue_action_in_public","ActionDispatch::ShowExceptions","classes/ActionDispatch/ShowExceptions.html#method-i-rescue_action_in_public","(exception)","<p>Attempts to render a static error page based on the\n<code>status_code</code> thrown, or just return headers if no …\n"],["rescue_action_in_public!","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-rescue_action_in_public-21","()","<p>Cause the action to be rescued according to the regular rules for\nrescue_action when the visitor is not …\n"],["rescue_action_locally","ActionDispatch::ShowExceptions","classes/ActionDispatch/ShowExceptions.html#method-i-rescue_action_locally","(request, exception)","<p>Render detailed diagnostics for unhandled exceptions rescued from a\ncontroller action.\n"],["rescue_action_without_handler","ActionController::TestCase::RaiseActionExceptions","classes/ActionController/TestCase/RaiseActionExceptions.html#method-i-rescue_action_without_handler","(e)",""],["rescue_from","ActionDispatch::Rescue","classes/ActionDispatch/Rescue.html#method-i-rescue_from","(exception, rescuer)",""],["rescue_from","ActiveSupport::Rescuable::ClassMethods","classes/ActiveSupport/Rescuable/ClassMethods.html#method-i-rescue_from","(*klasses, &block)","<p>Rescue exceptions raised in controller actions.\n<p><code>rescue_from</code> receives a series of exception classes or …\n"],["rescue_with_handler","ActionController::Rescue","classes/ActionController/Rescue.html#method-i-rescue_with_handler","(exception)",""],["rescue_with_handler","ActiveSupport::Rescuable","classes/ActiveSupport/Rescuable.html#method-i-rescue_with_handler","(exception)","<p>Tries to rescue the exception by looking up and calling a registered\nhandler.\n"],["reset","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-reset","()",""],["reset!","ActionDispatch::Integration::Runner","classes/ActionDispatch/Integration/Runner.html#method-i-reset-21","()","<p>Reset the current session. This is useful for testing multiple sessions in\na single test case.\n"],["reset!","ActionDispatch::Integration::Session","classes/ActionDispatch/Integration/Session.html#method-i-reset-21","()","<p>Resets the instance. This can be used to reset the state information in an\nexisting session instance, …\n"],["reset!","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-reset-21","()","<p>Reset the state of this connection, directing the DBMS to clear\ntransactions and other connection-related …\n"],["reset!","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-reset-21","()",""],["reset_attribute!","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-reset_attribute-21","(attr)","<p>Handle <code>reset_*!</code> for <code>method_missing</code>.\n"],["reset_cache","Fixtures","classes/Fixtures.html#method-c-reset_cache","(connection = nil)",""],["reset_callbacks","ActiveSupport::Callbacks::ClassMethods","classes/ActiveSupport/Callbacks/ClassMethods.html#method-i-reset_callbacks","(symbol)","<p>Reset callbacks for a given type.\n"],["reset_column_information","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-reset_column_information","()","<p>Resets all the cached information about columns, which will cause them to\nbe reloaded on the next request. …\n"],["reset_counters","ActiveRecord::CounterCache","classes/ActiveRecord/CounterCache.html#method-i-reset_counters","(id, *counters)","<p>Resets one or more counter caches to their correct value using an SQL count\nquery.  This is useful when …\n"],["reset_cycle","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-reset_cycle","(name = \"default\")","<p>Resets a cycle so that it starts from the first element the next time it is\ncalled. Pass in <code>name</code> to reset …\n"],["reset_javascript_include_default","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-c-reset_javascript_include_default","()",""],["reset_locking_column","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-reset_locking_column","()","<p>Reset the column used for optimistic locking back to the\n<code>lock_version</code> default.\n"],["reset_runtime","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-c-reset_runtime","()",""],["reset_sequence!","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-reset_sequence-21","(table, column, sequence = nil)","<p>Set the sequence to the max value of the table&#39;s column.\n"],["reset_session","ActionController::RackDelegation","classes/ActionController/RackDelegation.html#method-i-reset_session","()",""],["reset_session","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-reset_session","()","<p>TODO This should be broken apart into AD::Request::Session and probably be\nincluded by the session middleware. …\n"],["resource","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-resource","(*resources, &block)","<p>Sometimes, you have a resource that clients always look up without\nreferencing an ID. A common example, …\n"],["resource_location","ActionController::Responder","classes/ActionController/Responder.html#method-i-resource_location","()","<p>Returns the resource location by retrieving it from the options or\nreturning the resources array.\n"],["resource_method_scope?","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-resource_method_scope-3F","()",""],["resource_scope","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-resource_scope","(resource)",""],["resource_scope?","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-resource_scope-3F","()",""],["resourceful?","ActionController::Responder","classes/ActionController/Responder.html#method-i-resourceful-3F","()","<p>Checks whether the resource responds to the current format or not.\n"],["resources","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-resources","(*resources, &block)","<p>In Rails, a resourceful route provides a mapping between HTTP verbs and\nURLs and controller actions. …\n"],["resources_path_names","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-resources_path_names","(options)",""],["respond","ActionController::Responder","classes/ActionController/Responder.html#method-i-respond","()","<p>Main entry point for responder responsible to dispatch to the proper\nformat.\n"],["respond_to","ActionController::MimeResponds::ClassMethods","classes/ActionController/MimeResponds/ClassMethods.html#method-i-respond_to","(*mimes)","<p>Defines mime types that are rendered by default when invoking\n<code>respond_with</code>.\n<p>Examples:\n\n<pre><code>respond_to :html, ...</code></pre>\n"],["respond_to?","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-respond_to-3F","(method)",""],["respond_to?","ActiveModel::AttributeMethods","classes/ActiveModel/AttributeMethods.html#method-i-respond_to-3F","(method, include_private_methods = false)",""],["respond_to?","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-respond_to-3F","(method_id, include_private = false)",""],["respond_to?","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-respond_to-3F","(method, include_private = false)",""],["respond_to?","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-respond_to-3F","(method, include_private=false)","<p>Returns <code>true</code> if <em>obj</em> responds to the given method.\nPrivate methods are included in the search only if …\n"],["respond_to?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-respond_to-3F","(sym, include_priv = false)","<p>Ensure proxy class responds to all methods that underlying time instance\nresponds to.\n"],["respond_to?","Rails::Application","classes/Rails/Application.html#method-i-respond_to-3F","(*args)",""],["respond_to?","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-respond_to-3F","(name)",""],["respond_to_without_attributes?","ActiveModel::AttributeMethods","classes/ActiveModel/AttributeMethods.html#method-i-respond_to_without_attributes-3F","(method, include_private_methods = false)","<p>A Person object with a name attribute can ask\n<code>person.respond_to?(:name)</code>,\n<code>person.respond_to?(:name=)</code>, …\n"],["response_body=","ActionController::Metal","classes/ActionController/Metal.html#method-i-response_body-3D","(val)",""],["response_body=","ActionController::RackDelegation","classes/ActionController/RackDelegation.html#method-i-response_body-3D","(body)",""],["response_code","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-response_code","()","<p>The response code of the request\n"],["response_from_page_or_rjs","ActionDispatch::Assertions::SelectorAssertions","classes/ActionDispatch/Assertions/SelectorAssertions.html#method-i-response_from_page_or_rjs","()","<p><code>assert_select</code> and <code>css_select</code> call this to obtain\nthe content in the HTML page, or from all the RJS statements, …\n"],["response_from_page_or_rjs","ActionView::TestCase::Behavior","classes/ActionView/TestCase/Behavior.html#method-i-response_from_page_or_rjs","()","<p>Support the selector assertions\n<p>Need to experiment if this priority is the best one: rendered =&gt;\noutput_buffer …\n"],["restore_transaction_record_state","ActiveRecord::Transactions","classes/ActiveRecord/Transactions.html#method-i-restore_transaction_record_state","(force = false)","<p>Restore the new record state and id of a record that was previously saved\nby a call to save_record_state. …\n"],["retrieve_connection","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-retrieve_connection","()",""],["retrieve_connection_pool","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-retrieve_connection_pool","(klass)",""],["returning","Object","classes/Object.html#method-i-returning","(value)","<p>Returns <code>value</code> after yielding <code>value</code> to the block.\nThis simplifies the process of constructing an object, …\n"],["reverse","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-reverse","()","<p>Reverses all characters in the string.\n<p>Example:\n\n<pre><code>&#39;Café&#39;.mb_chars.reverse.to_s # =&gt; &#39;éfaC&#39;\n</code></pre>\n"],["reverse_merge","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-reverse_merge","(other_hash)","<p>Performs the opposite of merge, with the keys and values from the first\nhash taking precedence over the …\n"],["reverse_merge","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-reverse_merge","(other_hash)","<p>Performs the opposite of merge, with the keys and values from the first\nhash taking precedence over the …\n"],["reverse_merge","Hash","classes/Hash.html#method-i-reverse_merge","(other_hash)","<p>Allows for reverse merging two hashes where the keys in the calling hash\ntake precedence over those in …\n"],["reverse_merge!","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-reverse_merge-21","(other_hash)",""],["reverse_merge!","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-reverse_merge-21","(other_hash)",""],["reverse_merge!","Hash","classes/Hash.html#method-i-reverse_merge-21","(other_hash)","<p>Performs the opposite of <code>merge</code>, with the keys and values from\nthe first hash taking precedence over the …\n"],["reverse_order","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-reverse_order","()",""],["reverse_sql_order","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-reverse_sql_order","(order_query)",""],["reverse_update","Hash","classes/Hash.html#method-i-reverse_update","(other_hash)",""],["rewind","ActionDispatch::Http::UploadedFile","classes/ActionDispatch/Http/UploadedFile.html#method-i-rewind","()",""],["rewrite_asset_path","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-rewrite_asset_path","(source, path = nil)","<p>Break out the asset path rewrite in case plugins wish to put the asset id\nsomeplace other than the query …\n"],["rewrite_extension?","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-rewrite_extension-3F","(source, dir, ext)",""],["rewrite_host_and_protocol","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-rewrite_host_and_protocol","(source, has_request)",""],["rfc2822","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-rfc2822","()",""],["rfc822","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-rfc822","()",""],["rindex","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-rindex","(needle, offset=nil)","<p>Returns the position <em>needle</em> in the string, counting in codepoints,\nsearching backward from <em>offset</em> or …\n"],["rjust","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-rjust","(integer, padstr=' ')","<p>Works just like <code>String#rjust</code>, only integer specifies\ncharacters instead of bytes.\n<p>Example:\n\n<pre><code>&quot;¾ cup&quot;.mb_chars.rjust(8).to_s ...</code></pre>\n"],["rollback_active_record_state!","ActiveRecord::Transactions","classes/ActiveRecord/Transactions.html#method-i-rollback_active_record_state-21","()","<p>Reset id and @new_record if the transaction rolls back.\n"],["rollback_db_transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-rollback_db_transaction","()","<p>Rolls back the transaction (and turns on auto-committing). Must be done if\nthe transaction block raises …\n"],["rollback_db_transaction","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-rollback_db_transaction","()","<p>Aborts a transaction.\n"],["rollback_to_savepoint","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-rollback_to_savepoint","()",""],["rollback_to_savepoint","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-rollback_to_savepoint","()",""],["rollback_to_savepoint","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-rollback_to_savepoint","()",""],["rollback_transaction_records","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-rollback_transaction_records","(rollback)","<p>Send a rollback message to all records after they have been rolled back. If\nrollback is false, only rollback …\n"],["root","ActionDispatch::Routing::Mapper::Base","classes/ActionDispatch/Routing/Mapper/Base.html#method-i-root","(options = {})","<p>You can specify what Rails should route “/” to with the root method:\n\n<pre><code>root :to =&gt; &#39;pages#main&#39;\n</code></pre>\n"],["root","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-root","(options={})",""],["root","Rails","classes/Rails.html#method-i-root","()",""],["root=","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-i-root-3D","(value)",""],["round","Float","classes/Float.html#method-i-round","(precision = nil)","<p>Rounds the float with the specified precision.\n\n<pre><code>x = 1.337\nx.round    # =&gt; 1\nx.round(1) # =&gt; 1.3\nx.round(2) ...\n</code></pre>\n"],["route","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-route","(routing_code)","<p>Make an entry in Rails routing file config/routes.rb\n<p>Example\n\n<pre><code>route &quot;root :to =&gt; &#39;welcome&#39;&quot;\n</code></pre>\n"],["route_url","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-route_url","()",""],["routes","Rails::Application","classes/Rails/Application.html#method-i-routes","()",""],["routes_configuration_file","Rails::Configuration::Deprecated","classes/Rails/Configuration/Deprecated.html#method-i-routes_configuration_file","()",""],["routes_configuration_file=","Rails::Configuration::Deprecated","classes/Rails/Configuration/Deprecated.html#method-i-routes_configuration_file-3D","(value)",""],["routes_reloader","Rails::Application","classes/Rails/Application.html#method-i-routes_reloader","()",""],["routing_type","ActionDispatch::Routing::PolymorphicRoutes","classes/ActionDispatch/Routing/PolymorphicRoutes.html#method-i-routing_type","(options)",""],["rstrip","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-rstrip","()","<p>Strips entire range of Unicode whitespace from the right of the string.\n"],["run","ActiveSupport::Testing::Isolation::MiniTest","classes/ActiveSupport/Testing/Isolation/MiniTest.html#method-i-run","(runner)",""],["run","ActiveSupport::Testing::Isolation::TestUnit","classes/ActiveSupport/Testing/Isolation/TestUnit.html#method-i-run","(result)",""],["run","ActiveSupport::Testing::Performance","classes/ActiveSupport/Testing/Performance.html#method-i-run","(result)",""],["run","ActiveSupport::Testing::Performance::Benchmarker","classes/ActiveSupport/Testing/Performance/Benchmarker.html#method-i-run","()",""],["run","ActiveSupport::Testing::Performance::Profiler","classes/ActiveSupport/Testing/Performance/Profiler.html#method-i-run","()",""],["run","ActiveSupport::Testing::SetupAndTeardown::ForClassicTestUnit","classes/ActiveSupport/Testing/SetupAndTeardown/ForClassicTestUnit.html#method-i-run","(result)","<p>This redefinition is unfortunate but test/unit shows us no alternative.\nDoubly unfortunate: hax to support …\n"],["run","ActiveSupport::Testing::SetupAndTeardown::ForMiniTest","classes/ActiveSupport/Testing/SetupAndTeardown/ForMiniTest.html#method-i-run","(runner)",""],["run","Rails::Initializable::Initializer","classes/Rails/Initializable/Initializer.html#method-i-run","(*args)",""],["run","Rails::Initializer","classes/Rails/Initializer.html#method-c-run","(&block)",""],["run_callbacks","ActiveSupport::Callbacks","classes/ActiveSupport/Callbacks.html#method-i-run_callbacks","(kind, *args, &block)",""],["run_generator","Rails::Generators::TestCase","classes/Rails/Generators/TestCase.html#method-i-run_generator","(args=self.default_arguments, config={})","<p>Runs the generator configured for this class. The first argument is an\narray like command line arguments: …\n"],["run_in_isolation","ActiveSupport::Testing::Isolation::Forking","classes/ActiveSupport/Testing/Isolation/Forking.html#method-i-run_in_isolation","(&blk)",""],["run_in_isolation","ActiveSupport::Testing::Isolation::Subprocess","classes/ActiveSupport/Testing/Isolation/Subprocess.html#method-i-run_in_isolation","(&blk)","<p>Crazy H4X to get this working in windows / jruby with no forking.\n"],["run_initializers","Rails::Initializable","classes/Rails/Initializable.html#method-i-run_initializers","(*args)",""],["run_install_hook","Plugin","classes/Plugin.html#method-i-run_install_hook","()",""],["run_load_hooks","ActiveSupport","classes/ActiveSupport.html#method-c-run_load_hooks","(name, base = Object)",""],["run_profile","ActiveSupport::Testing::Performance","classes/ActiveSupport/Testing/Performance.html#method-i-run_profile","(metric)",""],["run_test","ActiveSupport::Testing::Performance","classes/ActiveSupport/Testing/Performance.html#method-i-run_test","(metric, mode)",""],["run_uninstall_hook","Plugin","classes/Plugin.html#method-i-run_uninstall_hook","()",""],["run_validations!","ActiveModel::Validations","classes/ActiveModel/Validations.html#method-i-run_validations-21","()",""],["run_validations!","ActiveModel::Validations::Callbacks","classes/ActiveModel/Validations/Callbacks.html#method-i-run_validations-21","()","<p>Overwrite run validations to include callbacks.\n"],["run_warmup","ActiveSupport::Testing::Performance","classes/ActiveSupport/Testing/Performance.html#method-i-run_warmup","()",""],["runtime","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-c-runtime","()",""],["runtime=","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-c-runtime-3D","(value)",""],["safe_concat","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-safe_concat","(string)",""],["safe_concat","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-safe_concat","(value)",""],["sample","Array","classes/Array.html#method-i-sample","(n=nil)","<p>Backport of Array#sample based on Marc-Andre Lafortune&#39;s\ngithub.com/marcandre/backports/ Returns …\n"],["sanitize","ActionView::Helpers::SanitizeHelper","classes/ActionView/Helpers/SanitizeHelper.html#method-i-sanitize","(html, options = {})","<p>This <code>sanitize</code> helper will html encode all tags and strip all\nattributes that aren&#39;t specifically …\n"],["sanitize","ActiveModel::MassAssignmentSecurity::Sanitizer","classes/ActiveModel/MassAssignmentSecurity/Sanitizer.html#method-i-sanitize","(attributes)","<p>Returns all attributes not denied by the authorizer.\n"],["sanitize","HTML::FullSanitizer","classes/HTML/FullSanitizer.html#method-i-sanitize","(text, options = {})",""],["sanitize","HTML::Sanitizer","classes/HTML/Sanitizer.html#method-i-sanitize","(text, options = {})",""],["sanitize_css","ActionView::Helpers::SanitizeHelper","classes/ActionView/Helpers/SanitizeHelper.html#method-i-sanitize_css","(style)","<p>Sanitizes a block of CSS code. Used by <code>sanitize</code> when it comes\nacross a style attribute.\n"],["sanitize_css","HTML::WhiteListSanitizer","classes/HTML/WhiteListSanitizer.html#method-i-sanitize_css","(style)","<p>Sanitizes a block of css code.  Used by #sanitize when it comes across a\nstyle attribute\n"],["sanitize_dom_id","ActionController::RecordIdentifier","classes/ActionController/RecordIdentifier.html#method-i-sanitize_dom_id","(candidate_id)","<p>Replaces characters that are invalid in HTML DOM ids with valid ones.\n"],["sanitize_for_mass_assignment","ActiveModel::MassAssignmentSecurity","classes/ActiveModel/MassAssignmentSecurity.html#method-i-sanitize_for_mass_assignment","(attributes)",""],["sanitize_limit","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-sanitize_limit","(limit)","<p>Sanitizes the given LIMIT parameter in order to prevent SQL injection.\n<p>The <code>limit</code> may be anything that …\n"],["sanitize_sql_array","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-sanitize_sql_array","(ary)","<p>Accepts an array of conditions.  The array has each value sanitized and\ninterpolated into the SQL statement. …\n"],["sanitize_sql_for_assignment","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-sanitize_sql_for_assignment","(assignments)","<p>Accepts an array, hash, or string of SQL conditions and sanitizes them into\na valid SQL fragment for …\n"],["sanitize_sql_for_conditions","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-sanitize_sql_for_conditions","(condition, table_name = self.table_name)","<p>Accepts an array, hash, or string of SQL conditions and sanitizes them into\na valid SQL fragment for …\n"],["sanitize_sql_hash_for_assignment","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-sanitize_sql_hash_for_assignment","(attrs)","<p>Sanitizes a hash of attribute/value pairs into SQL conditions for a SET\nclause.\n\n<pre><code>{ :status =&gt; nil, :group_id ...\n</code></pre>\n"],["sanitize_sql_hash_for_conditions","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-sanitize_sql_hash_for_conditions","(attrs, default_table_name = self.table_name)","<p>Sanitizes a hash of attribute/value pairs into SQL conditions for a WHERE\nclause.\n\n<pre><code>{ :name =&gt; &quot;foo&#39;bar&quot;, ...\n</code></pre>\n"],["sanitize_to_id","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-sanitize_to_id","(name)","<p>see www.w3.org/TR/html4/types.html#type-name\n"],["sanitizeable?","HTML::LinkSanitizer","classes/HTML/LinkSanitizer.html#method-i-sanitizeable-3F","(text)",""],["sanitizeable?","HTML::Sanitizer","classes/HTML/Sanitizer.html#method-i-sanitizeable-3F","(text)",""],["save","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-save","(*)","<p>Saves the model.\n<p>If the model is new a record gets created in the database, otherwise the\nexisting record …\n"],["save","ActiveRecord::SessionStore::SqlBypass","classes/ActiveRecord/SessionStore/SqlBypass.html#method-i-save","()",""],["save","ActiveRecord::Validations","classes/ActiveRecord/Validations.html#method-i-save","(options={})","<p>The validation process on save can be skipped by passing false. The regular\nBase#save method is replaced …\n"],["save","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-i-save","()","<p>POST create\n"],["save!","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-save-21","(*)","<p>Saves the model.\n<p>If the model is new a record gets created in the database, otherwise the\nexisting record …\n"],["save!","ActiveRecord::Validations","classes/ActiveRecord/Validations.html#method-i-save-21","(options={})","<p>Attempts to save the record just like Base#save but will raise a\nRecordInvalid exception instead of returning …\n"],["save_belongs_to_association","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-save_belongs_to_association","(reflection)","<p>Saves the associated record if it&#39;s new or <code>:autosave</code> is\nenabled.\n<p>In addition, it will destroy the …\n"],["save_collection_association","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-save_collection_association","(reflection)","<p>Saves any new associated records, or all loaded autosave associations if\n<code>:autosave</code> is enabled on the …\n"],["save_has_one_association","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-save_has_one_association","(reflection)","<p>Saves the associated record if it&#39;s new or <code>:autosave</code> is\nenabled on the association.\n<p>In addition, it …\n"],["say","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-say","(message, subitem=false)",""],["say_no_to_protect_against_forgery!","ActionView::TestCase::Behavior","classes/ActionView/TestCase/Behavior.html#method-i-say_no_to_protect_against_forgery-21","()",""],["say_with_time","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-say_with_time","(message)",""],["schema_format","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-schema_format","","<p>Specifies the format to use when dumping the database schema with\nRails&#39; Rakefile.  If :sql, the …\n"],["schema_search_path","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-schema_search_path","()","<p>Returns the active schema search path.\n"],["schema_search_path=","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-schema_search_path-3D","(schema_csv)","<p>Sets the schema search path to a string of comma-separated schema names.\nNames beginning with $ have …\n"],["scheme","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-scheme","()","<p>Returns &#39;https&#39; if this is an SSL request and &#39;http&#39;\notherwise.\n"],["scope","ActionDispatch::Routing::Mapper::Scoping","classes/ActionDispatch/Routing/Mapper/Scoping.html#method-i-scope","(*args)","<p>Used to scope a set of routes to particular constraints.\n<p>Take the following route definition as an example: …\n"],["scope","ActiveRecord::NamedScope::ClassMethods","classes/ActiveRecord/NamedScope/ClassMethods.html#method-i-scope","(name, scope_options = {}, &block)","<p>Adds a class method for retrieving and querying objects. A scope represents\na narrowing of a database …\n"],["scope_action_options","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-scope_action_options","()",""],["scope_action_options?","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-scope_action_options-3F","()",""],["scope_for_create","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-scope_for_create","()",""],["scope_key_by_partial","ActionView::Helpers::TranslationHelper","classes/ActionView/Helpers/TranslationHelper.html#method-i-scope_key_by_partial","(key)",""],["scope_options","ActionDispatch::Routing::Mapper::Scoping","classes/ActionDispatch/Routing/Mapper/Scoping.html#method-i-scope_options","()",""],["scoped","ActiveRecord::NamedScope::ClassMethods","classes/ActiveRecord/NamedScope/ClassMethods.html#method-i-scoped","(options = nil)","<p>Returns an anonymous scope.\n\n<pre><code>posts = Post.scoped\nposts.size # Fires &quot;select count(*) from  posts&quot; and returns ...</code></pre>\n"],["scopes","ActiveRecord::NamedScope::ClassMethods","classes/ActiveRecord/NamedScope/ClassMethods.html#method-i-scopes","()",""],["scoping","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-scoping","()","<p>Scope all queries to the current scope.\n<p>Example\n\n<pre><code>Comment.where(:post_id =&gt; 1).scoping do\n  Comment.first ...\n</code></pre>\n"],["search_dir","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-i-search_dir","(dir, &callback)",""],["search_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-search_field","(object_name, method, options = {})","<p>Returns a text_field of type “search”.\n"],["search_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-search_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type “search”.\n<p>Options\n<p>Accepts the same options as text_field_tag.\n"],["second","Array","classes/Array.html#method-i-second","()","<p>Equal to <code>self[1]</code>.\n"],["second","Numeric","classes/Numeric.html#method-i-second","()",""],["seconds","Numeric","classes/Numeric.html#method-i-seconds","()","<p>Enables the use of time calculations and declarations, like 45.minutes +\n2.hours + 4.years.\n<p>These methods …\n"],["seconds_since_midnight","DateTime","classes/DateTime.html#method-i-seconds_since_midnight","()","<p>Seconds since midnight: DateTime.now.seconds_since_midnight\n"],["seconds_since_midnight","Time","classes/Time.html#method-i-seconds_since_midnight","()","<p>Seconds since midnight: Time.now.seconds_since_midnight\n"],["seconds_since_unix_epoch","DateTime","classes/DateTime.html#method-i-seconds_since_unix_epoch","()",""],["seconds_to_utc_offset","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-c-seconds_to_utc_offset","(seconds, colon = true)","<p>Assumes self represents an offset from UTC in seconds (as returned from\nTime#utc_offset) and turns this …\n"],["secure_compare","ActiveSupport::MessageVerifier","classes/ActiveSupport/MessageVerifier.html#method-i-secure_compare","(a, b)","<p>constant-time comparison algorithm to prevent timing attacks\n"],["select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-select","(method, choices, options = {}, html_options = {})",""],["select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-select","(object, method, choices, options = {}, html_options = {})","<p>Create a select tag and a series of contained option tags for the provided\nobject and method. The option …\n"],["select","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-select","(pattern)","<p>Returns a collection reference by finding it through a CSS\n<code>pattern</code> in the DOM. This collection can then …\n"],["select","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select","(sql, name = nil)","<p>Returns an array of record hashes with the column names as keys and column\nvalues as values.\n"],["select","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-select","(sql, name = nil)",""],["select","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-select","(sql, name = nil)","<p>Executes a SELECT query and returns the results, performing any data type\nconversions that are required …\n"],["select","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-select","(value = Proc.new)",""],["select","HTML::Selector","classes/HTML/Selector.html#method-i-select","(root)","<p>Selects and returns an array with all matching elements, beginning with one\nnode and traversing through …\n"],["select","HTML::Tag","classes/HTML/Tag.html#method-i-select","(selector, *values)",""],["select_all","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_all","(sql, name = nil)","<p>Returns an array of record hashes with the column names as keys and column\nvalues as values.\n"],["select_all","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-select_all","(*args)",""],["select_date","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_date","(date = Date.current, options = {}, html_options = {})","<p>Returns a set of html select-tags (one for year, month, and day)\npre-selected with the <code>date</code>. It&#39;s …\n"],["select_datetime","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_datetime","(datetime = Time.current, options = {}, html_options = {})","<p>Returns a set of html select-tags (one for year, month, day, hour, and\nminute) pre-selected with the …\n"],["select_day","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_day","(date, options = {}, html_options = {})","<p>Returns a select tag with options for each of the days 1 through 31 with\nthe current day selected. The …\n"],["select_first","HTML::Selector","classes/HTML/Selector.html#method-i-select_first","(root)","<p>Similar to #select but returns the first matching element. Returns\n<code>nil</code> if no element matches the selector. …\n"],["select_for_count","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-select_for_count","()",""],["select_hour","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_hour","(datetime, options = {}, html_options = {})","<p>Returns a select tag with options for each of the hours 0 through 23 with\nthe current hour selected. …\n"],["select_minute","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_minute","(datetime, options = {}, html_options = {})","<p>Returns a select tag with options for each of the minutes 0 through 59 with\nthe current minute selected. …\n"],["select_month","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_month","(date, options = {}, html_options = {})","<p>Returns a select tag with options for each of the months January through\nDecember with the current month …\n"],["select_one","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_one","(sql, name = nil)","<p>Returns a record hash with the column names as keys and column values as\nvalues.\n"],["select_raw","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-select_raw","(sql, name = nil)",""],["select_rows","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_rows","(sql, name = nil)","<p>Returns an array of arrays containing the field values. Order is the same\nas that returned by <code>columns</code> …\n"],["select_rows","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-select_rows","(sql, name = nil)","<p>DATABASE STATEMENTS ======================================\n"],["select_rows","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-select_rows","(sql, name = nil)","<p>Executes a SELECT query and returns an array of rows. Each row is an array\nof field values.\n"],["select_rows","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-select_rows","(sql, name = nil)",""],["select_second","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_second","(datetime, options = {}, html_options = {})","<p>Returns a select tag with options for each of the seconds 0 through 59 with\nthe current second selected. …\n"],["select_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-select_tag","(name, option_tags = nil, options = {})","<p>Creates a dropdown selection box, or if the <code>:multiple</code> option\nis set to true, a multiple choice selection …\n"],["select_time","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_time","(datetime = Time.current, options = {}, html_options = {})","<p>Returns a set of html select-tags (one for hour and minute) You can set\n<code>:time_separator</code> key to format …\n"],["select_value","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_value","(sql, name = nil)","<p>Returns a single value from a record\n"],["select_values","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_values","(sql, name = nil)","<p>Returns an array of the values of the first column in a select:\n\n<pre><code>select_values(&quot;SELECT id FROM companies ...</code></pre>\n"],["select_year","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_year","(date, options = {}, html_options = {})","<p>Returns a select tag with options for each of the five years on each side\nof the current, which is selected. …\n"],["selector","HTML","classes/HTML.html#method-c-selector","(statement, *values)","<p>See HTML::Selector.new\n"],["send_action","ActionController::ImplicitRender","classes/ActionController/ImplicitRender.html#method-i-send_action","(*)",""],["send_data","ActionController::Instrumentation","classes/ActionController/Instrumentation.html#method-i-send_data","(data, options = {})",""],["send_data","ActionController::LogSubscriber","classes/ActionController/LogSubscriber.html#method-i-send_data","(event)",""],["send_data","ActionController::Streaming","classes/ActionController/Streaming.html#method-i-send_data","(data, options = {})","<p>Sends the given binary data to the browser. This method is similar to\n<code>render :text =&gt; data</code>, but also …\n"],["send_file","ActionController::Instrumentation","classes/ActionController/Instrumentation.html#method-i-send_file","(path, options={})",""],["send_file","ActionController::LogSubscriber","classes/ActionController/LogSubscriber.html#method-i-send_file","(event)",""],["send_file","ActionController::Streaming","classes/ActionController/Streaming.html#method-i-send_file","(path, options = {})","<p>Sends the file. This uses a server-appropriate method (such as X-Sendfile)\nvia the Rack::Sendfile middleware. …\n"],["send_file_headers!","ActionController::Streaming","classes/ActionController/Streaming.html#method-i-send_file_headers-21","(options)",""],["serializable_add_includes","ActiveRecord::Serialization","classes/ActiveRecord/Serialization.html#method-i-serializable_add_includes","(options = {})","<p>Add associations specified via the <code>:includes</code> option.\n<p>Expects a block that takes as arguments:\n\n<pre><code>+association+ ...</code></pre>\n"],["serializable_hash","ActiveModel::Serialization","classes/ActiveModel/Serialization.html#method-i-serializable_hash","(options = nil)",""],["serializable_hash","ActiveRecord::Serialization","classes/ActiveRecord/Serialization.html#method-i-serializable_hash","(options = nil)",""],["serialize","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-serialize","(attr_name, class_name = Object)","<p>If you have an attribute that needs to be saved to the database as an\nobject, and retrieved as the same …\n"],["serialized_attributes","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-serialized_attributes","()","<p>Returns a hash of all the attributes that have been specified for\nserialization as keys and their class …\n"],["server_error?","ActionDispatch::TestResponse","classes/ActionDispatch/TestResponse.html#method-i-server_error-3F","()",""],["server_port","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-server_port","()",""],["server_software","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-server_software","()","<p>Returns the lowercase name of the HTTP server software.\n"],["session","ActionDispatch::TestProcess","classes/ActionDispatch/TestProcess.html#method-i-session","()",""],["session","ActionDispatch::TestResponse::DeprecatedHelpers","classes/ActionDispatch/TestResponse/DeprecatedHelpers.html#method-i-session","()",""],["session_id_column","ActiveRecord::SessionStore::Session","classes/ActiveRecord/SessionStore/Session.html#method-i-session_id_column","()",""],["session_id_column","ActiveRecord::SessionStore::SqlBypass","classes/ActiveRecord/SessionStore/SqlBypass.html#method-c-session_id_column","","<p>The session id field defaults to &#39;session_id&#39;.\n"],["session_options=","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-session_options-3D","(options)",""],["session_store","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-session_store","(*args)",""],["set","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-set","(attribute, error)",""],["set_association_collection_records","ActiveRecord::AssociationPreload::ClassMethods","classes/ActiveRecord/AssociationPreload/ClassMethods.html#method-i-set_association_collection_records","(id_to_record_map, reflection_name, associated_records, key)",""],["set_association_single_records","ActiveRecord::AssociationPreload::ClassMethods","classes/ActiveRecord/AssociationPreload/ClassMethods.html#method-i-set_association_single_records","(id_to_record_map, reflection_name, associated_records, key)",""],["set_callback","ActiveSupport::Callbacks::ClassMethods","classes/ActiveSupport/Callbacks/ClassMethods.html#method-i-set_callback","(name, *filter_list, &block)","<p>Set callbacks for a previously defined callback.\n<p>Syntax:\n\n<pre><code>set_callback :save, :before, :before_meth\nset_callback ...</code></pre>\n"],["set_conditional_cache_control!","ActionDispatch::Http::Cache::Response","classes/ActionDispatch/Http/Cache/Response.html#method-i-set_conditional_cache_control-21","()",""],["set_content_type","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-set_content_type","(m, user_content_type, class_default)",""],["set_cookie","ActionDispatch::Session::AbstractStore","classes/ActionDispatch/Session/AbstractStore.html#method-i-set_cookie","(request, options)",""],["set_cookie","ActionDispatch::Session::CookieStore","classes/ActionDispatch/Session/CookieStore.html#method-i-set_cookie","(request, options)",""],["set_cycle","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-set_cycle","(name, cycle_object)",""],["set_default_backend","ActiveSupport::JSON","classes/ActiveSupport/JSON.html#method-i-set_default_backend","()",""],["set_environment","Rails::Server","classes/Rails/Server.html#method-i-set_environment","()",""],["set_inheritance_column","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-set_inheritance_column","(value = nil, &block)","<p>Sets the name of the inheritance column to use to the given value, or (if\nthe value # is nil or false) …\n"],["set_locking_column","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-set_locking_column","(value = nil, &block)","<p>Set the column to use for optimistic locking. Defaults to\n<code>lock_version</code>.\n"],["set_logger","ActiveSupport::LogSubscriber::TestHelper","classes/ActiveSupport/LogSubscriber/TestHelper.html#method-i-set_logger","(logger)","<p>Overwrite if you use another logger in your log subscriber:\n\n<pre><code>def logger\n  ActiveRecord::Base.logger = @logger ...\n</code></pre>\n"],["set_primary_key","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","classes/ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-set_primary_key","(value = nil, &block)","<p>Sets the name of the primary key column to use to the given value, or (if\nthe value is nil or false) …\n"],["set_sequence_name","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-set_sequence_name","(value = nil, &block)","<p>Sets the name of the sequence to use when generating ids to the given\nvalue, or (if the value is nil …\n"],["set_session","ActionDispatch::Session::AbstractStore","classes/ActionDispatch/Session/AbstractStore.html#method-i-set_session","(env, sid, session_data)",""],["set_session","ActionDispatch::Session::CookieStore","classes/ActionDispatch/Session/CookieStore.html#method-i-set_session","(env, sid, session_data)",""],["set_session","ActionDispatch::Session::MemCacheStore","classes/ActionDispatch/Session/MemCacheStore.html#method-i-set_session","(env, sid, session_data)",""],["set_session","ActiveRecord::SessionStore","classes/ActiveRecord/SessionStore.html#method-i-set_session","(env, sid, session_data)",""],["set_standard_conforming_strings","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-set_standard_conforming_strings","()","<p>Enable standard-conforming strings if available.\n"],["set_table_name","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-set_table_name","(value = nil, &block)","<p>Sets the table name. If the value is nil or false  then the value returned\nby the given block is used. …\n"],["set_test_assigns","ActionController::Testing","classes/ActionController/Testing.html#method-i-set_test_assigns","()",""],["setup","ActionView::Partials::PartialRenderer","classes/ActionView/Partials/PartialRenderer.html#method-i-setup","(options, block)",""],["setup","ActiveModel::Validations::AcceptanceValidator","classes/ActiveModel/Validations/AcceptanceValidator.html#method-i-setup","(klass)",""],["setup","ActiveModel::Validations::ConfirmationValidator","classes/ActiveModel/Validations/ConfirmationValidator.html#method-i-setup","(klass)",""],["setup","ActiveRecord::Validations::UniquenessValidator","classes/ActiveRecord/Validations/UniquenessValidator.html#method-i-setup","(klass)","<p>Unfortunately, we have to tie Uniqueness validators to a class.\n"],["setup","ActiveSupport::LogSubscriber::TestHelper","classes/ActiveSupport/LogSubscriber/TestHelper.html#method-i-setup","()",""],["setup","ActiveSupport::Testing::SetupAndTeardown::ClassMethods","classes/ActiveSupport/Testing/SetupAndTeardown/ClassMethods.html#method-i-setup","(*args, &block)",""],["setup_controller_request_and_response","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-setup_controller_request_and_response","()",""],["setup_horo_variables","Rails::API::Task","classes/Rails/API/Task.html#method-i-setup_horo_variables","()",""],["setup_sessid_compatibility!","ActiveRecord::SessionStore::Session","classes/ActiveRecord/SessionStore/Session.html#method-i-setup_sessid_compatibility-21","()","<p>Compatibility with tables using sessid instead of session_id.\n"],["setup_subscriptions","ActionController::TemplateAssertions","classes/ActionController/TemplateAssertions.html#method-i-setup_subscriptions","()",""],["setup_with_controller","ActionView::TestCase::Behavior","classes/ActionView/TestCase/Behavior.html#method-i-setup_with_controller","()",""],["shallow","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-shallow","()",""],["shallow?","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-shallow-3F","()",""],["shallow_scoping?","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-shallow_scoping-3F","()",""],["should_compress?","ActiveSupport::Cache::Entry","classes/ActiveSupport/Cache/Entry.html#method-i-should_compress-3F","(value, options)",""],["should_record_timestamps?","ActiveRecord::Timestamp","classes/ActiveRecord/Timestamp.html#method-i-should_record_timestamps-3F","()",""],["show","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-show","(*ids)","<p>Shows hidden DOM elements with the given <code>ids</code>.\n<p>Example:\n\n<pre><code># Show a few people\n# Generates: [&quot;person_6&quot;, &quot;person_13&quot;, ...</code></pre>\n"],["show_variable","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-show_variable","(name)","<p>SHOW VARIABLES LIKE &#39;name&#39;\n"],["silence","ActiveSupport::BacktraceCleaner","classes/ActiveSupport/BacktraceCleaner.html#method-i-silence","(backtrace)",""],["silence","ActiveSupport::Benchmarkable","classes/ActiveSupport/Benchmarkable.html#method-i-silence","()","<p>Silence the logger during the execution of the block.\n"],["silence","ActiveSupport::BufferedLogger","classes/ActiveSupport/BufferedLogger.html#method-i-silence","(temporary_level = ERROR)","<p>Silences the logger for the duration of the block.\n"],["silence","ActiveSupport::Deprecation","classes/ActiveSupport/Deprecation.html#method-i-silence","()","<p>Silence deprecation warnings within the block.\n"],["silence","Rails::Generators::TestCase","classes/Rails/Generators/TestCase.html#method-i-silence","(stream)",""],["silence!","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-silence-21","()","<p>Silence the logger.\n"],["silence_stream","Kernel","classes/Kernel.html#method-i-silence_stream","(stream)","<p>Silences any stream for the duration of the block.\n\n<pre><code>silence_stream(STDOUT) do\n  puts &#39;This will never be ...</code></pre>\n"],["silence_warnings","Kernel","classes/Kernel.html#method-i-silence_warnings","()","<p>Sets $VERBOSE to nil for the duration of the block and back to its original\nvalue afterwards.\n\n<pre><code>silence_warnings ...</code></pre>\n"],["silencer","ActiveSupport::BufferedLogger","classes/ActiveSupport/BufferedLogger.html#method-c-silencer","","<p>Set to false to disable the silencer\n"],["simple_format","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-simple_format","(text, html_options={}, options={})","<p>Returns <code>text</code> transformed into HTML using simple formatting\nrules. Two or more consecutive newlines(<code>\\n\\n</code> …\n"],["simple_selector","HTML::Selector","classes/HTML/Selector.html#method-i-simple_selector","(statement, values, can_negate = true)","<p>Creates a simple selector given the statement and array of substitution\nvalues.\n<p>Returns a hash with the …\n"],["simplified_type","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-i-simplified_type","(field_type)",""],["simplified_type","ActiveRecord::ConnectionAdapters::PostgreSQLColumn","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn.html#method-i-simplified_type","(field_type)","<p>Maps PostgreSQL-specific data types to logical Rails types.\n"],["since","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-since","(time = ::Time.current)","<p>Calculates a new Time or Date that is as far in the future as this Duration\nrepresents.\n"],["since","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-since","(other)",""],["since","Date","classes/Date.html#method-i-since","(seconds)","<p>Converts Date to a Time (or DateTime if necessary) with the time portion\nset to the beginning of the …\n"],["since","DateTime","classes/DateTime.html#method-i-since","(seconds)","<p>Returns a new DateTime representing the time a number of seconds since the\ninstance time Do not use this …\n"],["since","Numeric","classes/Numeric.html#method-i-since","(time = ::Time.current)","<p>Reads best with argument:  10.minutes.since(time)\n"],["since","Time","classes/Time.html#method-i-since","(seconds)","<p>Returns a new Time representing the time a number of seconds since the\ninstance time\n"],["singleton_class","Kernel","classes/Kernel.html#method-i-singleton_class","()","<p>Returns the object&#39;s singleton class.\n"],["singular","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-c-singular","(record_or_class)","<p>Returns the singular class name of a record or class. Examples:\n\n<pre><code>ActiveModel::Naming.singular(post)    ...</code></pre>\n"],["singular","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-i-singular","(rule, replacement)","<p>Specifies a new singularization rule and its replacement. The rule can\neither be a string or a regular …\n"],["singular_table_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-singular_table_name","()",""],["singularize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-singularize","(word)","<p>The reverse of <code>pluralize</code>, returns the singular form of a word\nin a string.\n<p>Examples:\n\n<pre><code>&quot;posts&quot;.singularize ...</code></pre>\n"],["singularize","String","classes/String.html#method-i-singularize","()","<p>The reverse of <code>pluralize</code>, returns the singular form of a word\nin a string.\n\n<pre><code>&quot;posts&quot;.singularize        ...</code></pre>\n"],["size","ActionDispatch::Http::UploadedFile","classes/ActionDispatch/Http/UploadedFile.html#method-i-size","()",""],["size","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-size","()","<p>Returns the number of error messages.\n\n<pre><code>p.errors.add(:name, &quot;can&#39;t be blank&quot;)\np.errors.size # =&gt; 1\np.errors.add(:name, ...\n</code></pre>\n"],["size","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-size","()","<p>Returns size of the records.\n"],["size","ActiveSupport::Cache::Entry","classes/ActiveSupport/Cache/Entry.html#method-i-size","()","<p>Returns the size of the cached value. This could be less than value.size if\nthe data is compressed.\n"],["size","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-size","()","<p>Returns the number of codepoints in the string\n"],["skip_callback","ActiveSupport::Callbacks::ClassMethods","classes/ActiveSupport/Callbacks/ClassMethods.html#method-i-skip_callback","(name, *filter_list, &block)","<p>Skip a previously defined callback for a given type.\n"],["skip_default_locale!","ActionView::LookupContext::Details","classes/ActionView/LookupContext/Details.html#method-i-skip_default_locale-21","()","<p>Do not use the default locale on template lookup.\n"],["skip_filter","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-skip_filter","(*names, &blk)","<p>Skip before, after, and around filters matching any of the names\n<p>Parameters\n<p><code>names</code> - A list of valid names …\n"],["slice","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-slice","(*args)","<p>Implements Unicode-aware slice with codepoints. Slicing on one point\nreturns the codepoints for that …\n"],["slice","Hash","classes/Hash.html#method-i-slice","(*keys)","<p>Slice a hash to include only the given keys. This is useful for limiting an\noptions hash to valid keys …\n"],["slice!","Hash","classes/Hash.html#method-i-slice-21","(*keys)","<p>Replaces the hash with only the given keys. Returns a hash contained the\nremoved key/value pairs\n\n<pre><code>{:a =&gt; ...\n</code></pre>\n"],["sortable","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-sortable","(id, options = {})","<p>Creates a script.aculo.us sortable element. Useful to recreate sortable\nelements after items get added …\n"],["sortable_element","ActionView::Helpers::ScriptaculousHelper","classes/ActionView/Helpers/ScriptaculousHelper.html#method-i-sortable_element","(element_id, options = {})","<p>Makes the element with the DOM ID specified by <code>element_id</code>\nsortable by drag-and-drop and make an Ajax …\n"],["source_root","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-source_root","(path=nil)","<p>Returns the source root for this generator using default_source_root as\ndefault.\n"],["split","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-split","(*args)","<p>Works just like <code>String#split</code>, with the exception that the\nitems in the resulting list are Chars instances …\n"],["split","Array","classes/Array.html#method-i-split","(value = nil)","<p>Divides the array into one or more subarrays based on a delimiting\n<code>value</code> or the result of an optional …\n"],["split_args","Commands::Plugin","classes/Commands/Plugin.html#method-i-split_args","(args)",""],["sql","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-i-sql","(event)",""],["sql_conditions","ActiveRecord::Associations::ThroughAssociationScope","classes/ActiveRecord/Associations/ThroughAssociationScope.html#method-i-sql_conditions","()",""],["sql_query_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-sql_query_length","()","<p>the maximum length of an SQL query\n"],["sqlite_version","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-sqlite_version","()",""],["squish","String","classes/String.html#method-i-squish","()","<p>Returns the string, first removing all whitespace on both ends of the\nstring, and then changing remaining …\n"],["squish!","String","classes/String.html#method-i-squish-21","()","<p>Performs a destructive squish. See String#squish.\n"],["ssl?","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-ssl-3F","()","<p>Is this an SSL request?\n"],["stale?","ActionController::ConditionalGet","classes/ActionController/ConditionalGet.html#method-i-stale-3F","(options)","<p>Sets the etag and/or last_modified on the response and checks it against\nthe client request. If the request …\n"],["stale_session_check!","ActionDispatch::Session::AbstractStore","classes/ActionDispatch/Session/AbstractStore.html#method-i-stale_session_check-21","()",""],["standard_port","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-standard_port","()","<p>Returns the standard port number for this request&#39;s protocol.\n"],["standard_port?","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-standard_port-3F","()","<p>Returns whether this request is using the standard port\n"],["start","ActiveSupport::Callbacks::Callback","classes/ActiveSupport/Callbacks/Callback.html#method-i-start","(key=nil, object=nil)","<p>This will supply contents for before and around filters, and no contents\nfor after filters (for the forward …\n"],["start","Rails::Console","classes/Rails/Console.html#method-c-start","(app)",""],["start","Rails::Console","classes/Rails/Console.html#method-i-start","()",""],["start","Rails::DBConsole","classes/Rails/DBConsole.html#method-c-start","(app)",""],["start","Rails::DBConsole","classes/Rails/DBConsole.html#method-i-start","()",""],["start","Rails::Server","classes/Rails/Server.html#method-i-start","()",""],["start_document","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-start_document","()",""],["start_element","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-start_element","(name, attrs = [])",""],["start_processing","ActionController::LogSubscriber","classes/ActionController/LogSubscriber.html#method-i-start_processing","(event)",""],["stats","ActiveSupport::Cache::MemCacheStore","classes/ActiveSupport/Cache/MemCacheStore.html#method-i-stats","()","<p>Get the statistics from the memcached servers.\n"],["status","ActionController::Metal","classes/ActionController/Metal.html#method-i-status","()",""],["status=","ActionController::Metal","classes/ActionController/Metal.html#method-i-status-3D","(status)",""],["status=","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-status-3D","(status)",""],["status_code","ActionDispatch::ShowExceptions","classes/ActionDispatch/ShowExceptions.html#method-i-status_code","(exception)",""],["status_message","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-status_message","()",""],["step_with_blockless","Range","classes/Range.html#method-i-step_with_blockless","(*args, &block)",""],["sti_name","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-sti_name","()",""],["store","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-store","(key, value)",""],["store","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-store","(key, value)",""],["strenc","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-strenc","(s)",""],["strftime","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-strftime","(format)","<p>Replaces <code>%Z</code> and <code>%z</code> directives with\n<code>zone</code> and <code>formatted_offset</code>, respectively, before\npassing to Time#strftime …\n"],["string_body?","ActionDispatch::Http::Cache::Response","classes/ActionDispatch/Http/Cache/Response.html#method-i-string_body-3F","()",""],["string_to_binary","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-i-string_to_binary","(value)","<p>Used to convert from Strings to BLOBs\n"],["string_to_date","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-i-string_to_date","(string)",""],["string_to_dummy_time","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-i-string_to_dummy_time","(string)",""],["string_to_time","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-i-string_to_time","(string)",""],["stringify_keys","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-stringify_keys","()",""],["stringify_keys","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-stringify_keys","()",""],["stringify_keys","Hash","classes/Hash.html#method-i-stringify_keys","()","<p>Return a new hash with all keys converted to strings.\n"],["stringify_keys!","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-stringify_keys-21","()",""],["stringify_keys!","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-stringify_keys-21","()",""],["stringify_keys!","Hash","classes/Hash.html#method-i-stringify_keys-21","()","<p>Destructively convert all keys to strings.\n"],["strip","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-strip","()","<p>Strips entire range of Unicode whitespace from the right and left of the\nstring.\n"],["strip_heredoc","String","classes/String.html#method-i-strip_heredoc","()","<p>Strips indentation in heredocs.\n<p>For example in\n\n<pre><code>if options[:usage]\n  puts &lt;&lt;-USAGE.strip_heredoc\n    This ...</code></pre>\n"],["strip_links","ActionView::Helpers::SanitizeHelper","classes/ActionView/Helpers/SanitizeHelper.html#method-i-strip_links","(html)","<p>Strips all link tags from <code>text</code> leaving just the link text.\n<p>Examples\n\n<pre><code>strip_links(&#39;&lt;a href=&quot;http://www.rubyonrails.org&quot;&gt;Ruby ...</code></pre>\n"],["strip_tags","ActionView::Helpers::SanitizeHelper","classes/ActionView/Helpers/SanitizeHelper.html#method-i-strip_tags","(html)","<p>Strips all HTML tags from the <code>html</code>, including comments.  This\nuses the html-scanner tokenizer and so …\n"],["strtok","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-strtok","(s)",""],["structure_dump","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-structure_dump","()","<p>Returns a string of <code>CREATE TABLE</code> SQL statement(s) for\nrecreating the entire structure of the database. …\n"],["stylesheet_link_tag","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-stylesheet_link_tag","(*sources)","<p>Returns a stylesheet link tag for the sources specified as arguments. If\nyou don&#39;t specify an extension, …\n"],["stylesheet_path","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-stylesheet_path","(source)","<p>Computes the path to a stylesheet asset in the public stylesheets\ndirectory. If the <code>source</code> filename has …\n"],["stylesheet_tag","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-stylesheet_tag","(source, options)",""],["subclasses","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-subclasses","()",""],["subclasses","Rails::Generators","classes/Rails/Generators.html#method-c-subclasses","()","<p>Track all generators subclasses.\n"],["subclasses","Rails::Railtie","classes/Rails/Railtie.html#method-i-subclasses","()",""],["subdomain","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-subdomain","(tld_length = 1)",""],["subdomains","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-subdomains","(tld_length = 1)","<p>Returns all the subdomains as an array, so <code>[&quot;dev&quot;,\n&quot;www&quot;]</code> would be returned for “dev. …\n"],["submit","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-submit","(value=nil, options={})","<p>Add the submit button for the given form. When no value is given, it checks\nif the object is a new resource …\n"],["submit_default_value","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-submit_default_value","()",""],["submit_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-submit_tag","(value = \"Save changes\", options = {})","<p>Creates a submit button with the text <code>value</code> as the caption.\n<p>Options\n<p><code>:confirm =&gt; &#39;question?&#39;</code> …\n"],["subscribe","ActiveSupport::Notifications","classes/ActiveSupport/Notifications.html#method-i-subscribe","(*args, &block)",""],["subscribe","ActiveSupport::Notifications::Fanout","classes/ActiveSupport/Notifications/Fanout.html#method-i-subscribe","(pattern = nil, block = Proc.new)",""],["subst","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-subst","(u1, u2)",""],["success?","ActionDispatch::TestResponse","classes/ActionDispatch/TestResponse.html#method-i-success-3F","()","<p>Was the response successful?\n"],["sum","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-sum","(column_name, options = {})","<p>Calculates the sum of values on a given column. The value is returned with\nthe same data type of the …\n"],["sum","Enumerable","classes/Enumerable.html#method-i-sum","(identity = 0, &block)","<p>Calculates a sum from the elements. Examples:\n\n<pre><code>payments.sum { |p| p.price * p.tax_rate }\npayments.sum(&amp;:price)\n</code></pre>\n"],["sunday","Date","classes/Date.html#method-i-sunday","()",""],["superclass_delegating_accessor","Class","classes/Class.html#method-i-superclass_delegating_accessor","(name, options = {})",""],["supports_add_column?","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-supports_add_column-3F","()",""],["supports_count_distinct?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_count_distinct-3F","()","<p>Does this adapter support using DISTINCT within COUNT?  This is\n<code>true</code> for all adapters except sqlite. …\n"],["supports_ddl_transactions?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_ddl_transactions-3F","()","<p>Does this adapter support DDL rollbacks in transactions?  That is, would\nCREATE TABLE or ALTER TABLE …\n"],["supports_ddl_transactions?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_ddl_transactions-3F","()",""],["supports_ddl_transactions?","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-supports_ddl_transactions-3F","()",""],["supports_insert_with_returning?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_insert_with_returning-3F","()",""],["supports_migrations?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_migrations-3F","()","<p>Does this adapter support migrations?  Backend specific, as the abstract\nadapter always returns <code>false</code> …\n"],["supports_migrations?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_migrations-3F","()","<p>Does PostgreSQL support migrations?\n"],["supports_primary_key?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_primary_key-3F","()","<p>Can this adapter determine the primary key for tables not attached to an\nActive Record class, such as …\n"],["supports_savepoints?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_savepoints-3F","()","<p>Does this adapter support savepoints? PostgreSQL and MySQL do, SQLite does\nnot.\n"],["supports_savepoints?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_savepoints-3F","()",""],["supports_views?","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-supports_views-3F","()",""],["suppress","Kernel","classes/Kernel.html#method-i-suppress","(*exception_classes)","<p>Blocks and ignores any exception passed as argument if raised within the\nblock.\n\n<pre><code>suppress(ZeroDivisionError) ...</code></pre>\n"],["suppress_messages","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-suppress_messages","()",""],["surrogate?","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-surrogate-3F","(u)",""],["svn_command","Plugin","classes/Plugin.html#method-i-svn_command","(cmd, options = {})",""],["svn_url?","Plugin","classes/Plugin.html#method-i-svn_url-3F","()",""],["swap","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-swap","(target, *args, &block)",""],["symbolize_keys","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-symbolize_keys","()",""],["symbolize_keys","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-symbolize_keys","()",""],["symbolize_keys","Hash","classes/Hash.html#method-i-symbolize_keys","()","<p>Return a new hash with all keys converted to symbols, as long as they\nrespond to <code>to_sym</code>.\n"],["symbolize_keys!","Hash","classes/Hash.html#method-i-symbolize_keys-21","()","<p>Destructively convert all keys to symbols, as long as they respond to\n<code>to_sym</code>.\n"],["symbolized_path_parameters","ActionDispatch::Http::Parameters","classes/ActionDispatch/Http/Parameters.html#method-i-symbolized_path_parameters","()","<p>The same as <code>path_parameters</code> with explicitly symbolized keys.\n"],["symbols","Mime::Mimes","classes/Mime/Mimes.html#method-i-symbols","()",""],["synchronize","Module","classes/Module.html#method-i-synchronize","(*methods)","<p>Synchronize access around a method, delegating synchronization to a\nparticular mutex. A mutex (either …\n"],["t","AbstractController::Translation","classes/AbstractController/Translation.html#method-i-t","(*args)",""],["t","ActionView::Helpers::TranslationHelper","classes/ActionView/Helpers/TranslationHelper.html#method-i-t","(key, options = {})",""],["table_alias_for","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-table_alias_for","(table_name)","<p>Truncates a table alias according to the limits of the current adapter.\n"],["table_alias_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-table_alias_length","()","<p>the maximum length of a table alias\n"],["table_alias_length","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-table_alias_length","()","<p>Returns the configured supported identifier length supported by PostgreSQL,\nor report the default of …\n"],["table_exists?","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-table_exists-3F","()","<p>Indicates whether the table associated with this class exists\n"],["table_exists?","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-table_exists-3F","(name)",""],["table_exists?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-table_exists-3F","(name)",""],["table_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-table_exists-3F","(table_name)","<p>def tables(name = nil) end\n"],["table_name","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-table_name","()","<p>Guesses the table name (in forced lower-case) based on the name of the\nclass in the inheritance hierarchy …\n"],["table_name","ActiveRecord::SessionStore::SqlBypass","classes/ActiveRecord/SessionStore/SqlBypass.html#method-c-table_name","","<p>The table name defaults to &#39;sessions&#39;.\n"],["table_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-table_name","()",""],["table_name_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-table_name_length","()","<p>the maximum length of a table name\n"],["table_name_prefix","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-table_name_prefix","","<p>Accessor for the name of the prefix string to prepend to every table name.\nSo if set to “basecamp_”, …\n"],["table_name_suffix","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-table_name_suffix","","<p>Works like <code>table_name_prefix</code>, but appends instead of prepends\n(set to “_basecamp” gives “projects_basecamp”, …\n"],["table_structure","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-table_structure","(table_name)",""],["tableize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-tableize","(class_name)","<p>Create the name of a table like Rails does for models to table names. This\nmethod uses the <code>pluralize</code> …\n"],["tableize","String","classes/String.html#method-i-tableize","()","<p>Creates the name of a table like Rails does for models to table names. This\nmethod uses the <code>pluralize</code> …\n"],["tables","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-tables","(name = nil)","<p>Returns the list of all tables in the schema search path or a specified\nschema.\n"],["tables_in_string","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-tables_in_string","(string)",""],["tag","ActionView::Helpers::ActiveModelInstanceTag","classes/ActionView/Helpers/ActiveModelInstanceTag.html#method-i-tag","(type, options, *)",""],["tag","ActionView::Helpers::TagHelper","classes/ActionView/Helpers/TagHelper.html#method-i-tag","(name, options = nil, open = false, escape = true)","<p>Returns an empty HTML tag of type <code>name</code> which by default is\nXHTML compliant. Set <code>open</code> to true to create …\n"],["tag_generate_errors?","ActionView::Helpers::ActiveModelInstanceTag","classes/ActionView/Helpers/ActiveModelInstanceTag.html#method-i-tag_generate_errors-3F","(options)",""],["tag_options","ActionView::Helpers::TagHelper","classes/ActionView/Helpers/TagHelper.html#method-i-tag_options","(options, escape = true)",""],["tail!","Rails::Rack::LogTailer","classes/Rails/Rack/LogTailer.html#method-i-tail-21","()",""],["teardown","ActiveSupport::LogSubscriber::TestHelper","classes/ActiveSupport/LogSubscriber/TestHelper.html#method-i-teardown","()",""],["teardown","ActiveSupport::Testing::SetupAndTeardown::ClassMethods","classes/ActiveSupport/Testing/SetupAndTeardown/ClassMethods.html#method-i-teardown","(*args, &block)",""],["teardown_subscriptions","ActionController::TemplateAssertions","classes/ActionController/TemplateAssertions.html#method-i-teardown_subscriptions","()",""],["telephone_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-telephone_field","(object_name, method, options = {})","<p>Returns a text_field of type “tel”.\n"],["telephone_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-telephone_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type “tel”.\n<p>Options\n<p>Accepts the same options as text_field_tag.\n"],["template","ActionDispatch::TestResponse::DeprecatedHelpers","classes/ActionDispatch/TestResponse/DeprecatedHelpers.html#method-i-template","()",""],["template_exists?","ActionView::LookupContext::ViewPaths","classes/ActionView/LookupContext/ViewPaths.html#method-i-template_exists-3F","(name, prefix = nil, partial = false)",""],["template_objects","ActionDispatch::TestResponse::DeprecatedHelpers","classes/ActionDispatch/TestResponse/DeprecatedHelpers.html#method-i-template_objects","()","<p>A shortcut to the template.assigns\n"],["templates_path","Rails::Generators","classes/Rails/Generators.html#method-c-templates_path","()",""],["terabyte","Numeric","classes/Numeric.html#method-i-terabyte","()",""],["terabytes","Numeric","classes/Numeric.html#method-i-terabytes","()",""],["test","ActiveSupport::Testing::Declarative","classes/ActiveSupport/Testing/Declarative.html#method-i-test","(name, &block)","<p>test “verify something” do\n\n<pre><code>...</code></pre>\n<p>end\n"],["test_errors_aref","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_errors_aref","()","<p>Errors Testing\n<p>Returns an object that has :[] and :full_messages defined on it. See below\nfor more details. …\n"],["test_errors_full_messages","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_errors_full_messages","()","<p>Returns an Array of all error messages for the object. Each message should\ncontain information about …\n"],["test_homepage","BrowsingTest","classes/BrowsingTest.html#method-i-test_homepage","()",""],["test_model_naming","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_model_naming","()","<p>Naming\n<p>Model.model_name must return a string with some convenience methods as\n:human and :partial_path. …\n"],["test_persisted?","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_persisted-3F","()","<p>Responds to <code>persisted?</code>\n<p>Returns a boolean that specifies whether the object has been persisted yet.\nThis …\n"],["test_to_key","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_to_key","()","<p>Responds to <code>to_key</code>\n<p>Returns an Enumerable of all (primary) key attributes or nil if\nmodel.persisted? is …\n"],["test_to_param","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_to_param","()","<p>Responds to <code>to_param</code>\n<p>Returns a string representing the object&#39;s key suitable for use in URLs\nor nil …\n"],["test_valid?","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_valid-3F","()","<p>Responds to <code>valid?</code>\n<p>Returns a boolean that specifies whether the object is in a valid or\ninvalid state. …\n"],["tests","ActionController::TestCase::Behavior::ClassMethods","classes/ActionController/TestCase/Behavior/ClassMethods.html#method-i-tests","(controller_class)","<p>Sets the controller class name. Useful if the name can&#39;t be inferred\nfrom test class. Expects <code>controller_class</code> …\n"],["tests","ActionView::TestCase::Behavior::ClassMethods","classes/ActionView/TestCase/Behavior/ClassMethods.html#method-i-tests","(helper_class)",""],["tests","Rails::Generators::TestCase","classes/Rails/Generators/TestCase.html#method-c-tests","(klass)","<p>Sets which generator should be tested:\n\n<pre><code>tests AppGenerator</code></pre>\n"],["text?","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-i-text-3F","()","<p>Returns <code>true</code> if the column is either of type string or text.\n"],["text_area","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-text_area","(object_name, method, options = {})","<p>Returns a textarea opening and closing tag set tailored for accessing a\nspecified attribute (identified …\n"],["text_area_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-text_area_tag","(name, content = nil, options = {})","<p>Creates a text input area; use a textarea for longer text inputs such as\nblog posts or descriptions. …\n"],["text_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-text_field","(object_name, method, options = {})","<p>Returns an input tag of the “text” type tailored for accessing a specified\nattribute (identified …\n"],["text_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-text_field_tag","(name, value = nil, options = {})","<p>Creates a standard text field; use these text fields to input smaller\nchunks of text like a username …\n"],["textparse","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-textparse","(ts)","<p>Parses a “json text” in the sense of RFC 4627. Returns the parsed value and\nany trailing tokens. …\n"],["third","Array","classes/Array.html#method-i-third","()","<p>Equal to <code>self[2]</code>.\n"],["thread_local_key","ActiveSupport::Cache::Strategy::LocalCache","classes/ActiveSupport/Cache/Strategy/LocalCache.html#method-i-thread_local_key","()",""],["threadsafe!","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-threadsafe-21","()","<p>Enable threaded mode. Allows concurrent requests to controller actions and\nmultiple database connections. …\n"],["tidy_byte","ActiveSupport::Multibyte::Unicode","classes/ActiveSupport/Multibyte/Unicode.html#method-i-tidy_byte","(byte)",""],["tidy_bytes","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-tidy_bytes","(force = false)","<p>Replaces all ISO-8859-1 or CP1252 characters by their UTF-8 equivalent\nresulting in a valid UTF-8 string. …\n"],["tidy_bytes","ActiveSupport::Multibyte::Unicode","classes/ActiveSupport/Multibyte/Unicode.html#method-i-tidy_bytes","(string, force = false)","<p>Replaces all ISO-8859-1 or CP1252 characters by their UTF-8 equivalent\nresulting in a valid UTF-8 string. …\n"],["time","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-time","()","<p>Returns a Time or DateTime instance that represents the time in\n<code>time_zone</code>.\n"],["time_ago_in_words","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-time_ago_in_words","(from_time, include_seconds = false)","<p>Like distance_of_time_in_words, but where <code>to_time</code> is fixed to\n<code>Time.now</code>.\n<p>Examples\n\n<pre><code>time_ago_in_words(3.minutes.from_now) ...</code></pre>\n"],["time_select","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-time_select","(object_name, method, options = {}, html_options = {})","<p>Returns a set of select tags (one for hour, minute and optionally second)\npre-selected for accessing …\n"],["time_select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-time_select","(method, options = {}, html_options = {})",""],["time_with_datetime_fallback","Time","classes/Time.html#method-i-time_with_datetime_fallback","(utc_or_local, year, month=1, day=1, hour=0, min=0, sec=0, usec=0)","<p>Returns a new Time if requested year can be accommodated by Ruby&#39;s Time\nclass (i.e., if year is within …\n"],["time_zone_options_for_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-time_zone_options_for_select","(selected = nil, priority_zones = nil, model = ::ActiveSupport::TimeZone)","<p>Returns a string of option tags for pretty much any time zone in the world.\nSupply a ActiveSupport::TimeZone …\n"],["time_zone_select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-time_zone_select","(method, priority_zones = nil, options = {}, html_options = {})",""],["time_zone_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-time_zone_select","(object, method, priority_zones = nil, options = {}, html_options = {})","<p>Return select and option tags for the given object and method, using\n#time_zone_options_for_select to …\n"],["timestamp_attributes_for_update_in_model","ActiveRecord::Timestamp","classes/ActiveRecord/Timestamp.html#method-i-timestamp_attributes_for_update_in_model","()",""],["timestamp_column_names","Fixtures","classes/Fixtures.html#method-i-timestamp_column_names","()",""],["timestamped_migrations","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-timestamped_migrations","","<p>Specify whether or not to use timestamps for migration versions\n"],["timestamps","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-timestamps","()","<p>Adds timestamps (created_at and updated_at) columns to the table. See\nSchemaStatements#add_timestamps …\n"],["timestamps","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-timestamps","(*args)","<p>Appends <code>:datetime</code> columns <code>:created_at</code> and\n<code>:updated_at</code> to the table.\n"],["titlecase","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-titlecase","()",""],["titlecase","String","classes/String.html#method-i-titlecase","()",""],["titleize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-titleize","(word)","<p>Capitalizes all the words and replaces some characters in the string to\ncreate a nicer looking title. …\n"],["titleize","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-titleize","()","<p>Capitalizes the first letter of every word, when possible.\n<p>Example:\n\n<pre><code>&quot;ÉL QUE SE ENTERÓ&quot;.mb_chars.titleize ...</code></pre>\n"],["titleize","String","classes/String.html#method-i-titleize","()","<p>Capitalizes all the words and replaces some characters in the string to\ncreate a nicer looking title. …\n"],["to","Array","classes/Array.html#method-i-to","(position)","<p>Returns the beginning of the array up to <code>position</code>.\n\n<pre><code>%w( a b c d ).to(0)  # =&gt; %w( a )\n%w( a b c d ).to(2) ...\n</code></pre>\n"],["to","String","classes/String.html#method-i-to","(position)","<p>Returns the beginning of the string up to the <code>position</code>\ntreating the string as an array (where 0 is the …\n"],["to_a","ActionController::Metal","classes/ActionController/Metal.html#method-i-to_a","()","<p>:api: private\n"],["to_a","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-to_a","()",""],["to_a","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-to_a","()","<p>Returns an array of error messages, with the attribute name included\n\n<pre><code>p.errors.add(:name, &quot;can&#39;t be blank&quot;) ...</code></pre>\n"],["to_a","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-to_a","()",""],["to_a","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-to_a","()",""],["to_a","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-to_a","()",""],["to_d","BigDecimal","classes/BigDecimal.html#method-i-to_d","()",""],["to_date","Date","classes/Date.html#method-i-to_date","()","<p>A method to keep Time, Date and DateTime instances interchangeable on\nconversions. In this case, it simply …\n"],["to_date","DateTime","classes/DateTime.html#method-i-to_date","()","<p>Converts self to a Ruby Date object; time portion is discarded\n"],["to_date","String","classes/String.html#method-i-to_date","()",""],["to_date","Time","classes/Time.html#method-i-to_date","()","<p>Converts a Time object to a Date, dropping hour, minute, and second\nprecision.\n\n<pre><code>my_time = Time.now  # =&gt; ...\n</code></pre>\n"],["to_datetime","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-to_datetime","()",""],["to_datetime","Date","classes/Date.html#method-i-to_datetime","()","<p>Converts a Date instance to a DateTime, where the time is set to the\nbeginning of the day and UTC offset …\n"],["to_datetime","DateTime","classes/DateTime.html#method-i-to_datetime","()","<p>To be able to keep Times, Dates and DateTimes interchangeable on\nconversions\n"],["to_datetime","String","classes/String.html#method-i-to_datetime","()",""],["to_datetime","Time","classes/Time.html#method-i-to_datetime","()","<p>Converts a Time instance to a Ruby DateTime instance, preserving UTC\noffset.\n\n<pre><code>my_time = Time.now    # =&gt; ...\n</code></pre>\n"],["to_default_s","Array","classes/Array.html#method-i-to_default_s","(format = :default)",""],["to_default_s","Date","classes/Date.html#method-i-to_default_s","(format = :default)",""],["to_default_s","DateTime","classes/DateTime.html#method-i-to_default_s","(format = :default)",""],["to_default_s","Range","classes/Range.html#method-i-to_default_s","(format = :default)",""],["to_default_s","Time","classes/Time.html#method-i-to_default_s","(format = :default)",""],["to_f","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-to_f","()",""],["to_f","DateTime","classes/DateTime.html#method-i-to_f","()","<p>Converts self to a floating-point number of seconds since the Unix epoch\n"],["to_format","ActionController::Responder","classes/ActionController/Responder.html#method-i-to_format","()","<p>All other formats follow the procedure below. First we try to render a\ntemplate, if the template is not …\n"],["to_formatted_s","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-to_formatted_s","(format = :default)",""],["to_formatted_s","Array","classes/Array.html#method-i-to_formatted_s","(format = :default)","<p>Converts a collection of elements into a formatted string by calling\n<code>to_s</code> on all elements and joining …\n"],["to_formatted_s","BigDecimal","classes/BigDecimal.html#method-i-to_formatted_s","(format = DEFAULT_STRING_FORMAT)",""],["to_formatted_s","Date","classes/Date.html#method-i-to_formatted_s","(format = :default)","<p>Convert to a formatted string. See DATE_FORMATS for predefined formats.\n<p>This method is aliased to <code>to_s</code> …\n"],["to_formatted_s","DateTime","classes/DateTime.html#method-i-to_formatted_s","(format = :default)","<p>Convert to a formatted string. See Time::DATE_FORMATS for predefined\nformats.\n<p>This method is aliased to …\n"],["to_formatted_s","Range","classes/Range.html#method-i-to_formatted_s","(format = :default)","<p>Gives a human readable format of the range.\n<p>Example\n\n<pre><code>[1..100].to_formatted_s # =&gt; &quot;1..100&quot;\n</code></pre>\n"],["to_formatted_s","Time","classes/Time.html#method-i-to_formatted_s","(format = :default)","<p>Converts to a formatted string. See DATE_FORMATS for builtin formats.\n<p>This method is aliased to <code>to_s</code>. …\n"],["to_hash","ActionDispatch::Session::AbstractStore::SessionHash","classes/ActionDispatch/Session/AbstractStore/SessionHash.html#method-i-to_hash","()",""],["to_hash","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-to_hash","()",""],["to_hash","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-to_hash","()","<p>Convert to a Hash with String keys.\n"],["to_hash","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-to_hash","()","<p>Convert to a Hash with String keys.\n"],["to_html","ActionController::Responder","classes/ActionController/Responder.html#method-i-to_html","()","<p>HTML format does not render the resource, it always attempt to render a\ntemplate.\n"],["to_html","Rails::Info","classes/Rails/Info.html#method-i-to_html","()",""],["to_i","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-to_i","()",""],["to_i","DateTime","classes/DateTime.html#method-i-to_i","()","<p>Converts self to an integer number of seconds since the Unix epoch\n"],["to_key","ActiveModel::Conversion","classes/ActiveModel/Conversion.html#method-i-to_key","()","<p>Returns an Enumerable of all key attributes if any is set, regardless if\nthe object is persisted or not. …\n"],["to_key","ActiveRecord::AttributeMethods::PrimaryKey","classes/ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-to_key","()","<p>Returns this record&#39;s primary key value wrapped in an Array or nil if\nthe record is a new_record …\n"],["to_model","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-to_model","()",""],["to_model","ActiveModel::Conversion","classes/ActiveModel/Conversion.html#method-i-to_model","()","<p>If your object is already designed to implement all of the Active Model you\ncan use the default to_model …\n"],["to_options","Hash","classes/Hash.html#method-i-to_options","()",""],["to_options!","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-to_options-21","()",""],["to_options!","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-to_options-21","()",""],["to_options!","Hash","classes/Hash.html#method-i-to_options-21","()",""],["to_param","ActiveModel::Conversion","classes/ActiveModel/Conversion.html#method-i-to_param","()","<p>Returns a string representing the object&#39;s key suitable for use in\nURLs, or nil if persisted? is …\n"],["to_param","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-to_param","()","<p>Returns a String, which Action Pack uses for constructing an URL to this\nobject. The default implementation …\n"],["to_param","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-to_param","()",""],["to_param","Array","classes/Array.html#method-i-to_param","()","<p>Calls <code>to_param</code> on all its elements and joins the result with\nslashes. This is used by <code>url_for</code> in Action …\n"],["to_param","FalseClass","classes/FalseClass.html#method-i-to_param","()",""],["to_param","Hash","classes/Hash.html#method-i-to_param","(namespace = nil)","<p>Converts a hash into a string suitable for use as a URL query string. An\noptional <code>namespace</code> can be passed …\n"],["to_param","NilClass","classes/NilClass.html#method-i-to_param","()",""],["to_param","Object","classes/Object.html#method-i-to_param","()","<p>Alias of <code>to_s</code>.\n"],["to_param","TrueClass","classes/TrueClass.html#method-i-to_param","()",""],["to_path","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-to_path","()",""],["to_path","ActionView::PathResolver","classes/ActionView/PathResolver.html#method-i-to_path","()",""],["to_prepare","ActionController::Dispatcher","classes/ActionController/Dispatcher.html#method-i-to_prepare","(*args, &block)",""],["to_prepare","ActionDispatch::Callbacks","classes/ActionDispatch/Callbacks.html#method-c-to_prepare","(*args, &block)","<p>Add a preparation callback. Preparation callbacks are run before every\nrequest in development mode, and …\n"],["to_prepare","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-to_prepare","(&blk)",""],["to_prepare_blocks","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-to_prepare_blocks","()",""],["to_query","Array","classes/Array.html#method-i-to_query","(key)","<p>Converts an array into a string suitable for use as a URL query string,\nusing the given <code>key</code> as the param …\n"],["to_query","Hash","classes/Hash.html#method-i-to_query","(namespace = nil)",""],["to_query","Object","classes/Object.html#method-i-to_query","(key)","<p>Converts an object into a string suitable for use as a URL query string,\nusing the given <code>key</code> as the param …\n"],["to_s","ActionDispatch::RemoteIp::RemoteIpGetter","classes/ActionDispatch/RemoteIp/RemoteIpGetter.html#method-i-to_s","()",""],["to_s","ActionView::PathResolver","classes/ActionView/PathResolver.html#method-i-to_s","()",""],["to_s","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-to_s","()",""],["to_s","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-to_s","(format = :default)","<p><code>:db</code> format outputs time in UTC; all others output time in\nlocal. Uses TimeWithZone&#39;s <code>strftime</code>, so …\n"],["to_s","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-to_s","()","<p>Returns a textual representation of this time zone.\n"],["to_s","Array","classes/Array.html#method-i-to_s","(format = :default)",""],["to_s","BigDecimal","classes/BigDecimal.html#method-i-to_s","(format = DEFAULT_STRING_FORMAT)",""],["to_s","Date","classes/Date.html#method-i-to_s","(format = :default)",""],["to_s","DateTime","classes/DateTime.html#method-i-to_s","(format = :default)",""],["to_s","Mime::Type","classes/Mime/Type.html#method-i-to_s","()",""],["to_s","Plugin","classes/Plugin.html#method-i-to_s","()",""],["to_s","Rails::Info","classes/Rails/Info.html#method-i-to_s","()",""],["to_s","Range","classes/Range.html#method-i-to_s","(format = :default)",""],["to_s","SourceAnnotationExtractor::Annotation","classes/SourceAnnotationExtractor/Annotation.html#method-i-to_s","(options={})","<p>Returns a representation of the annotation that looks like this:\n\n<pre><code>[126] [TODO] This algorithm is simple ...</code></pre>\n"],["to_s","Time","classes/Time.html#method-i-to_s","(format = :default)",""],["to_sentence","Array","classes/Array.html#method-i-to_sentence","(options = {})","<p>Converts the array to a comma-separated sentence where the last element is\njoined by the connector word. …\n"],["to_sql","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-to_sql","()","<p>Returns a String whose contents are the column definitions concatenated\ntogether. This string can then …\n"],["to_sql","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-to_sql","()",""],["to_str","Mime::Type","classes/Mime/Type.html#method-i-to_str","()",""],["to_sym","Mime::Type","classes/Mime/Type.html#method-i-to_sym","()",""],["to_tag","ActiveSupport::XmlMini","classes/ActiveSupport/XmlMini.html#method-i-to_tag","(key, value, options)",""],["to_time","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-to_time","()","<p>A TimeWithZone acts like a Time, so just return <code>self</code>.\n"],["to_time","Date","classes/Date.html#method-i-to_time","(form = :local)","<p>Converts a Date instance to a Time, where the time is set to the beginning\nof the day. The timezone can …\n"],["to_time","DateTime","classes/DateTime.html#method-i-to_time","()","<p>Attempts to convert self to a Ruby Time object; returns self if out of\nrange of Ruby Time class If self …\n"],["to_time","String","classes/String.html#method-i-to_time","(form = :utc)","<p>Form can be either :utc (default) or :local.\n"],["to_time","Time","classes/Time.html#method-i-to_time","()","<p>A method to keep Time, Date and DateTime instances interchangeable on\nconversions. In this case, it simply …\n"],["to_time_in_current_zone","Date","classes/Date.html#method-i-to_time_in_current_zone","()","<p>Converts Date to a TimeWithZone in the current zone if Time.zone or\nTime.zone_default is set, otherwise …\n"],["to_xml","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-to_xml","(options={})","<p>Returns an xml formatted representation of the Errors hash.\n\n<pre><code>p.errors.add(:name, &quot;can&#39;t be blank&quot;)\np.errors.add(:name, ...</code></pre>\n"],["to_xml","ActiveModel::Serializers::Xml","classes/ActiveModel/Serializers/Xml.html#method-i-to_xml","(options = {}, &block)","<p>Returns XML representing the model. Configuration can be passed through\n<code>options</code>.\n"],["to_xml","ActiveRecord::Serialization","classes/ActiveRecord/Serialization.html#method-i-to_xml","(options = {}, &block)","<p>Builds an XML document to represent the model. Some configuration is\navailable through <code>options</code>. However …\n"],["to_xml","Array","classes/Array.html#method-i-to_xml","(options = {})","<p>Returns a string that represents the array in XML by invoking\n<code>to_xml</code> on each element. Active Record collections …\n"],["to_xml","Hash","classes/Hash.html#method-i-to_xml","(options = {})","<p>Returns a string containing an XML representation of its receiver:\n\n<pre><code>{&quot;foo&quot; =&gt; 1, &quot;bar&quot; =&gt; 2}.to_xml\n# =&gt; ...\n</code></pre>\n"],["to_yaml","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-to_yaml","(*args)",""],["to_yaml","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-to_yaml","(options = {})",""],["to_yaml","BigDecimal","classes/BigDecimal.html#method-i-to_yaml","(opts = {})","<p>This emits the number without any scientific notation. This is better than\nself.to_f.to_s since it doesn&#39;t …\n"],["today","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-today","()","<p>Return the current date in this time zone.\n"],["today?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-today-3F","()",""],["today?","Date","classes/Date.html#method-i-today-3F","()","<p>Returns true if the Date object&#39;s date is today.\n"],["today?","Time","classes/Time.html#method-i-today-3F","()","<p>Tells whether the Time object&#39;s time is today\n"],["toggle","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-toggle","(*ids)","<p>Toggles the visibility of the DOM elements with the given <code>ids</code>.\nExample:\n\n<pre><code># Show a few people\n# Generates: ...</code></pre>\n"],["toggle","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-toggle","(attribute)","<p>Assigns to <code>attribute</code> the boolean opposite of\n<code>attribute?</code>. So if the predicate returns <code>true</code> the\nattribute …\n"],["toggle!","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-toggle-21","(attribute)","<p>Wrapper around <code>toggle</code> that saves the record. This method\ndiffers from its non-bang version in that it …\n"],["tok","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-tok","(s)","<p>Scans the first token in s and returns a 3-element list, or nil if s does\nnot begin with a valid token. …\n"],["token_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-token_tag","()",""],["tokenize","HTML::Sanitizer","classes/HTML/Sanitizer.html#method-i-tokenize","(text, options)",""],["tokenize","HTML::WhiteListSanitizer","classes/HTML/WhiteListSanitizer.html#method-i-tokenize","(text, options)",""],["tomorrow","Date","classes/Date.html#method-i-tomorrow","()","<p>Returns a new Date representing the date 1 day after today (i.e.\ntomorrow&#39;s date).\n"],["tomorrow","Time","classes/Time.html#method-i-tomorrow","()","<p>Convenience method which returns a new Time representing the time 1 day\nsince the instance time\n"],["touch","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-touch","(name = nil)","<p>Saves the record with the updated_at/on attributes set to the current time.\nPlease note that no validation …\n"],["transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-transaction","(options = {})","<p>Runs the given block in a database transaction, and returns the result of\nthe block.\n<p>Nested transactions …\n"],["transaction","ActiveRecord::Transactions","classes/ActiveRecord/Transactions.html#method-i-transaction","(&block)","<p>See ActiveRecord::Transactions::ClassMethods for detailed documentation.\n"],["transaction","ActiveRecord::Transactions::ClassMethods","classes/ActiveRecord/Transactions/ClassMethods.html#method-i-transaction","(options = {}, &block)","<p>See ActiveRecord::Transactions::ClassMethods for detailed documentation.\n"],["transaction_include_action?","ActiveRecord::Transactions","classes/ActiveRecord/Transactions.html#method-i-transaction_include_action-3F","(action)","<p>Determine if a transaction included an action for :create, :update, or\n:destroy. Used in filtering callbacks. …\n"],["transaction_joinable=","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-transaction_joinable-3D","(joinable)",""],["transaction_record_state","ActiveRecord::Transactions","classes/ActiveRecord/Transactions.html#method-i-transaction_record_state","(state)","<p>Determine if a record was created or destroyed in a transaction. State\nshould be one of :new_record or …\n"],["transfer_time_values_to_utc_constructor","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-transfer_time_values_to_utc_constructor","(time)",""],["translate","AbstractController::Translation","classes/AbstractController/Translation.html#method-i-translate","(*args)",""],["translate","ActionView::Helpers::TranslationHelper","classes/ActionView/Helpers/TranslationHelper.html#method-i-translate","(key, options = {})","<p>Delegates to I18n#translate but also performs three additional functions.\n<p>First, it&#39;ll pass the :rescue_format …\n"],["translate_exception","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-translate_exception","(e, message)",""],["translate_exception","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-translate_exception","(exception, message)",""],["translate_exception","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-translate_exception","(exception, message)",""],["translate_exception","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-translate_exception","(exception, message)",""],["transliterate","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-transliterate","(string, replacement = \"?\")","<p>Replaces non-ASCII characters with an ASCII approximation, or if none\nexists, a replacement character …\n"],["truetok","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-truetok","(s)",""],["truncate","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-truncate","(text, options = {})","<p>Truncates a given <code>text</code> after a given <code>:length</code> if\n<code>text</code> is longer than <code>:length</code> (defaults to 30). The\nlast …\n"],["truncate","String","classes/String.html#method-i-truncate","(length, options = {})","<p>Truncates a given <code>text</code> after a given <code>length</code> if\n<code>text</code> is longer than <code>length</code>:\n\n<pre><code>&quot;Once upon a time in a world ...</code></pre>\n"],["try","Object","classes/Object.html#method-i-try","(method, *args, &block)","<p>Invokes the method identified by the symbol <code>method</code>, passing it\nany arguments and/or the block specified, …\n"],["tsort_each_child","Rails::Initializable::Collection","classes/Rails/Initializable/Collection.html#method-i-tsort_each_child","(initializer, &block)",""],["tv_sec","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-tv_sec","()",""],["type_cast","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-i-type_cast","(value)","<p>Casts value (which is a String) to an appropriate instance.\n"],["type_cast_attribute_value","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-type_cast_attribute_value","(multiparameter_name, value)",""],["type_cast_calculated_value","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-type_cast_calculated_value","(value, column, operation = nil)",""],["type_cast_code","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-i-type_cast_code","(var_name)",""],["type_cast_using_column","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-type_cast_using_column","(value, column)",""],["type_condition","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-type_condition","()",""],["type_to_sql","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-type_to_sql","(type, limit = nil, precision = nil, scale = nil)","<p>Maps logical Rails types to MySQL-specific data types.\n"],["type_to_sql","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-type_to_sql","(type, limit = nil, precision = nil, scale = nil)","<p>Maps logical Rails types to PostgreSQL-specific data types.\n"],["typecast_xml_value","Hash","classes/Hash.html#method-i-typecast_xml_value","(value, disallowed_types = nil)",""],["u_unpack","ActiveSupport::Multibyte::Unicode","classes/ActiveSupport/Multibyte/Unicode.html#method-i-u_unpack","(string)","<p>Unpack the string at codepoints boundaries. Raises an EncodingError when\nthe encoding of the string isn&#39;t …\n"],["ucharcopy","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-ucharcopy","(t, s, i)","<p>Copies the valid UTF-8 bytes of a single character from string s at\nposition i to I/O object t, and returns …\n"],["ucharenc","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-ucharenc","(a, i, u)","<p>Encodes unicode character u as UTF-8 bytes in string a at position i.\nReturns the number of bytes written. …\n"],["uncached","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-uncached","()","<p>Disable the query cache within the block.\n"],["uncached","ActiveRecord::QueryCache::ClassMethods","classes/ActiveRecord/QueryCache/ClassMethods.html#method-i-uncached","(&block)","<p>Disable the query cache within the block if Active Record is configured.\n"],["uncountable","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-i-uncountable","(*words)","<p>Add uncountable words that shouldn&#39;t be attempted inflected.\n<p>Examples:\n\n<pre><code>uncountable &quot;money&quot;\nuncountable ...</code></pre>\n"],["uncountable?","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-c-uncountable-3F","(record_or_class)","<p>Identifies whether the class name of a record or class is uncountable.\nExamples:\n\n<pre><code>ActiveModel::Naming.uncountable?(Sheep) ...</code></pre>\n"],["uncountable?","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-uncountable-3F","()",""],["undecorated_table_name","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-undecorated_table_name","(class_name = base_class.name)","<p>Guesses the table name, but does not decorate it with prefix and suffix\ninformation.\n"],["undefine_attribute_methods","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-undefine_attribute_methods","()","<p>Removes all the previously dynamically defined methods from the class\n"],["underscore","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-underscore","(camel_cased_word)","<p>Makes an underscored, lowercase form from the expression in the string.\n<p>Changes &#39;::&#39; to &#39;/&#39; …\n"],["underscore","String","classes/String.html#method-i-underscore","()","<p>The reverse of <code>camelize</code>. Makes an underscored, lowercase form\nfrom the expression in the string.\n<p><code>underscore</code> …\n"],["unescape","Object","classes/Object.html#method-i-unescape","(str, escaped = /%[a-fA-F\\d]{2}/)",""],["unescape_bytea","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-unescape_bytea","(value)","<p>Unescapes bytea output from a database to the binary string it represents.\nNOTE: This is NOT an inverse …\n"],["unescape_rjs","ActionDispatch::Assertions::SelectorAssertions","classes/ActionDispatch/Assertions/SelectorAssertions.html#method-i-unescape_rjs","(rjs_string)","<p>Unescapes a RJS string.\n"],["uninstall","Plugin","classes/Plugin.html#method-i-uninstall","()",""],["uniq_by","Array","classes/Array.html#method-i-uniq_by","()","<p>Return an unique array based on the criteria given as a proc.\n\n<pre><code>[1, 2, 3, 4].uniq_by { |i| i.odd? }\n# =&gt; ...\n</code></pre>\n"],["uniq_by!","Array","classes/Array.html#method-i-uniq_by-21","()","<p>Same as uniq_by, but modifies self.\n"],["unique_id","ActiveSupport::Notifications::Instrumenter","classes/ActiveSupport/Notifications/Instrumenter.html#method-i-unique_id","()",""],["unmemoize_all","ActiveSupport::Memoizable::InstanceMethods","classes/ActiveSupport/Memoizable/InstanceMethods.html#method-i-unmemoize_all","()",""],["unpacked_cookie_data","ActionDispatch::Session::CookieStore","classes/ActionDispatch/Session/CookieStore.html#method-i-unpacked_cookie_data","(env)",""],["unquote","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-unquote","(q)","<p>Converts a quoted json string literal q into a UTF-8-encoded string. The\nrules are different than for …\n"],["unrename_keys","Hash","classes/Hash.html#method-i-unrename_keys","(params)",""],["unserializable_attribute?","ActiveRecord::AttributeMethods::Read","classes/ActiveRecord/AttributeMethods/Read.html#method-i-unserializable_attribute-3F","(attr_name, column)","<p>Returns true if the attribute is of a text column and marked for\nserialization.\n"],["unserialize_attribute","ActiveRecord::AttributeMethods::Read","classes/ActiveRecord/AttributeMethods/Read.html#method-i-unserialize_attribute","(attr_name)","<p>Returns the unserialized object of the attribute.\n"],["unshift","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-unshift","(path)",""],["unshift","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-unshift","(*)",""],["unsubscribe","ActiveSupport::Notifications","classes/ActiveSupport/Notifications.html#method-i-unsubscribe","(*args)",""],["unsubscribe","ActiveSupport::Notifications::Fanout","classes/ActiveSupport/Notifications/Fanout.html#method-i-unsubscribe","(subscriber)",""],["until","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-until","(time = ::Time.current)",""],["until","Numeric","classes/Numeric.html#method-i-until","(time = ::Time.current)","<p>Reads best with argument:  10.minutes.until(time)\n"],["upcase","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-upcase","()","<p>Convert characters in the string to uppercase.\n<p>Example:\n\n<pre><code>&#39;Laurent, où sont les tests ?&#39;.mb_chars.upcase.to_s ...</code></pre>\n"],["update","ActionDispatch::Session::AbstractStore::SessionHash","classes/ActionDispatch/Session/AbstractStore/SessionHash.html#method-i-update","(hash)",""],["update","ActiveRecord::AttributeMethods::Dirty","classes/ActiveRecord/AttributeMethods/Dirty.html#method-i-update","(*)",""],["update","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-update","(sql, name = nil)","<p>Executes the update statement and returns the number of rows affected.\n"],["update","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-update","(attribute_names = @attributes.keys)","<p>Updates the associated record with values matching those of the instance\nattributes. Returns the number …\n"],["update","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-update","(id, attributes)","<p>Updates an object (or multiple objects) and saves it to the database, if\nvalidations pass. The resulting …\n"],["update","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-update","(other_hash)","<p>Updates the instantized hash with values from the second:\n\n<pre><code>hash_1 = HashWithIndifferentAccess.new\nhash_1[:key] ...</code></pre>\n"],["update","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-update","(other_hash)","<p>Updates the instantized hash with values from the second:\n\n<pre><code>hash_1 = HashWithIndifferentAccess.new\nhash_1[:key] ...</code></pre>\n"],["update_all","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-update_all","(updates, conditions = nil, options = {})","<p>Updates all records with details given if they match a set of conditions\nsupplied, limits and order can …\n"],["update_attribute","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-update_attribute","(name, value)","<p>Updates a single attribute and saves the record. This is especially useful\nfor boolean flags on existing …\n"],["update_attributes","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-update_attributes","(attributes)","<p>Updates the attributes of the model from the passed-in hash and saves the\nrecord, all wrapped in a transaction. …\n"],["update_attributes","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-i-update_attributes","(params=nil)","<p>PUT update\n"],["update_attributes!","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-update_attributes-21","(attributes)","<p>Updates its receiver just like <code>update_attributes</code> but calls\n<code>save!</code> instead of <code>save</code>, so an exception is …\n"],["update_counters","ActiveRecord::CounterCache","classes/ActiveRecord/CounterCache.html#method-i-update_counters","(id, counters)","<p>A generic “counter updater” implementation, intended primarily to be used\nby increment_counter …\n"],["update_counters","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-update_counters","(id, counters)","<p>Make sure the lock version column gets updated when counters are updated.\n"],["update_details","ActionView::LookupContext::Details","classes/ActionView/LookupContext/Details.html#method-i-update_details","(new_details)","<p>Update the details keys by merging the given hash into the current details\nhash. If a block is given, …\n"],["update_page","ActionView::Helpers::PrototypeHelper","classes/ActionView/Helpers/PrototypeHelper.html#method-i-update_page","(&block)","<p>Yields a JavaScriptGenerator and returns the generated JavaScript code. Use\nthis to update multiple elements …\n"],["update_page_tag","ActionView::Helpers::PrototypeHelper","classes/ActionView/Helpers/PrototypeHelper.html#method-i-update_page_tag","(html_options = {}, &block)","<p>Works like update_page but wraps the generated JavaScript in a\n<code>&lt;script&gt;</code> tag. Use this to include …\n"],["update_sql","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-update_sql","(sql, name = nil)","<p>Executes the update statement and returns the number of rows affected.\n"],["update_sql","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-update_sql","(sql, name = nil)","<p>Executes an UPDATE query and returns the number of affected tuples.\n"],["updated","ActionView::Helpers::AtomFeedHelper::AtomFeedBuilder","classes/ActionView/Helpers/AtomFeedHelper/AtomFeedBuilder.html#method-i-updated","(date_or_time = nil)","<p>Accepts a Date or Time object and inserts it in the proper format. If nil\nis passed, current time in …\n"],["updated_at","ActiveSupport::FileUpdateChecker","classes/ActiveSupport/FileUpdateChecker.html#method-i-updated_at","()",""],["url","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-url","()","<p>Returns the complete URL used for this request.\n"],["url_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-url_field","(object_name, method, options = {})","<p>Returns a text_field of type “url”.\n"],["url_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-url_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type “url”.\n<p>Options\n<p>Accepts the same options as text_field_tag.\n"],["url_for","ActionController::Metal","classes/ActionController/Metal.html#method-i-url_for","(string)","<p>basic url_for that can be overridden for more robust functionality\n"],["url_for","ActionDispatch::Routing::UrlFor","classes/ActionDispatch/Routing/UrlFor.html#method-i-url_for","(options = nil)","<p>Generate a url based on the options provided, default_url_options and the\nroutes defined in routes.rb. …\n"],["url_for","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-url_for","(options = {})","<p>Returns the URL for the set of <code>options</code> provided. This takes\nthe same options as <code>url_for</code> in Action Controller …\n"],["url_options","ActionController::UrlFor","classes/ActionController/UrlFor.html#method-i-url_options","()",""],["url_options","ActionDispatch::Integration::Runner","classes/ActionDispatch/Integration/Runner.html#method-i-url_options","()",""],["url_options","ActionDispatch::Routing::UrlFor","classes/ActionDispatch/Routing/UrlFor.html#method-i-url_options","()",""],["url_options","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-url_options","()","<p>Need to map default url options to controller one. def\ndefault_url_options(*args) #:nodoc:\n\n<pre><code>controller.send(:default_url_options, ...</code></pre>\n"],["us_zones","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-us_zones","()","<p>A convenience method for returning a collection of TimeZone objects for\ntime zones in the USA.\n"],["use","ActionController::Metal","classes/ActionController/Metal.html#method-c-use","(*args, &block)",""],["use","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-use","(key = nil, used = true)","<p>Used internally by the <code>keep</code> and <code>discard</code> methods\n\n<pre><code>use()               # marks the entire flash as used\nuse(&#39;msg&#39;) ...</code></pre>\n"],["use","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-use","(*args, &block)",""],["use_checkout?","RailsEnvironment","classes/RailsEnvironment.html#method-i-use_checkout-3F","()",""],["use_externals?","RailsEnvironment","classes/RailsEnvironment.html#method-i-use_externals-3F","()",""],["use_renderer","ActionController::Renderers::ClassMethods","classes/ActionController/Renderers/ClassMethods.html#method-i-use_renderer","(*args)",""],["use_renderers","ActionController::Renderers::ClassMethods","classes/ActionController/Renderers/ClassMethods.html#method-i-use_renderers","(*args)",""],["use_svn?","RailsEnvironment","classes/RailsEnvironment.html#method-i-use_svn-3F","()",""],["use_zone","Time","classes/Time.html#method-i-use_zone","(time_zone)","<p>Allows override of <code>Time.zone</code> locally inside supplied block;\nresets <code>Time.zone</code> to existing value when done. …\n"],["usec","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-usec","()",""],["user_agent=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-user_agent-3D","(user_agent)",""],["user_name_and_password","ActionController::HttpAuthentication::Basic","classes/ActionController/HttpAuthentication/Basic.html#method-i-user_name_and_password","(request)",""],["using_limitable_reflections?","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-using_limitable_reflections-3F","(reflections)",""],["utc","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-utc","()","<p>Returns a Time or DateTime instance that represents the time in UTC.\n"],["utc","DateTime","classes/DateTime.html#method-i-utc","()","<p>Adjusts DateTime to UTC by adding its offset value; offset is set to 0\n<p>Example:\n\n<pre><code>DateTime.civil(2005, 2, ...</code></pre>\n"],["utc?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-utc-3F","()",""],["utc?","DateTime","classes/DateTime.html#method-i-utc-3F","()","<p>Returns true if offset == 0\n"],["utc_offset","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-utc_offset","()",""],["utc_offset","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-utc_offset","()",""],["utc_offset","DateTime","classes/DateTime.html#method-i-utc_offset","()","<p>Returns the offset value in seconds\n"],["utc_time","Time","classes/Time.html#method-i-utc_time","(*args)","<p>Wraps class method <code>time_with_datetime_fallback</code> with\n<code>utc_or_local</code> set to <code>:utc</code>.\n"],["utc_to_local","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-utc_to_local","(time)","<p>Adjust the given time to the simultaneous time in the time zone represented\nby <code>self</code>. Returns a Time.utc() …\n"],["valenc","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-valenc","(x)",""],["valid?","ActiveModel::Validations","classes/ActiveModel/Validations.html#method-i-valid-3F","(context = nil)","<p>Runs all the specified validations and returns true if no errors were added\notherwise false. Context …\n"],["valid?","ActiveRecord::Validations","classes/ActiveRecord/Validations.html#method-i-valid-3F","(context = nil)","<p>Runs all the specified validations and returns true if no errors were added\notherwise false.\n"],["valid_alter_table_options","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-valid_alter_table_options","( type, options)","<p>See: www.sqlite.org/lang_altertable.html SQLite has an additional\nrestriction on the ALTER TABLE statement …\n"],["valid_encoding","ActionView::Template::Handlers::ERB","classes/ActionView/Template/Handlers/ERB.html#method-i-valid_encoding","(string, encoding)",""],["valid_scope_name?","ActiveRecord::NamedScope::ClassMethods","classes/ActiveRecord/NamedScope/ClassMethods.html#method-i-valid_scope_name-3F","(name)",""],["validate","ActiveModel::EachValidator","classes/ActiveModel/EachValidator.html#method-i-validate","(record)","<p>Performs validation on the supplied record. By default this will call\n<code>validates_each</code> to determine validity …\n"],["validate","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validate","(*args, &block)","<p>Adds a validation method or block to the class. This is useful when\noverriding the <code>validate</code> instance …\n"],["validate","ActiveModel::Validations::PresenceValidator","classes/ActiveModel/Validations/PresenceValidator.html#method-i-validate","(record)",""],["validate","ActiveModel::Validator","classes/ActiveModel/Validator.html#method-i-validate","(record)","<p>Override this method in subclasses with validation logic, adding errors to\nthe records <code>errors</code> array where …\n"],["validate_collection_association","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-validate_collection_association","(reflection)","<p>Validate the associated records if <code>:validate</code> or\n<code>:autosave</code> is turned on for the association specified …\n"],["validate_each","ActiveModel::BlockValidator","classes/ActiveModel/BlockValidator.html#method-i-validate_each","(record, attribute, value)",""],["validate_each","ActiveModel::EachValidator","classes/ActiveModel/EachValidator.html#method-i-validate_each","(record, attribute, value)","<p>Override this method in subclasses with the validation logic, adding errors\nto the records <code>errors</code> array …\n"],["validate_each","ActiveModel::Validations::AcceptanceValidator","classes/ActiveModel/Validations/AcceptanceValidator.html#method-i-validate_each","(record, attribute, value)",""],["validate_each","ActiveModel::Validations::ConfirmationValidator","classes/ActiveModel/Validations/ConfirmationValidator.html#method-i-validate_each","(record, attribute, value)",""],["validate_each","ActiveModel::Validations::ExclusionValidator","classes/ActiveModel/Validations/ExclusionValidator.html#method-i-validate_each","(record, attribute, value)",""],["validate_each","ActiveModel::Validations::FormatValidator","classes/ActiveModel/Validations/FormatValidator.html#method-i-validate_each","(record, attribute, value)",""],["validate_each","ActiveModel::Validations::InclusionValidator","classes/ActiveModel/Validations/InclusionValidator.html#method-i-validate_each","(record, attribute, value)",""],["validate_each","ActiveModel::Validations::LengthValidator","classes/ActiveModel/Validations/LengthValidator.html#method-i-validate_each","(record, attribute, value)",""],["validate_each","ActiveModel::Validations::NumericalityValidator","classes/ActiveModel/Validations/NumericalityValidator.html#method-i-validate_each","(record, attr_name, value)",""],["validate_each","ActiveRecord::Validations::AssociatedValidator","classes/ActiveRecord/Validations/AssociatedValidator.html#method-i-validate_each","(record, attribute, value)",""],["validate_each","ActiveRecord::Validations::UniquenessValidator","classes/ActiveRecord/Validations/UniquenessValidator.html#method-i-validate_each","(record, attribute, value)",""],["validate_fallbacks","I18n::Railtie","classes/I18n/Railtie.html#method-c-validate_fallbacks","(fallbacks)",""],["validate_request!","ActionDispatch::Assertions::ResponseAssertions","classes/ActionDispatch/Assertions/ResponseAssertions.html#method-i-validate_request-21","()",""],["validate_single_association","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-validate_single_association","(reflection)","<p>Validate the association if <code>:validate</code> or\n<code>:autosave</code> is turned on for the association.\n"],["validates","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validates","(*attributes)","<p>This method is a shortcut to all default validators and any custom\nvalidator classes ending in &#39;Validator&#39;. …\n"],["validates_acceptance_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_acceptance_of","(*attr_names)","<p>Encapsulates the pattern of wanting to validate the acceptance of a terms\nof service check box (or similar …\n"],["validates_associated","ActiveRecord::Validations::ClassMethods","classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_associated","(*attr_names)","<p>Validates whether the associated object or objects are all valid\nthemselves. Works with any kind of association. …\n"],["validates_confirmation_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_confirmation_of","(*attr_names)","<p>Encapsulates the pattern of wanting to validate a password or email address\nfield with a confirmation. …\n"],["validates_each","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validates_each","(*attr_names, &block)","<p>Validates each attribute against a block.\n\n<pre><code>class Person\n  include ActiveModel::Validations\n\n  attr_accessor ...\n</code></pre>\n"],["validates_exclusion_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_exclusion_of","(*attr_names)","<p>Validates that the value of the specified attribute is not in a particular\nenumerable object.\n\n<pre><code>class Person ...\n</code></pre>\n"],["validates_format_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_format_of","(*attr_names)","<p>Validates whether the value of the specified attribute is of the correct\nform, going by the regular expression …\n"],["validates_inclusion_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_inclusion_of","(*attr_names)","<p>Validates whether the value of the specified attribute is available in a\nparticular enumerable object. …\n"],["validates_length_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_length_of","(*attr_names)","<p>Validates that the specified attribute matches the length restrictions\nsupplied. Only one option can …\n"],["validates_numericality_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_numericality_of","(*attr_names)","<p>Validates whether the value of the specified attribute is numeric by trying\nto convert it to a float …\n"],["validates_presence_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_presence_of","(*attr_names)","<p>Validates that the specified attributes are not blank (as defined by\nObject#blank?). Happens by default …\n"],["validates_size_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_size_of","(*attr_names)",""],["validates_uniqueness_of","ActiveRecord::Validations::ClassMethods","classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_uniqueness_of","(*attr_names)","<p>Validates whether the value of the specified attributes are unique across\nthe system. Useful for making …\n"],["validates_with","ActiveModel::Validations","classes/ActiveModel/Validations.html#method-i-validates_with","(*args, &block)","<p>Passes the record off to the class or classes specified and allows them to\nadd errors based on more complex …\n"],["validates_with","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validates_with","(*args, &block)","<p>Passes the record off to the class or classes specified and allows them to\nadd errors based on more complex …\n"],["validators","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validators","()","<p>List all validators that are being used to validate the model using\n<code>validates_with</code> method.\n"],["validators_on","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validators_on","(attribute)","<p>List all validators that being used to validate a specific attribute.\n"],["valparse","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-valparse","(ts)","<p>Parses a “value” in the sense of RFC 4627. Returns the parsed value and any\ntrailing tokens. …\n"],["value","ActionView::Helpers::InstanceTagMethods::ClassMethods","classes/ActionView/Helpers/InstanceTagMethods/ClassMethods.html#method-i-value","(object, method_name)",""],["value","ActiveSupport::Cache::Entry","classes/ActiveSupport/Cache/Entry.html#method-i-value","()","<p>Get the value stored in the cache.\n"],["value_before_type_cast","ActionView::Helpers::InstanceTagMethods::ClassMethods","classes/ActionView/Helpers/InstanceTagMethods/ClassMethods.html#method-i-value_before_type_cast","(object, method_name)",""],["value_to_boolean","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-i-value_to_boolean","(value)","<p>convert something to a boolean\n"],["value_to_decimal","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-i-value_to_decimal","(value)","<p>convert something to a BigDecimal\n"],["values_at","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-values_at","(*indices)","<p>Returns an array of the values at the specified indices:\n\n<pre><code>hash = HashWithIndifferentAccess.new\nhash[:a] ...</code></pre>\n"],["values_at","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-values_at","(*indices)","<p>Returns an array of the values at the specified indices:\n\n<pre><code>hash = HashWithIndifferentAccess.new\nhash[:a] ...</code></pre>\n"],["variable_name","ActionView::Template","classes/ActionView/Template.html#method-i-variable_name","()",""],["vendor","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-vendor","(filename, data=nil, &block)","<p>Create a new file in the vendor/ directory. Code can be specified in a\nblock or a data string can be …\n"],["verified_request?","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-verified_request-3F","()","<p>Returns true or false if a request is verified.  Checks:\n<p>is it a GET request?  Gets should be safe and …\n"],["verifier","ActiveSupport::MessageEncryptor","classes/ActiveSupport/MessageEncryptor.html#method-i-verifier","()",""],["verify","ActiveSupport::MessageVerifier","classes/ActiveSupport/MessageVerifier.html#method-i-verify","(signed_message)",""],["verify!","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-verify-21","(*ignored)","<p>Checks whether the connection to the database is still active (i.e. not\nstale). This is done under the …\n"],["verify_authenticity_token","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-verify_authenticity_token","()","<p>The actual before_filter that is used.  Modify this to change how you\nhandle unverified requests.\n"],["verify_request?","Mime::Type","classes/Mime/Type.html#method-i-verify_request-3F","()","<p>Returns true if Action Pack should check requests using this Mime Type for\npossible request forgery. …\n"],["version","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-version","()",""],["version","Rails","classes/Rails.html#method-i-version","()",""],["video_path","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-video_path","(source)","<p>Computes the path to a video asset in the public videos directory. Full\npaths from the document root …\n"],["video_tag","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-video_tag","(sources, options = {})","<p>Returns an html video tag for the <code>sources</code>. If\n<code>sources</code> is a string, a single video tag will be returned. …\n"],["view","ActionView::TestCase::Behavior","classes/ActionView/TestCase/Behavior.html#method-i-view","()","<p>The instance of ActionView::Base that is used by <code>render</code>.\n"],["view_assigns","AbstractController::Rendering","classes/AbstractController/Rendering.html#method-i-view_assigns","()","<p>This method should return a hash with assigns. You can overwrite this\nconfiguration per controller. :api: …\n"],["view_assigns","ActionView::TestCase::Behavior","classes/ActionView/TestCase/Behavior.html#method-i-view_assigns","()","<p>Returns a Hash of instance variables and their values, as defined by the\nuser in the test case, which …\n"],["view_context","AbstractController::Rendering","classes/AbstractController/Rendering.html#method-i-view_context","()","<p>An instance of a view class. The default view class is ActionView::Base\n<p>The view class must have the following …\n"],["view_context","ActionView::Base","classes/ActionView/Base.html#method-i-view_context","()","<p>TODO: HACK FOR RJS\n"],["view_context_class","AbstractController::Rendering","classes/AbstractController/Rendering.html#method-i-view_context_class","()",""],["view_context_class","AbstractController::Rendering::ClassMethods","classes/AbstractController/Rendering/ClassMethods.html#method-i-view_context_class","()",""],["view_path","Rails::Configuration::Deprecated","classes/Rails/Configuration/Deprecated.html#method-i-view_path","()",""],["view_path=","Rails::Configuration::Deprecated","classes/Rails/Configuration/Deprecated.html#method-i-view_path-3D","(value)",""],["view_paths","AbstractController::ViewPaths::ClassMethods","classes/AbstractController/ViewPaths/ClassMethods.html#method-i-view_paths","()","<p>A list of all of the default view paths for this controller.\n"],["view_paths=","AbstractController::ViewPaths::ClassMethods","classes/AbstractController/ViewPaths/ClassMethods.html#method-i-view_paths-3D","(paths)","<p>Set the view paths.\n<p>Parameters\n<p><code>paths</code> - If a ViewPathSet is provided, use that; otherwise,\nprocess the parameter …\n"],["view_paths=","ActionView::LookupContext::ViewPaths","classes/ActionView/LookupContext/ViewPaths.html#method-i-view_paths-3D","(paths)","<p>Whenever setting view paths, makes a copy so we can manipulate then in\ninstance objects as we wish.\n"],["visible_action?","ActionController::HideActions::ClassMethods","classes/ActionController/HideActions/ClassMethods.html#method-i-visible_action-3F","(action_name)",""],["visual_effect","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-visual_effect","(name, id = nil, options = {})","<p>Starts a script.aculo.us visual effect. See\nActionView::Helpers::ScriptaculousHelper for more information. …\n"],["visual_effect","ActionView::Helpers::ScriptaculousHelper","classes/ActionView/Helpers/ScriptaculousHelper.html#method-i-visual_effect","(name, element_id = false, js_options = {})","<p>Returns a JavaScript snippet to be used on the Ajax callbacks for starting\nvisual effects.\n<p>If no <code>element_id</code> …\n"],["wait","ActiveSupport::LogSubscriber::TestHelper","classes/ActiveSupport/LogSubscriber/TestHelper.html#method-i-wait","()","<p>Wait notifications to be published.\n"],["wait","ActiveSupport::Notifications::Fanout","classes/ActiveSupport/Notifications/Fanout.html#method-i-wait","()","<p>This is a sync queue, so there is not waiting.\n"],["wants?","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-c-wants-3F","(string)","<p>Returns <code>true</code> if the Chars class can and should act as a proxy\nfor the string <em>string</em>. Returns <code>false</code> otherwise. …\n"],["warn","ActiveSupport::Deprecation","classes/ActiveSupport/Deprecation.html#method-i-warn","(message = nil, callstack = caller)",""],["warn!","ActiveModel::MassAssignmentSecurity::Sanitizer","classes/ActiveModel/MassAssignmentSecurity/Sanitizer.html#method-i-warn-21","(attrs)",""],["watch_namespaces","ActiveSupport::Dependencies::WatchStack","classes/ActiveSupport/Dependencies/WatchStack.html#method-i-watch_namespaces","(namespaces)","<p>Add a set of modules to the watch stack, remembering the initial constants\n"],["week","Numeric","classes/Numeric.html#method-i-week","()",""],["weeks","Numeric","classes/Numeric.html#method-i-weeks","()",""],["where","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-where","(opts, *rest)",""],["where_values_hash","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-where_values_hash","()",""],["with_backend","ActiveSupport::JSON","classes/ActiveSupport/JSON.html#method-i-with_backend","(name)",""],["with_backend","ActiveSupport::XmlMini","classes/ActiveSupport/XmlMini.html#method-i-with_backend","(name)",""],["with_connection","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-with_connection","()","<p>If a connection already exists yield it to the block.  If no connection\nexists checkout a connection, …\n"],["with_exclusive_scope","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-with_exclusive_scope","()",""],["with_exclusive_scope","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-with_exclusive_scope","(method_scoping = {}, &block)","<p>Works like with_scope, but discards any nested properties.\n"],["with_fallbacks","ActionView::LookupContext::ViewPaths","classes/ActionView/LookupContext/ViewPaths.html#method-i-with_fallbacks","()","<p>Add fallbacks to the view paths. Useful in cases you are rendering a :file.\n"],["with_formats","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-with_formats","(*args)",""],["with_gc_stats","ActiveSupport::Testing::Performance::Metrics::Base","classes/ActiveSupport/Testing/Performance/Metrics/Base.html#method-i-with_gc_stats","()",""],["with_indifferent_access","Hash","classes/Hash.html#method-i-with_indifferent_access","()","<p>Returns an +ActiveSupport::HashWithIndifferentAccess+ out of its receiver:\n\n<pre><code>{:a =&gt; 1}.with_indifferent_access[&quot;a&quot;] ...\n</code></pre>\n"],["with_layout_format","ActionView::LookupContext::Details","classes/ActionView/LookupContext/Details.html#method-i-with_layout_format","()","<p>A method which only uses the first format in the formats array for layout\nlookup. This method plays straight …\n"],["with_local_cache","ActiveSupport::Cache::Strategy::LocalCache","classes/ActiveSupport/Cache/Strategy/LocalCache.html#method-i-with_local_cache","()","<p>Use a local cache for the duration of block.\n"],["with_options","Object","classes/Object.html#method-i-with_options","(options)","<p>An elegant way to factor duplication out of options passed to a series of\nmethod calls. Each method called …\n"],["with_output_file","ActiveSupport::Testing::Performance::Benchmarker","classes/ActiveSupport/Testing/Performance/Benchmarker.html#method-i-with_output_file","()",""],["with_routing","ActionDispatch::Assertions::RoutingAssertions","classes/ActionDispatch/Assertions/RoutingAssertions.html#method-i-with_routing","()","<p>A helper to make it easier to test different route configurations. This\nmethod temporarily replaces @routes …\n"],["with_scope","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-with_scope","(method_scoping = {}, action = :merge, &block)","<p>with_scope lets you apply options to inner block incrementally. It takes a\nhash and the keys must be …\n"],["with_scope_level","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-with_scope_level","(kind, resource = parent_resource)",""],["with_transaction_returning_status","ActiveRecord::Transactions","classes/ActiveRecord/Transactions.html#method-i-with_transaction_returning_status","()","<p>Executes <code>method</code> within a transaction and captures its return\nvalue as a status flag. If the status is …\n"],["with_warnings","Kernel","classes/Kernel.html#method-i-with_warnings","(flag)","<p>Sets $VERBOSE for the duration of the block and back to its original value\nafterwards.\n"],["without_modules","ActionController::Base","classes/ActionController/Base.html#method-c-without_modules","(*modules)",""],["word_wrap","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-word_wrap","(text, *args)","<p>Wraps the <code>text</code> into lines no longer than\n<code>line_width</code> width. This method breaks on the first whitespace …\n"],["wrap","Array","classes/Array.html#method-c-wrap","(object)","<p>Wraps its argument in an array unless it is already an array (or\narray-like).\n<p>Specifically:\n<p>If the argument …\n"],["write","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-write","(str)",""],["write","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-write","(text=\"\")",""],["write","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-write","(name, value, options = nil)","<p>Writes the value to the cache, with the key.\n<p>Options are passed to the underlying cache implementation. …\n"],["write_asset_file_contents","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-write_asset_file_contents","(joined_asset_path, asset_paths)",""],["write_attribute","ActiveRecord::AttributeMethods::Dirty","classes/ActiveRecord/AttributeMethods/Dirty.html#method-i-write_attribute","(attr, value)","<p>Wrap write_attribute to remember original attribute value.\n"],["write_attribute","ActiveRecord::AttributeMethods::Write","classes/ActiveRecord/AttributeMethods/Write.html#method-i-write_attribute","(attr_name, value)","<p>Updates the attribute identified by <code>attr_name</code> with the\nspecified <code>value</code>. Empty strings for fixnum and …\n"],["write_cookies!","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-write_cookies-21","()",""],["write_entry","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-i-write_entry","(key, entry, options)",""],["write_entry","ActiveSupport::Cache::Strategy::LocalCache::LocalStore","classes/ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-i-write_entry","(key, value, options)",""],["write_fragment","ActionController::Caching::Fragments","classes/ActionController/Caching/Fragments.html#method-i-write_fragment","(key, content, options = nil)","<p>Writes <code>content</code> to the location signified by <code>key</code>\n(see <code>expire_fragment</code> for acceptable formats)\n"],["writer_method","ActiveRecord::Aggregations::ClassMethods","classes/ActiveRecord/Aggregations/ClassMethods.html#method-i-writer_method","(name, class_name, mapping, allow_nil, converter)",""],["xhr","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-xhr","(request_method, action, parameters = nil, session = nil, flash = nil)",""],["xhr","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-xhr","(request_method, path, parameters = nil, headers = nil)",""],["xhr?","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-xhr-3F","()",""],["xhtml_block?","ActionView::Helpers::AtomFeedHelper::AtomBuilder","classes/ActionView/Helpers/AtomFeedHelper/AtomBuilder.html#method-i-xhtml_block-3F","(method, arguments)","<p>True if the method name matches one of the five elements defined in the\nAtom spec as potentially containing …\n"],["xml","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-xml","(*args)",""],["xml_column_fallback","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-xml_column_fallback","(*args)",""],["xml_http_request","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-xml_http_request","(request_method, action, parameters = nil, session = nil, flash = nil)",""],["xml_http_request","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-xml_http_request","(request_method, path, parameters = nil, headers = nil)","<p>Performs an XMLHttpRequest request with the given parameters, mirroring a\nrequest from the Prototype …\n"],["xml_http_request?","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-xml_http_request-3F","()","<p>Returns true if the request&#39;s “X-Requested-With” header contains\n“XMLHttpRequest”. …\n"],["xmlschema","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-xmlschema","(fraction_digits = 0)",""],["xmlschema","Date","classes/Date.html#method-i-xmlschema","()",""],["xmlschema","DateTime","classes/DateTime.html#method-i-xmlschema","()","<p>Converts datetime to an appropriate format for use in XML\n"],["yaml_file_path","Fixtures","classes/Fixtures.html#method-i-yaml_file_path","()",""],["yaml_fixtures_key","Fixtures","classes/Fixtures.html#method-i-yaml_fixtures_key","(path)",""],["year","Integer","classes/Integer.html#method-i-year","()",""],["years","Integer","classes/Integer.html#method-i-years","()",""],["years_ago","Date","classes/Date.html#method-i-years_ago","(years)","<p>Returns a new Date/DateTime representing the time a number of specified\nyears ago.\n"],["years_ago","Time","classes/Time.html#method-i-years_ago","(years)","<p>Returns a new Time representing the time a number of specified years ago\n"],["years_since","Date","classes/Date.html#method-i-years_since","(years)","<p>Returns a new Date/DateTime representing the time a number of specified\nyears in the future.\n"],["years_since","Time","classes/Time.html#method-i-years_since","(years)","<p>Returns a new Time representing the time a number of specified years in the\nfuture\n"],["yesterday","Date","classes/Date.html#method-i-yesterday","()","<p>Returns a new Date representing the date 1 day ago (i.e. yesterday&#39;s\ndate).\n"],["yesterday","Time","classes/Time.html#method-i-yesterday","()","<p>Convenience method which returns a new Time representing the time 1 day ago\n"],["zone","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-zone","()","<p>Time uses <code>zone</code> to display the time zone abbreviation, so\nwe&#39;re duck-typing it.\n"],["zone","Time","classes/Time.html#method-i-zone","()","<p>Returns the TimeZone for the current request, if this has been set (via\nTime.zone=). If <code>Time.zone</code> has …\n"],["zone=","Time","classes/Time.html#method-i-zone-3D","(time_zone)","<p>Sets <code>Time.zone</code> to a TimeZone object for the current\nrequest/thread.\n<p>This method accepts any of the following: …\n"],["zones_map","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-zones_map","()",""],["README","","files/README_rdoc.html","","<p>Welcome to Rails\n<p>Rails is a web-application framework that includes everything needed to\ncreate database-backed …\n"],["CHANGELOG","","files/actionmailer/CHANGELOG.html","","<p>## Rails 3.0.20 (unreleased)\n<p>## Rails 3.0.19 (Jan 8, 2013)\n<p>No changes.\n"],["README","","files/actionmailer/README_rdoc.html","","<p>Action Mailer – Easy email delivery and testing\n<p>Action Mailer is a framework for designing email-service …\n"],["CHANGELOG","","files/actionpack/CHANGELOG.html","","<p>## Rails 3.0.20 (unreleased)\n\n<pre><code>Fixed JSON params parsing regression for non-object JSON content.</code></pre>\n<p>## Rails …\n"],["README","","files/actionpack/README_rdoc.html","","<p>Action Pack – From request to response\n<p>Action Pack is a framework for handling and responding to web …\n"],["CHANGELOG","","files/activemodel/CHANGELOG.html","","<p>## Rails 3.0.20 (unreleased)\n<p>Fix XML serialization of methods that return nil to not be considered as …\n\n"],["README","","files/activemodel/README_rdoc.html","","<p>Active Model – model interfaces for Rails\n<p>Active Model provides a known set of interfaces for usage in …\n"],["CHANGELOG","","files/activerecord/CHANGELOG.html","","<p>## Rails 3.0.20 (unreleased)\n<p>## Rails 3.0.19 (Jan 8, 2013)\n<p>Fix querying with an empty hash *Damien Mathieu* …\n"],["README","","files/activerecord/README_rdoc.html","","<p>Active Record – Object-relational mapping put on rails\n<p>Active Record connects classes to relational database …\n"],["CHANGELOG","","files/activesupport/CHANGELOG.html","","<p>## Rails 3.0.20 (unreleased)\n<p>## Rails 3.0.19 (Jan 8, 2013)\n<p>Hash.from_xml raises when it encounters type=“symbol” …\n"],["README","","files/activesupport/README_rdoc.html","","<p>Active Support – Utility classes and Ruby extensions from Rails\n<p>Active Support is a collection of utility …\n"],["CHANGELOG","","files/railties/CHANGELOG.html","","<p>## Rails 3.0.20 (unreleased)\n<p>## Rails 3.0.19 (Jan 8, 2013)\n\n<pre><code>No changes.</code></pre>\n"],["MIT-LICENSE","","files/railties/MIT-LICENSE.html","","<p>Copyright © 2004-2010 David Heinemeier Hansson\n<p>Permission is hereby granted, free of charge, to any …\n"],["README","","files/railties/README_rdoc.html","","<p>Railties – Gluing the Engine to the Rails\n<p>Railties is responsible to glue all frameworks together. Overall …\n"]]}}